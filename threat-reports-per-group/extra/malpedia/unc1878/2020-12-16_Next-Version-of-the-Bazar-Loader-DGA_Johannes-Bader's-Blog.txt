These are just unpolished notes.
The content likely lacks clarity and structure; and the results might not be adequately verified and/or incomplete.
The malware in this blog post is known as BazarBackdoor, Team9Backdoor, BazDor, BazarLoader and BazaLoader
The DGA in this blog post has been implemented by the DGArchive project.
For more information about the malware in this blog post see the Malpedia entry on BazarBackdoor.
This page lists malware URLs that are tagged with BazarLoader.
You can download bazaloader samples from this page.
Last week, a new version of the Bazar Loader Domain Generation Algorithm (DGA) appeared.
I already analyzed two previous versions, so I’m keeping this post short.
The DGA still uses the eponymous .bazar top level domain, but the second level domains are shorter with 8 characters instead of 12 for the previous versions:
I analysed the following sample without much obfuscation.
There are many other samples that have additional reverse engineering counter measures such as junk code, but a quick comparison revealed no functional differences.
Unpacking the sample leads to this:
Apart from the common dynamic loading of Windows API functions and encrypted strings, Bazar Loader relies on arithmetic substitution via identities to obfuscate the code.
The following relationship is particularly often used:
$$ a \oplus b = (\sim a \cdot b) + (a \cdot \sim b) $$
The same obfuscation is also used by Zloader.
It makes the code very hard to read.
Here is a small snippet from the DGA:
Hex Ray’s decompiler also produces really messy code because the arithmetic identities are not simplified:
The DGA uses the current month and year as the seed.
The seed is stored as a string, and its four ASCII characters are the basis for picking four character pairs.
These four pairs are joined to form the 8 second level characters.
The list of character pairs is generated by calculating the cartesian product of the consonants “bcdfghklmnpqrstvwxz” and vowels (with y) “aeiouy”.
The product is calculated both ways, leading to 19·6·2 character pairs.
These pairs are then concatenated into a large string of 456 characters by using a hardcoded sequence of random numbers:
The string is then encrypted using a random xor key of the same length.
Apart from the date-based seed, the DGA also uses a standard linear congruential generator (LCG) to pick the four character pairs.
The LCG is seeded with the current processor tick count and thus unpredictable.
For the first two character pairs, the random number is taken mod 19, and for the remaining two pairs mod 6.
These numbers correspond to the length of the consonants and vowels array, but make no sense in this context.
Because the random numbers are unpredictable, any combination of the 19·19·6·6 = 12996 character pairs could be picked.
Bazar Loader generates 10'000 domains per run, but does not guarantee they are unique.
On average, 6975 unique domains are expected:
$$ \mathbb{E} = 12996\left( 1 - \left(\frac{12996-1}{12966}\right)^{10000} \right) = 6975 $$
Even with the short waiting time between resolving domains, the malware will need to run a long time to get through the list of domains.
The following Python code shows how the domains are generated:
Here are all the domains for December 2020, January 2021, February 2021, and March 2021.
The following table summarizes the properties of the new Bazar Loader DGA.
© 2012 - 2021 Johannes Bader, last updated September 13, 2021
