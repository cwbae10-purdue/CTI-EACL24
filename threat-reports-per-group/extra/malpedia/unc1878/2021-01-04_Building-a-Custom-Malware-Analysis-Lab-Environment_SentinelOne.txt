Building the right malware analysis environment is the first step for every malware researcher.
When all system configurations and software installations are complete, you’re able to analyze and investigate malware properly.
In this post, I wanted to share my own experiences and scripts to help ease the workload of setting up a malware environment to explore malicious software.
In this post, you will learn how to:
When running multiple virtual machines, the host operating system will begin slowing down, so it is critical to set each virtual machine’s best requirements to optimize its performance.
To set up the virtual machines in this post, I recommend that the Windows 10 virtual machine be set with the minimum requirements of two processor cores with 4GB of RAM and the Linux virtual machine with two processor cores with 2GB of RAM.
Microsoft provides a free virtual machine which is intended for testing IE and Edge web browsers.
To download the Microsoft virtual machine go to https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/ and download the MSEdge on Windows 10 zip file and select your preferred VM platform, currently I’m using VM Fusion.
The next virtual machine we want to download is REMnux Linux.
The REMnux distro is a Linux distribution based on Ubuntu.
It has excellent tools for exploring network interactions for behavioral analysis and investigating system-level interactions of malware.
To download REMnux go to https://docs.remnux.org/install-distro/get-virtual-appliance and download the Virtual Machine platform of your choice.
Creating an isolated, controlled network environment when analyzing malware is extremely important due to the level of interaction it gives you with malware.
VMware Fusion gives you the capabilities to change key networking settings and add a virtual private network configuration to use for analysis between hosts.
We will only add two virtual machines to this lab environment, but you can add many virtual machines to this network.
The procedures to create this network is as follows:
Once you’ve created a custom network and both virtual machines have been downloaded, begin by unzipping the MSEdge Windows 10.
Since I’m using VMware Fusion, I will go through how to import the virtual image; the process for importing the virtual machine with other platforms is similar.
Open up VMware Fusion and follow these steps:
The REMnux virtual machine downloads as an .ova file.
I recommend you browse to docs.REMnux.org to confirm the hash of the downloaded OVA file.
If you are using VirtualBox, you can just import REMnux, but if you are using VMware Fusion or VMware Workstation, follow these instructions to import the REMnux:
One of the reasons I wanted to create a SentinelLabs VM Bare Bones malware analysis toolkit was that when installing FlareVM, I find it contains many tools that I do not use, and it takes a minimum of 40 minutes to install.
I wanted to create a script of the core tools and system configurations that I need to be able to analyze malware.
Follow this procedure to instal SentinelLabs RevCore Tools on MSEdge WIndows 10:
When analyzing malware, often the malware operation and the C2s are still active, so an excellent way to stay under the radar is to run malware in a controlled environment.
Analyzing network traffic is a trivial process in detecting malicious software callouts in real time network traffic.
This section will help you configure your virtual machines to capture the detonated malicious software’s network traffic or statically step through debugged code, which allows your investigation to understand the potential threat at hand.
The first thing that must be configured is the virtual private network communication between the MSEdge Windows 10 and REMnux:
The REMnux adapter for the virtual private network has already been configured from the previous section.
Now that the virtual machines are networked and can communicate with each other, it is time to configure a few tools on the REMnux virtual machine to capture traffic.
Installed on REMnux are various tools you can use to capture network traffic.
We will configure Burp Suite and INetSim.
Burp Suite is typically used to test web application firewalls, but in our case we want to configure it so that when Windows 10 detonates malware, it will try to establish a connection to a domain or C2.
The traffic will potentially use HTTPS and pass through Burp Suite, which will be bound to INetSim.
INetSim is a software suite that simulates common services for lab environments to analyze malware’s network behavior.
The Burp Suite setup is straightforward, but there are a couple of steps that we must configure before we can begin using it.
Go back to the REMnux virtual machine.
You should still be in Burp Suite Proxy tab, Edit proxy listener options.
Use your favorite text editor and open up the inetsim.conf file located in /etc/inetsim/.
Follow the steps to configure INetSim:
To test network connectivity from your Windows 10 virtual machine, open a command prompt and ping 10.1.2.1, then open Edge browser and type 10.1.2.1.
You should see the following message “This is the default HTML page for INetSim HTTP server fake mode.”
The final test is to make sure the DNS is working correctly and serving up requests.
For this example, I type in the search bar https://www.mymaliciousdomain.com/malwaretrojan.exe.
If everything is working, you should see a web page warning that the requested site is not secure.
I also like using Wireshark to capture packets to analyze the pcaps when investigating malware.
Open a new tab in your terminal in REMnux and type $ wireshark.
Once the application has opened, click on the shark fin icon on the far left of the toolbar to begin capturing packets.
When malware is executed, it usually makes some request to a domain or IP address.
INetSim helps with this by spoofing the responses to the malware that is waiting for a response.
An example would be if malware was executed and reached out to a domain and will not proceed without a response unless the conditions were met, which is the response.
If the malware doesn’t receive the response, it would terminate and not continue its malicious actions.
This is where the live environment assists us with responding to callouts and capturing network traffic.
For the final step of the lab environment setup, we will detonate a notorious binary trojan (or any malware you choose) to test the configuration is working correctly.
I’m testing with a Trickbot binary (SHA256: 49d95cae096f7f73b3539568b450076227b4ca42c0240044a7588ddc1f1b6985).
I’ve opened Process Explorer and TCPView to monitor the execution of this variant of Trickbot.
Detonating malware can save a lot of time before diving deep into reverse engineering as it allows you to gather insight and create an unbiased hypothesis.
In this example, when we detonated this trickbot sample there were three callouts that stuck out:
Although Trickbot is one of the more prolific malware strains today and is more complex than a few callouts, it is a good starting point if you are in the beginning stages of research and have never encountered this binary.
I’ve been successfully using this lab setup for many years.
A real-world example of using this lab setup occurred when I was brought in to help with an incident at short notice back in 2016.
I didn’t have time for an initial triage of the binary as I was joining a war room call for the briefing by the investigation team lead.
I started both VMs from snapshots and detonated the binary while being brought up to speed about the incident.
Within 5 minutes, I informed the investigation lead about an IP that the specific binary was calling out to, which was enough to give the threat hunters a place to begin.
After the war room call, I started reversing the malware and extracting additional IOCs and TTPs.
A lab environment setup and configuration varies during malware analysis.
When analyzing malware you need different tools to dissect and do deep analysis.
I hope the SentinelLabs RevCore Tools and configurations in this setup assists, but there might be a time that you need to analyze something different, like a dot net file, and may need an additional tool to fully disassemble the binary.
The journey of reversing malware is a marathon and not a sprint; growing your skill and learning from every malware analyzed should be the goal.
Get notified when we post new content.
Keep an eye out for new content!
In the era of interconnectivity, when markets, geographies, and jurisdictions merge in the melting pot of the digital domain, the perils of the threat ecosystem become unparalleled.
Crimeware families achieve an unparalleled level of technical sophistication, APT groups are competing in fully-fledged cyber warfare, while once decentralized and scattered threat actors are forming adamant alliances of operating as elite corporate espionage teams.
Get notified when we post new content.
Keep an eye out for new content!
