Join AdvIntel and Eclypsium for a live webinar exploring the implications of Trickbot’s foray into firmware on December 9, 2020.
Collaborative research between Advanced Intelligence (AdvIntel) and Eclypsium has discovered that the TrickBot malware now has functionality designed to inspect the UEFI/BIOS firmware of targeted systems.
This new functionality, which we have dubbed “TrickBoot,” makes use of readily available tools to check devices for well-known vulnerabilities that can allow attackers to read, write, or erase the UEFI/BIOS firmware of a device.
At the time of writing, our research uncovered TrickBot performing reconnaissance for firmware vulnerabilities.
This activity sets the stage for TrickBot operators to perform more active measures such as the installation of firmware implants and backdoors or the destruction (bricking) of a targeted device.
It is quite possible that threat actors are already exploiting these vulnerabilities against high-value targets.
Similar UEFI-focused threats have gone years before they have been detected.
Indeed, this is precisely their value to attackers.
This marks a significant step in the evolution of TrickBot.
Firmware level threats carry unique strategic importance for attackers.
By implanting malicious code in firmware, attackers can ensure their code is the first to run.
Bootkits allow an attacker to control how the operating system is booted or even directly modify the OS to gain complete control over a system and subvert higher-layer security controls.
UEFI level implants are powerful and stealthy.
Since firmware is stored on the motherboard as opposed to the system drives, these threats can provide attackers with ongoing persistence even if a system is re-imaged or a hard drive is replaced.
Equally impactful, if firmware is used to brick a device, the recovery scenarios are markedly different (and more difficult) than recovery from the traditional file-system encryption that a ransomware campaign like Ryuk, for example, would require.
TrickBot has proven to be one of the most adaptable pieces of malware today, regularly incorporating new functionality to escalate privilege, spread to new devices, and maintain persistence on a host.
The addition of UEFI functionality marks an important advance in this ongoing evolution by extending its focus beyond the operating system of the device to lower layers that are often not inspected by security products and researchers.
Adversaries leveraging TrickBot now have an automated means to know which of their latest victim hosts are vulnerable to UEFI vulnerabilities, much like they added capabilities in 2017 to exploit EternalBlue and EternalRomance vulnerabilities.
TrickBot is a highly modular trojan that is particularly notable for its ability to gain administrator privileges, spread within a network, and deliver additional malware payloads.
Originally identified in 2016, TrickBot was initially focused on stealing financial data and was considered a banking trojan.
However, as the malware evolved, attackers quickly found that it was a valuable enabler in all types of malware campaigns.
Notably, TrickBot has been widely observed working in conjunction with Emotet to deliver Ryuk ransomware.
TrickBot includes several key features that make it valuable for persistent malware campaigns.
The tool is able to capture user and admin credentials using Mimikatz and has incorporated UAC bypass techniques to ensure it can run with administrator privileges on an infected host without alerting the user.
TrickBot also makes use of the EternalBlue exploit (MS17-010) to spread to additional hosts in the network via SMB.
These capabilities make TrickBot an ideal dropper for almost any additional malware payload.
By adding the ability to canvas victim devices for specific UEFI/BIOS firmware vulnerabilities, TrickBot actors are able to target specific victims with firmware-level persistence that survives re-imaging or even device bricking capability.
The following graphics show the last two months of active TrickBot infections, peaking at up to 40,000 in a single day.
Getting a footprint is not a challenge for TrickBot operators.
Determining which victims are high-value targets and persisting in those environments to hit them again later defines a large portion of the TrickBot toolset and frames the significance of this discovery.
The number of Active TrickBot infections globally, post-TrickBot take-down attempts by cyber vendors and US Cyber Command, based on ISP geo.
While TrickBot as a malware toolset has been used by a diverse set of actors, there is one group that drives the majority of its use and is worth providing insights on in the context of this research in order to emphasize how powerful and successful TrickBot-based campaigns are.
The group’s alias is “Overdose,” and they are the primary Platform-as-a-Service fraud group behind TrickBot campaigns, namely those that result in Conti and Ryuk ransomware.
The group has made at least $150m since 2018 and recently extracted ~$34m (2,200 BTC) from a single victim.
This is the same group behind a spate of attacks on Healthcare victims, including that of UHS.
No direct attribution has been made as to their identity, other than they are Russian-speaking and Eastern European.
As can be seen in the graphic below, they participate in a number of criminal/fraud-related activities.
Their most common attack chain largely begins via EMOTET malspam campaigns, which then loads TrickBot and/or other loaders, and moves to attack tools like PowerShell Empire or Cobalt Strike to accomplish objectives relative to the victim organization under attack.
Often, at the end of the kill-chain, either Conti or Ryuk ransomware is deployed.
The same actor also uses LightBot, which is a set of PowerShell scripts designed to perform reconnaissance on victim networks, hardware, and software, in order to hand-pick which are high-value targets.
It is clear that such actors would benefit greatly from including a UEFI level bootkit in their kill chain.
They would survive system re-imagining efforts during the recovery phase of a Ryuk or Conti event, and they would further their ability to semi-permanently brick a device.
This provides criminal actors more leverage during ransom negotiation.
With this module, the TrickBot kill chain is primed with a list of vulnerable targets for firmware-level compromise.
The malware authors can leverage Emotet to malspam organizations and use TrickBoot to understand where and how to target the UEFI firmware.
Ryuk and Conti malware operators often offer to remove backdoors in an enterprise if the ransom is paid.
With this new module, these actors can remove backdoors like webshells, accounts, remote admin tools but keep a covert UEFI implant on the system to leverage later.
Collaborative research between Advanced Intelligence (AdvIntel) and Eclypsium has discovered new TrickBot functionality capable of probing the UEFI/BIOS firmware for nearly all Intel-based systems since 2014.
The new functionality, which we have dubbed “TrickBoot,” leverages readily available tools to enable the following reconnaissance actions:
Thus far, the TrickBot module is only performing reconnaissance and has not been seen modifying the firmware itself.
However, the malware already contains code to read, write, and erase firmware.
These primitives could be used to insert code to maintain persistence, as has been seen previously with the LoJax or MosaicRegressor.
Attackers could also simply erase the BIOS region to completely disable the device as part of a destructive attack or ransomware campaign.
The possibilities are almost limitless.
TrickBot has a history of reusing established tools and exploits such as Mimikatz and EternalBlue, and the malware is taking a similar approach to achieving persistence.
Specifically, TrickBoot uses the RwDrv.sys driver from the popular RWEverything tool in order to interact with the SPI controller to check if the BIOS control register is unlocked and the contents of the BIOS region can be modified.
TrickBoot includes an obfuscated copy of RwDrv.sys embedded within the malware itself.
It drops the driver into the Windows directory, starts the RwDrv service, and then makes DeviceIoControl calls to talk to the hardware.
RWEverything (read-write everything) is a powerful tool that can allow an attacker to write to the firmware on virtually any device component, including the SPI controller that governs the system UEFI/BIOS.
This can allow an attacker to write malicious code to the system firmware, ensuring that attacker code executes before the operating system while also hiding the code outside of the system drives.
These capabilities have been abused in the past as a way for attackers to maintain persistence in firmware, most notably by the LoJax malware and the Slingshot APT campaign.
However, TrickBoot marks a significant expansion of these techniques in the wild.
As is often the case with new TrickBot modules, the name “PermaDll” or the original name as “user_platform_check.dll” caught the attention of Advanced Intelligence researchers during the October 2020 discovery of the new TrickBot attack chain.
“Perma,” sounding akin to “permanent,” was intriguing enough on its own to want to understand this module’s role in TrickBot’s newest arsenal of loadable modules with the usual TrickBot export modules.
Initial analysis pointed to the possibility there might be capabilities related to understanding whether a victim system’s UEFI firmware could be attacked for purposes of persistence or destruction.
A joint collaboration was started with Eclypsium to analyze this module and to put whatever was found into context for defenders.
During the initial discovery of this new module on October 19, 2020, the team processed the encoded “permaDll32”.
They leveraged a custom-built AES encryption TrickBot module decrypter, which revealed the decoded module that became the subject of this in-depth analysis and discovery.
It took over five years for the industry to discover the use of Hacking Team’s VectorEDK UEFI implant code that was used in the wild as part of the MosaicRegressor campaign, despite the source code being readily available on github and even documented in its use.
Given how active, well-resourced, and capable TrickBot authors are, we wanted to research, analyze, and expose whatever tooling they already have in place in order to allow organizations to prepare effective defenses more rapidly.
The malware module outputs “PCH” queries based on the string slicing obfuscation.
The “permaDll” module checks for administrator privileges with the output “Not Admin.”
The boot process governs how a system and its components are initialized and coordinates the loading of the operating system, making it one of the most fundamentally important aspects of security for any device.
The code supporting the boot process is the first code executed on a system and is likewise some of the most privileged code, requiring protection even from privileged operating system (OS) code.
If the boot process is compromised, attackers gain control over the OS itself and establish ongoing persistence on the device even if the OS is reinstalled.
The boot process begins in the SPI flash memory chip that is built into the motherboard of the device.
The SPI contains the system’s BIOS, or more often, UEFI firmware, which has largely replaced BIOS as the default system firmware in modern systems.
This UEFI firmware will control the boot process and ultimately select the appropriate OS bootloader and execute the initial OS code before handing control over to the operating system itself.
All requests to the UEFI firmware stored in the SPI flash chip go through the SPI controller, which is part of the Platform Controller Hub (PCH) on Intel platforms.
This SPI controller includes access control mechanisms, which can be locked during the boot process in order to prevent unauthorized modification of the UEFI firmware stored in the SPI flash memory chip.
Modern systems are intended to enable these BIOS write protections to prevent the firmware from being modified; however, these protections are often not enabled or misconfigured.
If the BIOS is not write-protected, attackers can easily modify the firmware or even delete it completely.
More broadly, any time an actor can write to SPI flash, there are a number of extremely useful things that can be accomplished from the attacker’s perspective:
The TrickBot malware toolkit has a broad impact on national security.
Used by criminal, Russian, and North Korean actors, it is widely deployed and benefits from the most widespread malspam apparatus of our day: Emotet.
In a single day in October, 40,000 active, fully compromised devices were observed.
It does this with agility, stealth, and the ability to incorporate specific modules only as needed to accomplish campaign objectives without tipping its hat to defenders.
Organizations should note the following considerations when assessing the impact of the new TrickBoot capability:
Both 32-bit and 64-bit versions of this new TrickBot module have been observed so far.
Both versions appear to be functionally the same, but for this analysis, we’ll be using addresses and code samples from the 32-bit version.
TrickBot uses the string and library-call obfuscation library from https://github.com/andrivet/ADVobfuscator, so most strings in the DLL are obfuscated.
This module does not use the library-call obfuscation, but other TrickBot samples have been found to use that feature.
Rather than including obfuscated strings in the data section of the executable, all strings are encoded as inline instructions to write obfuscated strings to local stack frame buffers and then immediately decode them at the time of use.
Several variants of this obfuscation method are used within this sample, and each string has its own unique “key” value that is used to modify each byte of the string.
Variants observed in this sample include:
A fourth variant, which uses dec to subtract one from each byte, was also found within the sample, but this is likely a compiler optimization of the subtract case when the value of 1 was chosen as the random key at compile time.
Some previous TrickBot samples included this string-building and deobfuscation code inline within each function everywhere obfuscated strings are used, but this sample has many copies of the deobfuscation functions.
Most are used to decode only a single string, but these can be re-used when strings are the same length, and the same variant is being used.
The deobfuscation variants look like this:
In addition to the obfuscated strings, this sample includes a copy of the RwDrv.sys driver from RWEverything which is simply xored against a hardcoded value.
This value is 0x75 in the 32-bit sample and 0x4E in the 64-bit sample.
The function to decode the driver and drop it into the Windows directory is at 0x10009F9D, and we’ll refer to it as “decode_and_drop_rwdrvsys.”
RwDrv.sys is a well-known kernel driver that acts as a privileged proxy to allow userspace applications to directly access hardware interfaces.
It has been used in the wild as part of attack campaigns such as Lojax to talk to the SPI controller hardware in order to modify the UEFI firmware by inserting new UEFI modules and gain pre-boot code execution and persistence.
This type of kernel driver is particularly dangerous because allowing user space applications direct access to hardware interfaces can bypass operating security controls and gain privilege escalation, persistence, and even brick the hardware itself.
As part of a previous research effort, we identified a large number of these signed drivers which can be used in this type of attack scenario and which generally give malware operators the ability to remotely perform firmware level attacks on victim hosts.
Additionally, 0x10009BFC, which we’ll refer to as “open_or_init_driver” is a helper function which calls decode_and_drop_rwdrvsys and also several other helper functions to load the driver, create a Windows service, and open a handle to the RwDrv service.
Since this sample doesn’t use the library-call obfuscation provided by ADVobfuscator, all of the calls to DeviceIoControl are in-the-clear and easy to find.
Thus, we can take a closer look at these functions and deobfuscate the strings they contain.
As an example, 0x1000B167 contains the obfuscated string “uefi_expl_port_read() ERROR: Not initialized”.
This code is from Dmytro Oleksiuk’s fwexpl repository available at https://github.com/Cr4sh/fwexpl.
In particular, this sample includes functions fromhttps://github.com/Cr4sh/fwexpl/blob/master/src/libfwexpl/src/libfwexpl_rwdrv.cpp in order to use the RwDrv.sys driver to access hardware interfaces.
The functions from libfwexpl_rwdrv.cpp which are included in this TrickBot sample are:
The PCI access functions in the fwexpl repository require the user to calculate the legacy PCI configuration address to be used rather than taking bus, device, function and register arguments, so two additional helper functions were added to make it easier to use:
Building on top of these hardware-access primitives, the sample contains additional helper functions to perform a number of interesting operations such as 0x100093C7, which we’ll refer to as “identify_platform.”
This function uses pci_read_reg to read VendorID, DeviceID, and RevisionID fields from the CPU Root Complex (BDF 0:0.0) and Platform Controller Hub (PCH) LPC Interface (BDF 0:1F.0).
Reading these allows permaDll32 to determine which specific model of CPU and PCH the device is running on.
Generally, this malware will attempt to run on all Intel platforms.
This set of device IDs is used to determine where to look for the BIOS Control register, the Flash Protected Range registers, and SPIBAR.
The set of device IDs it looks for covers client platforms from Skylake through Comet Lake and also the C620 Series of Server PCH.
If the device ID is something not on this list, the malware will use the pre-Skylake register definitions.
The tables of PCH Device IDs included in this sample are the following:
0x1002402C 100 Series PCH DIDs (Skylake):
0x10024050 200 Series PCH DIDs (Kaby Lake):
0x10024060: 300 Series PCH DIDs (Coffee Lake):
0x10024080 400 Series PCH DIDs (Comet Lake):
0x10024098 C620 Series Server PCH DIDs:
The code has two copies of the 400 Series PCH DID entries and checks the current PCH DID against both, which appears to be a bug, but does not cause functional problems.
0x100240B4 Copy of 400 Series PCH DIDs (Comet Lake):
Once the code has determined which generation of PCH it’s running on, it uses the function at 0x1000C0A2, which we’ll refer to as “get_regs_from_generation” to know where to access these registers:
If the TrickBot module is running on a PCH that was not included in the set of lookup tables in pch_did_to_generation, this function uses a pre-Skylake set of default values for the hardware-access operations that follow.
Now that the malware knows where to find these SPI controller registers, there are some additional helper functions which can be used to check the state of the BIOS Region protections and perform SPI operations to the external flash chip:
Click here to see the code.
Click here to hide the code.
Click here to see the code.
Click here to hide the code.
Click here to see the code.
Click here to hide the code.
Click here to see the code.
Click here to hide the code.
Click here to see the code.
Click here to hide the code.
Click here to see the code.
Click here to hide the code.
Click here to see the code.
Click here to hide the code.
Click here to see the code.
Click here to hide the code.
Click here to see the code.
Click here to hide the code.
The code supports the following types of SPI Flash Cycle requests:
Click here to see the code.
Click here to hide the code.
Click here to see the code.
Click here to hide the code.
Because TrickBot uses a modular framework to allow new modules to be developed and deployed to targets, this sample includes some infrastructure code to implement this framework, which is shared with previous samples.
The main function where the module-specific operations start is at 0x1000D663, which we’ll refer to as “permadll32_main_module”.
Although this module appears only to identify the target hardware and determine if the BIOS region is writable, its code could be easily modified to write to the SPI Flash to implant the system by modifying the firmware or brick the system by erasing the BIOS Region entirely.
This could be automated via the use of an additional module to perform the attack after the reconnaissance has been completed by this module or via ‘at-the-keyboard’ manual operations.
Given the popularity of TrickBot in the wild, it is important for security teams to ensure that their devices are not vulnerable and have not been compromised.
Firmware integrity checks are particularly important for any device that is known to have been compromised by TrickBot.
The following steps can be performed with open-source tools such as CHIPSEC or via the Eclypsium platform.
Given the size and scope of TrickBot, the discovery of a module specifically targeting firmware is troubling.
These threat actors are collecting targets that are verified to be vulnerable to firmware modification, and one line of code could change this reconnaissance module into an attack function.
Like other in-the-wild firmware attacks, TrickBot reused publicly available code to quickly and easily enable these new firmware-level capabilities.
At a time when geopolitical events and a global pandemic have upended life across the globe, TrickBot is digging into the hidden area of firmware that is often overlooked.
This presents a greater risk than ever before because the scale of TrickBot, which has previously brought highly disruptive ransomware, now brings firmware attacks to many more organizations who are likely unprepared for such techniques.
Note: The TrickBoot module includes an obfuscated copy of RwDrv.sys embedded inside it, but when this file is dropped into the Windows directory, it can be identified with the following IOCs.
Click here to download the indicators of compromise for automation.
