Making the world safer and more secure
Publicly discovered in late April 2020, the Team9 malware family (also known as ‘Bazar’ [1]) appears to be a new malware being developed by the group behind Trickbot.
Even though the development of the malware appears to be recent, the developers have already developed two components with rich functionality.
The purpose of this blog post is to describe the functionality of the two components, the loader and the backdoor.
Author: Nikolaos Pantazopoulos, Co-author: Stefano Antenucci (@Antelox), written in close collaboration with NCC Group’s RIFT.
We assess that this is an earlier variant of the Team9 loader (35B3FE2331A4A7D83D203E75ECE5189B7D6D06AF4ABAC8906348C0720B6278A4) because of its simplicity and the compilation timestamp.
The other variant was compiled more recently and has additional functionality.
It should be noted that in very early versions of the loader binaries (2342C736572AB7448EF8DA2540CDBF0BAE72625E41DAB8FFF58866413854CA5C), the developers were using the Windows BITS functionality in order to download the backdoor.
However, we believe that this functionality has been dropped.
Before proceeding to the technical analysis part, it is worth mentioning that the strings are not encrypted.
Similarly, the majority of the Windows API functions are not loaded dynamically.
When the loader starts its execution, it checks if another instance of itself has infected the host already by attempting to read the value ‘BackUp Mgr’ in the ‘Run’ registry key ‘Software\Microsoft\Windows\CurrentVersion\Run’ (Figure 1).
If it exists, it validates if the current loaders file path is the same as the one that has already been set in the registry value’s data (BackUp Mgr).
Assuming that all of the above checks were successful, the loader proceeds to its core functionality.
Figure 1 – Loader verifies if it has already infect the host
However, if any of the above checks do not meet the requirements then the loader does one of the following actions:
When the persistence operation finishes, the loader deletes itself by writing a batch file in the Windows temporary folder with the file name prefix ‘tmp’ followed by random digits.
Next, the loader fingerprints the Windows architecture.
This is a crucial step because the loader needs to know what version of the backdoor to download (32-bit or 64-bit).
Once the Windows architecture has been identified, the loader carries out the download.
The core functionality of the loader is to download the Team9 backdoor component.
The loader contains two ‘.bazar’ top-level domains which point to the Team9 backdoor.
Each domain hosts two versions of the Team9 backdoor on different URIs, one for each Windows architecture (32-bit and 64-bit), the use of two domains is highly likely to be a backup method.
Any received files from the command and control server are sent in an encrypted format.
In order to decrypt a file, the loader uses a bitwise XOR decryption with the key being based on the infected host’s system time (Year/Month/Day) (Figure 2).
Figure 2 – Generate XOR key based on infected host’s time
As a last step, the loader verifies that the executable file was decrypted successfully by validating the PE headers.
If the Windows architecture is 32-bit, the loader injects the received executable file into ‘calc.exe’ (Windows calculator) using the ‘Process Hollowing’ technique.
Otherwise, it writes the executable file to disk and executes it.
The following table (table 1) summarises the identified URIs found in the early variants of the loader.
The table below (table 2) summarises the identified domains found in the early variants of the loader.
Lastly, another interesting observation is the log functionality in the binary file that reveals the following project file path:
In this section, we describe the functionality of a second loader that we believe to be the latest variant of the aforementioned Team9 loader.
This assessment is based on three factors:
Unlike its previous version, the strings are encrypted and the majority of Windows API functions are loaded dynamically by using the Windows API hashing technique.
Once executed, the loader uses a timer in order to delay the execution.
This is likely used as an anti-sandbox method.
After the delayed time has passed, the loader starts executing its core functionality.
Before the malware starts interacting with the command and control server, it ensures that any other related files produced by a previous instance of the loader will not cause any issues.
As a result the loader appends the string ‘_lyrt’ to its current file path and deletes any file with this name.
Next, the loader searches for the parameter ‘-p’ in the command line and if found, it deletes the scheduled task ‘StartDT’.
The loader creates this scheduled task later for persistence during execution.
The loader also attempts to execute hijacked shortcut files, which will eventually execute an instance of Team9 loader.
This functionality is described later.
The loader performs a last check to ensure that the operating systems keyboard and language settings are not set to Russian and creates a mutex with a hardcoded name ‘ld_201127’.
The latter is to avoid double execution of its own instance.
As mentioned previously, the majority of Windows API functions are loaded dynamically.
However, in an attempt to bypass any API hooks set by security products, the loader manually loads ‘ntdll’ from disk, reads the opcodes from each API function and compares them with the ones in memory (Figure 3).
If the opcodes are different, the loader assumes a hook has been applied and removes it.
This applies only to 64-bit samples reviewed to date.
Figure 3 – Scan for hooks in Windows API functions
The next stage downloads from the command and control server either the backdoor or an updated version of the loader.
It is interesting to note that there are minor differences in the loader’s execution based on the identified Windows architecture and if the ‘-p’ parameter has been passed into the command line.
Assuming that the ‘-p’ parameter has not been passed into the command line, the loader has two loops.
One for 32-bit and the other for 64-bit, which download an updated version of the loader.
The main difference between the two loops is that in case of a Windows x64 infection, there is no check of the loader’s version.
The download process is the same with the previous variant, the loader resolves the command and control server IP address using a hardcoded list of DNS servers and then downloads the corresponding file.
An interesting addition, in the latest samples, is the use of an alternative command and control server IP address, in case the primary one fails.
The alternative IP address is generated by applying a bitwise XOR operation to each byte of the resolved command and control IP address with the byte 0xFE.
In addition, as a possible anti-behaviour method, the loader verifies that the command and control server IP address is not ‘127.0.0.1’.
Both of these methods are also present in the latest Team9 backdoor variants.
As with the previous Team9 loader variant, the command and control server sends back the binary files in an encrypted format.
The decryption process is similar with its previous variant but with a minor change in the XOR key generation, the character ‘3’ is added between each hex digit of the day format (Figure 4).
Figure 4 – Add the character ‘3’ in the generated XOR key
If the ‘-p’ parameter has been passed into the command line, the loader proceeds to download the Team9 backdoor directly from the command and control server.
One notable addition is the process injection (hollow process injection) when the backdoor has been successfully downloaded and decrypted.
The loader injects the backdoor to one of the following processes:
Whenever a binary file is successfully downloaded and properly decrypted, the loader adds or updates its persistence in the infected host.
The persistence methods are available in table 3.
The following tables summarises the identified bazar domains and their URIs for this Team9 loader variant.
We are confident that this is the backdoor which the loader installs onto the compromised host.
In addition, we believe that the first variants of the Team9 backdoor started appearing in the wild in late March 2020.
Each variant does not appear to have major changes and the core of the backdoor remains the same.
During analysis, we identified the following similarities between the backdoor and its loader:
Furthermore, the backdoor generates a unique ID for the infected host.
The process that it follows is:
Note: In a few samples, the above algorithm is different.
The developers use hard-coded dates, the Windows directory file paths in a string format (‘C:\Windows’ and ‘C:\Windows\system32’) and the NETBIOS name.
Based on the samples’ functionality, there are many indications that these binary files were created for debugging purposes.
Figure 5 – Before conversion
Figure 6 – After conversion
The backdoor appears to support network communication over ports 80 (HTTP) and 443(HTTPS).
In recent samples, a certificate is issued from the infected host for communication over HTTPS.
Each request to the command and control server includes at least the following information:
Lastly, unlike the loader which decrypts received network replies from the command and control server using the host’s date as the key, the Team9 backdoor uses the bot ID as the key.
The backdoor supports a variety of commands.
These are summarised in the table below.
Table 7 summarises the report structure of each command when it reports back (POST request) to the command and control server.
Note: In a few samples, the backdoor reports the results to an additional IP address (185.64.106[.
]73) If it cannot communicate with the bazar domains.


				View all posts by Nikolaos Pantazopoulos
