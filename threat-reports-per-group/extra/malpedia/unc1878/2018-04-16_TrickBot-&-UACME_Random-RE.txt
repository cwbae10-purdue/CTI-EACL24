Macro uses a custom string lookup
2153be5c6f73f4816d90809febf4122a7b065cbfddaa4e2bf5935277341af34c
Sample has multiple internal layers on the crypter along with a function decoding layer that decodes out each individual function as it needs it.
Checks for the prescence of the following DLLs by parsing them from the PEB
Function that parses all unicode DLLs from PEB and then compares it with a passed in string
String decoding is base64 with a custom alphabet:
Checks if local system
https://github.com/hfiref0x/UACME/blob/b8c4c71e1ba3b6646a48c0b655ce6d6e388c6112/Source/Shared/util.c
Also some strings based on UACME #41, which was reported on by F-secure in December of last year[1].
Around the same time #41 was also added to IcedId in late November of 2017[2]
If SID not matches then it checks if it’s running out of %AppData%.
If not then it checks if it’s running out of system32 or else it copies itself over to %AppData% into a NetViewer folder after slightly manipulating it’s filename in the process.
Afterwords it checks what elevation level it is running at by using similar code as supGetElevationType from UACME[5].
If it’s executing as TokenElevationTypeLimited then it moves into using #41 from UACME.
I let it run all the way up until it was about to call ShellExec on the COM object and then changed the malicious binary location with cmd.exe for a pretty picture:
If that lines up then a XOR encoded compressed PE file is decoded out using the same encoding routine used on the functions.
Next it’s decompressed using LZO, the code used matches up with the code that was utilized by Dyreza but since code share has already been found it wouldn’t be abnormal for them to reuse libraries they already had on hand.
Appears to be from MiniLZO but a common compression library so hard to tell specifically.
Also of note is the same decompression routine is utilized to decompress the loader bytecode as well.
If running in WOW64 then another smaller 64 bit EXE is decoded and mapped into memory at 0x100000 and then some hardcoded data is mapped into an executable region of memory which will kick off loading the bot into a new process.
Before it gets there however it performs a little trick where it does a far jump into 64 bit code, what happens at the call instruction is completely dependent on which debugger you are using.
This technique is commonly refered to as ‘Heavens Gate’ with a far call to 0x33:addr which switches the execution over to 64 bit because we are running in WOW64[3,4].
Decoded bot EXE that is injected has the same string encoding as the loader layer did so this decoded EXE is the TrickBot the previous layer is probably TrickLoader but it’s been changed to be position independent bytecode with function obfuscation to hide itself and further protect the bot EXE.
Decoding the config out of the bot EXE hasn’t changed.
Place for me to dump random RE posts mostly revolving around Malware.
