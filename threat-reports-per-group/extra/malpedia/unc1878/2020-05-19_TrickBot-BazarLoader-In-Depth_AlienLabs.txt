Explore The Hub, our home for all virtual experiences
Ofer Caspi, a fellow Alien Labs researcher, co-authored this blog.
AT&T Alien Labs actively tracks the TrickBot group through an automated malware analysis system, hunting, and in-depth technical research.
EmerDNS is desirable for attackers because it is a distributed blockchain that is decentralized, cannot be censored, and cannot be altered, revoked or suspended by any authority.
Alien Labs’ automated malware analysis engine had picked up these samples a few days earlier (Ex: 7c93d9175a38c23d44d76d9a883f7f3da1e244c2ab6c3ac9f29a9c9e20d20a5f)
BleepingComputer posted a blog with input from Vitali Kremez regarding a phishing campaign distributed through the Sendgrid email marketing platform delivering COVID-19 lures that ultimately led to the TrickBot BazarBackdoor.
The purpose of this blog is to provide additional technical details and an in-depth study of the signed TrickBot BazarLoader.
Since TrickBot was discovered in 2016 it has been involved in information stealing, credential theft, ransomware, bitcoin mining, and loading other common crimeware malware as a first or second stage loader.
For initial access as a first stage loader it typically accomplishes its objective through spear phishing links (T1192) or spear phishing attachments (T1193) using macro enabled Microsoft Office files.
As a second stage payload and Dynamic Link Library (DLL) it is frequently loaded by Emotet.
To a lesser extent TrickBot has been loaded by Ostap JavaScript Downloader and Buer Loader.
In higher priority, higher profile TrickBot Anchor campaigns that target enterprises, PowerTrick and more_eggs/TerraLoader have been used to load other frameworks.
TrickBot has recently added a Remote Desktop Protocol (RDP) brute force scanner module, an Active Directory (AD) harvesting module, and the mexec executor module.
There are some indications that TrickBot may be moving away from their mshare, mworm, and tabDll modules for retrieving payloads from URLs in favor of the “nworm” module performing this task.
It is important to note that TrickBot group prefers to use shellcode “file-less” modules making detection more difficult.
Alien Labs has previously identified digitally signed TrickBot Loaders, one of which was signed by an entity named “VB CORPORATE PTY.
LTD.” Pivoting in VirusTotal on the signer shows the first submission was on 2020-01-02 20:24:57.
Historically, the TrickBot group has continued to reuse their revoked certificates to sign TrickBot Loaders as long as six months after the initial date of detection on VirusTotal.
A list of known TrickBot signers is included below.
The associated signature serial numbers are included in the YARA rule in the Appendix.
The TrickBot BazarLoader authors have produced an advanced module, with a significant amount of obfuscation.
The BazarLoader/Cryptor uses multiple routines to hide API calls and embedded strings, which are then decrypted and resolved at runtime.
Once executed, the loader will allocate memory to store and decrypt its shellcode, which will be allocated to a NUMA node for faster execution.
After allocation and decryption, the next instructions will jump to the shellcode that will be executed on the heap.
Next, the malware will try to communicate with .bazar domain C2 servers.
For persistence the loader will create a registry key under “HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit”.
The malware uses the Windows API “VirtualAllocExNuma” function to allocate memory for its shellcode to be executed.
The “VirtualAllocExNuma” function is used to allocate memory on a NUMA node, which allows for faster execution.
The implementation can be seen In Figure 1 below.
It is interesting to note that the “VirtualAllocExNuma” function is not commonly used in process injection.
API Resolution and Shellcode Decryption Routines
In Figure 1 above the BazarLoader allocates memory using the uncommon “VirtualAllocExNuma” routine, and then it uses two iterations of the decryption routine to decrypt its shellcode.
In the second call to the decrypt function some of the encryption key bytes are changed based on function parameters.
In Figure 2 below a representation of the decompiled decrypt routine can be seen importing the encryption key, modifying the encryption key bytes dependent on the parameters passed, and then decrypting the data.
The BazarLoader authors have created dozens of decryption routines, and with almost each string including APIs, DLLs, and C2s there is a once per use unique decryption routine.
An example of multiple decryption routines can be seen in Figures 3, 4, 5 and 6 below.
The loader uses the same decryption technique described above to resolve the API calls it uses during execution.
The Windows API resolution can be seen in Figure 6 below.
For injection, the malware resolves APIs from the ntdll.dll after it loads from disk and checks that there are no inline hooks within its function, that could be created for example by AV software that tracks those API calls.
The targeted processes for injection can be seen in Figure 7 below.
Targeted svchost, explorer, and cmd Windows Processes
The BazarLoader injection code can be seen in Figure 8 below.
The load order of APIs called in the injection procedure is:
The obfuscated C2 servers are decrypted in the function shown in Figure 9 below.
The TrickBot group continues to be a formidable threat in the cybercrime landscape as well as the advanced adversary threat landscape with TrickBot Anchor.
The following YARA rules are used by Alien Labs.
For additional detections and a complete listing of Indicators of Compromise (IOCs) please see the OTX pulse.
The following list of sources was used by the blog authors during the research and analysis associated with this blog entry.
About the Author: Dax Morrow
Dax is a Security Researcher at Alien Labs, a part of AT&T Cybersecurity.
He can be found on LinkedIn and Twitter.
Read more posts from Dax Morrow ›
‹ BACK TO ALL BLOGS
AT&T Cybersecurity Insights™ Report:
5G and the Journey to the Edge
We use cookies to provide you with a great user experience.
By using our website, you agree to our Privacy Policy and Website Terms of Use.
