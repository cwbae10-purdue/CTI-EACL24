These are just unpolished notes.
The content likely lacks clarity and structure; and the results might not be adequately verified and/or incomplete.
The malware in this blog post is known as BazarBackdoor, Team9Backdoor, BazDor, BazarLoader and BazaLoader
For more information about the malware in this blog post see the Malpedia entry on BazarBackdoor.
This page lists malware URLs that are tagged with BazarLoader.
You can download bazaloader samples from this page.
Edit 2020-07-19: Cybereason published an excellent article A Bazar of Tricks: Following Team9’s Development Cycles.
The article shows that the DGA is part of Bazar Loader, which will try to download Bazar Backdoor.
I therefore renamed most instances of BazarBackdoor to BazarLoader.
When I analyzed the domain generation algorithm of BazarLoader, I noticed a sample that generates bizarre “domains”:
Two things are obviously wrong:
The first error is easy to explain: the authors meant to use .bazar, which is a valid EmerDNS domain.
The second mistake is more interesting.
The authors must have noticed the occasional special characters too.
But they probably couldn’t find the root cause and instead programmed a workaround that fixes some, but not all, characters.
Here is the sample with the broken DGA that I looked at:
The domain generation algorithm in this faulty version is the same as the one documented here.
The only place that is different is shown in the following screenshot comparison.
The faulty DGA is on the left, the fixed on the right.
Can you spot the problem?
The divisions by invariant multiplication are hard to read, but notice the right site being much shorter even tough the calculation is basically the same.
This is because compiler optimization was able to strip some minor corrections that are only necessary for large numbers.
Here the decompiled code after some renaming and cleaning up:
This is the same code as for the fixed DGA, except for how the random numbers are generated:
The problem with the first approach is, that the number will be 0x80000000 or larger in 50% of the cases.
Since it is a signed number, it becomes negative.
And the remainder of a negative number for a positive divisor is negative.
The fixed version doesn’t have this problem, because the integer overflow does not happen.
When extending the random number ranges to the negative, we get these character sets:
The malware authors used the following patch instead of fixing the integer overflow.
The patch is an if condition that replaces characters below “a” — that includes all special characters generated by the faulty DGA — with “z”.
This resolves the problem for the last half of the second level domain (in particular, the 7th and 8th letter, the rest are not affected by the bug).
However, the first half of the second level domain remains unmodified.
The following Python reimplementation generates all possible domains for a given date.
Note that due to the extended random ranges, there are about 55000 domains per month instead of 2160 for the fixed version.
So even if the correct tld would have been used, then the number of domains would have been a problem for the attackers — as they have no way of predicting which ones are used in what order.
© 2012 - 2021 Johannes Bader, last updated September 13, 2021
