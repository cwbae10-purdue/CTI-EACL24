Defend against threats, ensure business continuity, and implement email policies.
Protect against email, mobile, social and desktop threats.
Engage your users and turn them into a strong line of defense against phishing and other cyber attacks.
Defend against cyber criminals accessing your sensitive data and trusted accounts.
Reduce risk, control costs and improve data visibility to ensure compliance.
Protect from data loss by negligent, compromised, and malicious users.
Protect against digital security risks across web domains, social media and the deep and dark web.
Get deeper insight with on-call, personalized assistance from our expert team.
  Get real-time insight into threats that can cause data loss and brand damage.
Protect your people from email and cloud threats with an intelligent and holistic approach
Help your employees identify, resist and report attacks before the damage is done
Prevent data loss via negligent, compromised and malicious insiders by correlating content, behavior and threats
Manage risk and data retention needs with a modern compliance and archiving solution
Keep your people and their cloud apps secure by eliminating threats, avoiding data loss and mitigating compliance risk
Implement the very best security and compliance solution for your Microsoft 365 collaboration suite
Secure access to corporate resources and ensure business continuity for your remote workers
Deliver Proofpoint solutions to your customers and grow your business.
Learn about the benefits of becoming a Proofpoint Extraction Partner.
Learn about our global consulting and services partners that deliver fully managed and integrated solutions.
Learn about our relationships with industry-leading firms to help protect your people, data and brand.
Learn about the technology and alliance partners in our Social Media Protection Partner program.
Small Business Solutions for channel partners and MSPs.
Find the information you're looking for in our library of videos, data sheets, white papers and more.
Keep up with the latest news and happenings in the ever‑evolving cybersecurity landscape.
Learn about the human side of cybersecurity.
Episodes feature insights from experts and executives.
Learn about the latest security threats and how to protect your people, data, and brand.
Connect with us at events to learn how to protect your people and data from ever‑evolving threats.
Read how Proofpoint customers around the globe solve their most pressing cybersecurity challenges.
Browse our webinar library to learn about the latest threats, trends and issues in cybersecurity.
Learn about our threat operations center and read about the latest risks in our threat blog and reports.
Proofpoint is a leading cybersecurity company that protects organizations' greatest assets and biggest risks: their people.
Today’s cyber attacks target people.
Learn about our unique people-centric approach to protection.
Stand out and make a difference at one of the world's leading cybersecurity companies.
Read the latest press releases, news stories and media highlights about Proofpoint.
Access the full range of Proofpoint support services.
Most malware is distributed in "packed" form: typically an executable containing code to evade antivirus detection and sandboxes before extracting and executing the intended payload.
There are many commodity packers written in Microsoft .NET, usually but not always containing malware also written in .NET.
We discuss two prevalent such packers used to distribute a wide variety of malware but hiding the intended payload in images.
Steganography is the technique of sending hidden messages in apparently innocent forms.
For hiding data in images, the main techniques are:
To be truly "hidden" the latter would arguably mean using only the least significant bits of the data so that the image appears "normal" when rendered.
The packers discussed here generally use the entire image pixel data so aren't truly "hidden"; if they were displayed, the images would appear random.
In this packer, the .NET executable contains a square PNG image in a .NET resource, which is typically a large proportion of the whole file size.
The image can be decoded to an intermediate executable, which contains a .NET resource which in turn can be decoded to the payload.
Sometimes the intermediate executable uses an additional commodity packer such as ConfuserEx or .NET Reactor.
The first stage payload is decoded from the Blue, Green, Red, and Alpha (BGRA) channels taking pixels in columns.
Some versions use Red, Green, and Blue (RGB) channels instead.
For example, in sample SHA256 - 026b38e8eb0e4f505dc5601246143e7e77bbd2630b91df50622e7a14e0728675:
Figure 1: Image taken from sample SHA256: 026b38e8eb0e4f505dc5601246143e7e77bbd2630b91df50622e7a14e0728675
Using channels BGRA from the image we get data starting:
In general, the extracted data is then XORed with a short XOR key or the first 16 bytes of the data and possibly decompressed with gzip, yielding an intermediate stage .NET executable.
For the above sample, the XOR key is (in hex) "74 43 74 17 74 02 74 23 74", which gives the executable:
This intermediate stage is often itself packed with ConfuserEx, but after unpacking that, it contains a .NET resource which contains the payload, typically XORed with two keys:, a short (often truncated Unicode) one, followed by a 16-byte key stored at the start of the resulting file.
In the above sample, the intermediate executable is packed with .NET Reactor.
After deobfuscation with a tool such as de4dot, the deobfuscated executable contains a resource "2EJp1.resources" which starts:
XORing with key "00 77 00 55 00 6c 00 59 00 71 00 79 00 4e" ("wUlYqyNZJIbjVN" in Unicode, truncated to half the length):
  and then XORing with the first 16 bytes of the result gives the payload, Agent Tesla (a prevalent information stealer) in this case:
In some early versions of this packer, this .NET resource was named "CyaX_Sharp.Properties.Resources.resources" hence the name we have given to this packer family.
As mentioned above, some samples use the Red, Green, and Blue (RGB) channels, and some compress the intermediate executable with gzip.
For example, in sample SHA256 - 083521fa4522245adc968b1b7dd18da29b193fd41572114c9d7dd927918234ea:
Figure 2: Image taken from sample SHA256:  083521fa4522245adc968b1b7dd18da29b193fd41572114c9d7dd927918234ea
the image uses RGB channels which decode to:
XORing with key (in hex) "24 04 33" gives:
which is a 4-byte DWORD containing the uncompressed file size, followed by a gzip-ed file, starting with a 10-byte gzip header, which decompresses to the intermediate .NET executable:
  This contains a .NET resource "d2o6x4FhIdl.resources" starting:
which when XORed with keys "00 66 00 43 00 73 00 6b 00 62 00 67 00" ("fCskbgkLbLArI" in Unicode, truncated) and then "07 2e 8c d5 50 23 1b e3  be be 38 4f 0f 4b 8d ca" gives:
which contains the payload, Agent Tesla again.
In a recent variation of this packer, the first stage payload is actually stored in a second PNG image extracted from the least significant bits of the Red, Green, and Blue channels in the first image, taking pixels in rows (so "proper" steganography in this case).
The intermediate stage .NET executable is then extracted from the Blue, Green, Red, and Alpha channels of the second image with pixels taken in columns, without XOR this time.
For example, in sample SHA256 – 04794ec7e7eb5c6611aada660fb1716a91e01503fb4703c7d2f2099c089c9017:
 Figure 3: Image taken from sample SHA256:  04794ec7e7eb5c6611aada660fb1716a91e01503fb4703c7d2f2099c089c9017
the image has RGB channels and, taking pixels by rows first rather than columns, leads to:
(There is also an Alpha channel, with all values set to 0xff.)
Taking groups of 8 bytes and then the least significant bits in reverse order gives us (for example "ff 01 00 ff 01 00 fe 01" -> "10011011" -> 0x9b):
This is a file size stored in a DWORD (0x1e09b) followed by the second PNG image.
Using BGRA and columns first, this decodes to:
 which contains a .NET resource "biGzxmYEphCl":
which when XORed with "4c 00 6b 00 74 00 79 00 54 00 65 00 66 00 65 00" ("LktyTefe" in Unicode):
gives the payload, which in this case is Remcos RAT.
In this packer, the .NET executable contains typically several hundred small images in .NET resources, which each contain a part of the payload and need to be reassembled in the correct order.
Earlier versions used the BMP file format, and later versions have switched to using PNG.
The name we have given to this packer comes from "hecto-" from the metric system prefix for a hundred.
 Figure 4: .NET resources list (from ILSpy)
For example, in sample SHA256 – 0091c6bdceecf3e0143b4eaaefca1cd56cbfdfc55f99c167f9dd1f3a48928bb5:  Figure 5: First image taken from sample SHA256: 0091c6bdceecf3e0143b4eaaefca1cd56cbfdfc55f99c167f9dd1f3a48928bb5
which contains 135 images, the first image decodes, using Green, Red and Blue channels, rows first, to:
This includes the start of a Windows executable.
The size of the chunk extracted from each image is stored in the first four bytes (DWORD), 0x30d in this case, less 15, and the required chunk of data starts at the 6th byte.
The chunks need to be assembled in numerical order of the resource names, which is different from the alphabetical order they appear in the file which is:
and the order they are referenced in the .NET metadata which is:
  The reassembled payload in this case is Loki Bot Stealer.
In the following sample, SHA256 – 09c8cbd9cdfda1fcb7c6a051887213dc3e3ccf00a5877eca3d3e374f077b98d5, the images are BMPs and the first one looks like:
 Figure 6: Image taken from sample SHA256: 09c8cbd9cdfda1fcb7c6a051887213dc3e3ccf00a5877eca3d3e374f077b98d5
The image decodes to the following, with chunk size highlighted in green, chunk data highlighted in yellow and blue:
In this case, when assembled from the images, the payload is compressed using zlib Deflate, starting at byte 0xb0, highlighted in blue.
which again is Agent Tesla in this case.
Generally, packers have different features that allow them to circumvent detection mechanisms by appearing as benign files, being difficult to reverse engineer, or incorporating sandbox evasion techniques.
In this blog we've looked at two packers which use embedded images to hide the payload, one using a single image and the other using hundreds of them.
These are just a few of the many tools threat actors have at their disposal to aid in distributing malware, collecting sensitive information, and gaining unauthorized access to systems.
CyaX PNG sample with channels BGRA
Agent Tesla payload in 026b38e8eb0e4f505dc5601246143e7e77bbd2630b91df50622e7a14e0728675
CyaX PNG sample with gzipped data
Agent Tesla payload in 083521fa4522245adc968b1b7dd18da29b193fd41572114c9d7dd927918234ea
CyaX PNG sample with double steganography
Remcos RAT payload in 04794ec7e7eb5c6611aada660fb1716a91e01503fb4703c7d2f2099c089c9017
Loki Bot payload in 0091c6bdceecf3e0143b4eaaefca1cd56cbfdfc55f99c167f9dd1f3a48928bb5
Agent Tesla payload in 09c8cbd9cdfda1fcb7c6a051887213dc3e3ccf00a5877eca3d3e374f077b98d5
De4dot  ILSpy  Agent Tesla: A day in a life of IR, Full description of an Agent Tesla campaign using CyaX packer (steganographic variant)
Subscribe to the Proofpoint Blog
Terms and conditions
Privacy Policy
Sitemap
