We’re often asked, “what does Cobalt Strike do?” In simple terms, Cobalt Strike is a post-exploitation framework for adversary simulations and Red Teaming to help measure your security operations program and incident response capabilities.
Cobalt Strike provides a post-exploitation agent, Beacon, and covert channels to emulate a quiet long-term embedded actor in a network.
If we as security testers and red teamers continue to test in the same ways during each engagement, our audience (i.e., the defensive side) will not get much value out of the exercises.
It’s important to be nimble.
Cobalt Strike provides substantial flexibility for users to change their behavior and adapt just as an adversary does.
For example, Malleable C2 is a Command and Control language that lets you modify memory and network indicators to control how Beacon looks and feels on a network.
Cobalt Strike was designed to be multiplayer.
One of its foundational features is its ability to support for multiple users to access multiple servers and share sessions.
Enabling participation from users with different styles and skillsets further varies behavior to enrich engagements.
While there are also numerous built-in capabilities, one of which we’ll discuss below, they are limited to what the team adds to the tool.
One of our favorite features of Cobalt Strike is its user developed modules, through which many of the built-in limits are overcome.
In fact, users are encouraged to extend its capabilities with complementary tools and scripts to tailor the engagements to best meet the organization’s needs.
We wanted to highlight a few ways we’ve recently seen Cobalt Strike users doing just that to conduct effective assessments.
Contrary to many perceptions, Cobalt Strike is actually not a penetration testing tool.
As we mentioned earlier, we identify as a tool for post-exploitation adversary simulations and Red Team operations.
However, we have recently begun offering interoperability with Core Impact, which is a penetration testing tool with features that align well with those of Cobalt Strike.
Core Impact is typically used for exploitation and lateral movement and validating the attack paths often associated with a penetration test.
Used by both in-house teams as well as third-party services, Core Impact offers capabilities for remote, local, and client-side exploitation.
Impact also uses post-exploitation agents, which, while they don’t have a cool name like “Beacon,” are versatile in both their deployment and capabilities, including chaining and pivoting.
While a previous blog dives deeper into the particulars, to quickly summarize, the interoperability piece comes in the form of session passing between both platforms.
Those with both tools can deploy Beacon from within Core Impact.
Additionally, users can spawn an Impact agent from within Cobalt Strike.
If you have Cobalt Strike and would like to learn more, we recommend requesting a trial of Core Impact to try it out.
RedELK is an open-source tool that has been described by its creators as a “Red Team’s SIEM.” This highly usable tool tracks and sends Red Teams alerts about the activities of a Blue Team by creating a centralized hub for all traffic logs from redirectors to be sent and enriched.
Gaining visibility into the Blue Team’s movements enables Red Teams to make judicious choices about their next steps.
These insights help Red Teams create a better learning experience and ensure Blue Teams get the most out of their engagements.
Additionally, it also centralizes and enriches all operational logs from teamservers in order to provide a searchable history of the operation, which could be particularly helpful for longer and larger engagements.
This all sounds like an ideal integration for Cobalt Strike users, right?
While the sub-header is a fairly large spoiler, it is nonetheless very exciting that RedELK does fully support the Cobalt Strike framework.
We can’t say enough good things about the user community.
So many of you have written first-rate tools and scripts that have further escalated the power of Cobalt Strike—we feel like an artist’s muse and the art the community creates is amazing.
However, many of these extensions are tricky to find, so not everyone has had the opportunity to take advantage and learn from them.
In order to highlight all of this hard work, we’ve created the Community Kit.
This central repository showcases projects from the user community to ensure that they’re more easily discovered by fellow  security professionals.
We encourage you to check it out to see the fantastic work of your peers which can help take raise the level of your next security engagement and may even inspire you to create and submit your own.
Check back regularly as new submissions are coming in frequently.
Cobalt Strike was intentionally built as an adaptable framework so that users could continually change their behavior in an engagement.
However, this flexibility has also enabled both expected and unexpected growth of the tool itself.
Planned additions like the interoperability with Core Impact allows users to benefit from session passing, while unanticipated extensions like those in the community kit are equally welcome, as they enable users to truly make the tool their own.
Ultimately, we’re excited to see such dedication to this tool from all angles, as it motivates us all to keep advancing Cobalt Strike to the next level so users can keep increasing the value of every engagement.
Get information on other ways Core Impact and Cobalt Strike complement one another for comprehensive infrastructure protection.
Following the 4.4 release, you may have noticed a warning message when starting your teamserver:
The missing file is optional and its absence does not break the teamserver.
It contains a number of optional parameters that can be used to customize the settings used to validate screenshot and keylog callback data, which allows you to tweak the fix for the “HotCobalt” vulnerability.
You can suppress the warning by creating an empty file called TeamServer.prop and saving it in your Cobalt Strike directory.
An example TeamServer.prop file can be downloaded from the Cobalt-Strike/TeamServerProp GitHub repository here.
We recommend that either an empty “TeamServer.prop” file is created, the file is created but the default settings are used, or the warning is simply ignored.
If, however, you want to make changes to those settings, you’re now able to do so.
The default TeamServer.prop file contains the following:
Cobalt Strike is a post-exploitation framework designed to be extended and customized by the user community.
Several excellent tools and scripts have been written and published, but they can be challenging to locate.
Community Kit is a central repository of extensions written by the user community to extend the capabilities of Cobalt Strike.
The Cobalt Strike team acts as the curator and provides this kit to showcase this fantastic work.
Initially, the kit will be a maintained list of community created projects hosted on GitHub.
It will highlight projects updated in the last 30 days and uses GitHub stars as an optional popularity ranking.
The community kit is hosted on the Cobalt Strike GitHub account
I want to thank the security community for creating great projects.
Keep up the good work!
The links in this resource point to public resources.
Review the source code and compile binaries yourself.
These links are being provided as a convenience and for informational purposes only; they do not constitute an endorsement or an approval by HelpSystems of any of the products, services or opinions of the corporation or organization or individual.
HelpSystems bears no responsibility for the accuracy, legality or content of the external site or for that of subsequent links.
Contact the external site owner for answers to questions regarding its content.
Cobalt Strike 4.4 is now available.
This release puts more control into your hands, improves Cobalt Strike’s evasive qualities and addresses a number of smaller changes requested by our users… and yes!
We’ve added a reconnect button!
Cobalt Strike has a lot of flexibility in its Reflective Loading foundation but it does have limitations.
We’ve seen a lot of community interest in this area, so we’ve made changes to allow you to completely bypass that and define your own Reflective Loading process instead.
The default Reflective Loader will still be available to use at any time.
We’ve extended the changes that were initially made to the Reflective Loader in the 4.2 release to give you an Aggressor Script hook that allows you to specify your own Reflective Loader and completely redefine how Beacon is loaded into memory.
An Aggressor Script API has been provided to facilitate this process.
This is a huge change and we plan to follow up with a separate blog post to go into more detail on this feature.
For now, you can find more information here.
The User Defined Reflective Loader kit can be downloaded from the Cobalt Strike arsenal.
When Beacon starts, it resolves metadata to send back to Cobalt Strike.
Previously, Beacon stuck out like a sore thumb in mature environments since the method used to resolve this metadata triggered Sysmon event 22 (DNS Query) and had become a way to reliably fingerprint Beacon every time it runs.
The 4.4 release modifies how this metadata is resolved so that this no longer happens.
The sleep_mask is Cobalt Strike’s ability to mask and unmask itself in memory.
The goal of this feature is to push memory detections away from content-based signatures.
Although sleep_mask can encode Beacon’s data and code (if the agent is in RWX memory), the static stub is still a target for in-memory hunting based on content.
To combat this, we have made the sleep_mask stub user-definable via a kit that can be downloaded from the Cobalt Strike arsenal.
Full details on this feature and how to use it can be found here and like the Reflective Loader changes, we plan to go into full detail in a separate blog post.
Hands down, the single most requested change on the Cobalt Strike backlog is the addition of a reconnect button.
You asked (and asked, and asked!)
and we listened – but we didn’t just give you a reconnect button.
If your Cobalt Strike client detects that a teamserver has been disconnected, it will attempt to reconnect automatically.
The automatic reconnect attempts will repeat until either the connection has been re-established, or you choose to stop the process.
If disconnection is user-initiated from the menu, toolbar, or switchbar server button, a reconnect button appears and this allows you to manually reconnect to the teamserver.
We love to hear from our users – both feedback on what’s working, and requests to change things that aren’t.
In addition to the reconnect button, we’ve made a few changes in this release to specifically address items raised by you.
A lot of users wanted us to add a way to persist aliases specified when renaming teamservers on the server switchbar in the main Cobalt Strike UI, so we have changed the New Connection dialog to facilitate this.
When adding a new connection, you can now specify an alias for that teamserver.
The alias is what you’ll see on the switchbar in the main Cobalt Strike UI.
Likewise, if you rename a teamserver on the switchbar, this will update the alias for that connection.
This change will be reflected in the New Connection dialog.
You have the option to switch between the alias and connection view on the New Connection dialog.
Another change requested by our users was to add a way to view the Malleable C2 profile in use by your teamserver(s) in the Cobalt Strike UI.
This new option can be found in the help menu (Help -> Malleable C2 Profile).
One final feature request to mention is that we’ve updated c2lint to return a result code upon completion, which can be parsed when scripting.
The return codes are:

0 if c2lint completes with no errors
1 if c2lint completes with warnings
2 if c2lint completes with errors
3 if c2lint completes with both warnings and errors

The number of detected errors and warnings are also displayed if any are found.
A denial of service (DoS) vulnerability (CVE-2021-36798) was found in Cobalt Strike.
The vulnerability was fixed in the scope of the 4.4 release.
More information can be found here.
The failover host rotation strategy that was added in the 4.3 release has been improved to parse the content of the response as well as the return code before deciding whether failover needs to be actioned.
This change makes the strategy much more reliable.
One final change to mention is the addition of an allow_useragents option to the http-config block in the Malleable C2 profile, to complement the block_useragents option that was added in the 4.3 release.
This new option allows you to have better control over which user agents to respond to.
Note that the settings are exclusive.
You cannot specify values for both allow_useragents and block_useragents in the same Malleable C2 profile.
To see a full list of what’s new in Cobalt Strike 4.4, please check out the release notes.
Licensed users can run the update program to get the latest version.
To purchase Cobalt Strike or ask about evaluation options, please contact us for more information.
SentinelOne discovered a denial of service (DoS) vulnerability in Cobalt Strike.
The bug (aka Hotcobalt) can cause a denial of service on a teamserver by using a fake beacon sending abnormally large screenshots.
This bug has been fixed in Cobalt Strike 4.4
Consider mitigating this risk to a teamserver by hardening your C2 infrastructure.
Thank you, SentinelOne working with us and responsibly disclosing this bug.
You can now update Mimikatz between Cobalt Strike releases.
Updates will periodically be made available to licensed users via the Arsenal as the Mimikatz Kit.
Using a mimikatz command will show output in the Script Console indicating a custom version is being used.
In part 2, I ‘ll explore the latest version and how it uses an “undocumented” feature to solve the challenges discussed in this post.
CredBandit uses an unconventional way of transferring in memory data through Beacon by overloading the BEACON_OUTPUT aggressor function to handle data sent from BeaconPrintf() function.
There are other interesting aspects to this project, namely:
Although the focus on this post is to highlight an interesting way to bend Cobalt Strike to a user’s will, it does cover a credential dumping technique.
Understanding detection opportunities of techniques vs. tools is an important concept in security operations.
It can be helpful to highlight both the offense capabilities and defense opportunities of a technique.
I’ve invited Jonny Johnson (https://twitter.com/jsecurity101) to add context to the detection story of this technique, seen below in the Detection Opportunities section.
Warning: BOFs run in Beacon’s memory.
If they crash, Beacon crashes.
The stability of this BOF may not be 100% reliable.
It’s something to consider if you choose to use this or any other BOF.
CredBandit is easy to use, but don’t that fool you into thinking it isn’t a clever approach to creating a minidump.
All the hard work has been done, and you only need a few commands to use it.
The basic process is as follows:
Consult the readme for details.
Interact with a beacon running with the permissions needed to dump LSASS memory and get the PID of LSASS.
An output of PS gives us a PID of 656.
Loading the MiniDumpWriteDump.cna aggressor script added the command credBandit to Beacon.
Running help shows we only need the PID of LSASS to use the command credBandit.
Beacon may appear to be unresponsive, but it is processing the minidump and sending back chunks of data by hijacking the BeaconPrintf function.
In this example, over 80mb in data must be transferred.
Once the Dump is complete, Beacon should return to normal.
A word of caution: I had a few Beacons die after the process completed.
The data was successfully transferred, but the Beacon process died.
This could be due to the BOF being functional but missing error handling, but I did not investigate.
NOTE: The CredBandit aggressor script, MiniDumpWriteDump.cna, changed the behavior of BEACON_OUTPUT.
This can cause other functions to fail.
You should unload the script and restart the Cobalt Strike client or use RevertMiniDumpWriteDump.cna to reverse the changes.
The file dumpFile.txt is created in the cobaltstrike directory.
This file is the result generated by  “highjacking” the BEACON_OUTPUT function to write the received chunks of data from the BeaconPrintf function.
Run the cleanupMiniDump.sh command to convert this file back into something useful:
You will now have two new files in the cobaltstrike directory: .dmp and .txt.
The .txt is a backup of the original dumpFile.txt.
The .dmp is the minidump file of LSASS.
At this point, we are done with CredBandit.
It provided the dump of LSASS.
We can now use Mimikatz offline to extract information.
You can use something like the following commands:
Here is a quick demo of the tool.
Direct syscalls can provide a way of avoiding API hooking from security tools by avoiding the need for calling these APIs.
CredBandit uses much of work done by Outflank on using Syscall in Beacon Object Files.
I won’t spend time on this but here are great resources:
The minidump output is stored in Beacon’s memory vs. being written to disk.
This is based on using a minidump implementation that uses NTFS transactions to write to memory: https://github.com/PorLaCola25/TransactedSharpMiniDump
MiniDumpWriteDump API is replaced with an adaptation of ReactOS’s implementation of MiniDumpWriteDump: https://github.com/rookuu/BOFs/tree/main/MiniDumpWriteDump
This is what I find most interesting about this project.
In short, the BEACON_OUTPUT aggressor function is used to send the base64 encode dump it receives as chunks from BeaconPrintf.
These chunks are written to a file that can be cleaned up and decoded.
How does this hack work?
The BOF uses the BeaconPrintf function to send chunks of the base64 encoded minidump file to the teamserver.
This data is captured and written to a file on disk.
The following is an example of the output file:
This minidump file is rebuilt using the script cleanupMiniDump.sh.
Credential material can be extracted using Mimikatz.
The heart of this technique is based on accessing and dumping LSASS.
Instead of using the suspicious activity of payload.exe accessing lsass.exe, you could find a process that regularly accesses LSASS, inject into that process, and perform your dump.
The BOF (https://github.com/outflanknl/FindObjects-BOF) may help you locate a process that has a handle to lsass.exe using similar OPSEC as CredBandit by using a BOF and direct systems calls.
FindObjects-BOF is “A Cobalt Strike Beacon Object File (BOF) project which uses direct system calls to enumerate processes for specific modules or process handles.”
Although the focus on this post was to highlight an interesting way to bend Cobalt Strike to a user’s will, it does cover a credential dumping technique.
Understanding detection opportunities of techniques vs. tools is an important concept in detection engineering.
I’ve invited Jonny Johnson (https://twitter.com/jsecurity101) to provide context to the detection story of this technique.
Jonny’s detection note are in the left column, and I hae added my take in the right.
Sysmon Event ID 10 fires when OpenProcess is called, and because Sysmon is a kernel driver, it has insight into OpenProcess in both user-mode and kernel-mode.
This particular implementation uses a syscall for NtOpenProcess within ntdll.dll, which is the Native API version of the Win32 API OpenProcess.
Within the NtOpenProcess documentation, there is a parameter called DesiredAccess.This correlates to the ACCESS_MASK type, which is a bitmask.
This access is typically defined by the function that wants to obtain a handle to a process.
OpenProcess acts as a middle man between the function call and the target process.
The function in this instance is MiniDumpWriteDump.
Although ReactOS’s implementation of MiniDumpWriteDump is being used, we are still dealing with Windows securable objects (e.g.
Due to this, we must follow Windows built-in rules for these objects.
Also, ReactOS’s MiniDumpWriteDump is using the exact same parameters as Microsoft’s MiniDumpWriteDump API.
“ReactOS’s MiniDumpWriteDump is using the exact same parameters as Microsoft’s MiniDumpWriteDump API.” It is important to focus on the technique’s primitives.
There can be multiple implementations by different tools but the technique can often be broken down in to primitives.
Within Microsoft’s documentation, we can see that if MiniDumpWriteDump wants to obtain a handle to a process, it must have PROCESS_QUERY_IMFORMATION & PROCESS_VM_READ access to that process, which we can see is requested in the CredBandit source code below:
Next, we want to see the file created via NtCreateTransacted.
Sysmon uses a minifilter driver to monitor file system’s stacks indirectly, so it has insight into files being written to disk or a phantom file.
One thing we have to be careful with is that we don’t know the extension the actor might have for the dump file.
Bottom line: this is attacker-controlled and if we specify this into our analytic we risk creating a blind spot, which can lead to an analytical bypass.
Lastly, a little icing on the cake would be to add a process creation event to this analytic as it would just provide context around which user was leveraged for this activity.
The following analytics are not meant to be copy and paste, but more of the beginning of detection for your environment.
If you only look for the access rights 0x1410, then you will create a blind spot if an actor uses ReadProcessMemory to dump LSASS.
Ideally, multiple detections would be made for dumping LSASS so that blind spots could be covered along the way.
Multiple combinations of access rights may be requested based on the implementation.
Focus on a query to cover minimal rights needed.
This will reduce blind spots based on a specific implementation.
Notice that payload.exe is accessing lsass.exe.
This is due to this implementation as a BOF running directly under the context of Beacon.
BOF and syscalls can be great, but maintain OPSEC awareness.
When writing a detection the first thing I do is identify the capabilities that a tool and/or technique has.
This helps me narrow in on a scope.
A piece of code could be implementing 3-4 techniques.
When this happens, I separate these techniques and look into them separately.
This allows me to create a detection strategy per capability.
When the capability is identified and the components being used are highlighted, proper scoping can be applied.
We can see a commonality between this implementation and many others.
That commonality is MiniDumpWriteDump and the access rights needed for that function call.
This is the foundation of our detection or base condition.
However, this could be evaded if an actor uses ReadProcessMemory because there are a different set of minimum access rights needed.
A separate detection would need to be created for this function.
This is ideal as it applies an overlap of our detection to cover the blind spots that are related to a technique.
Pulling attributes like file creation and process creation are contextual attributes that can be applied back to the core detection (MiniDump).
The detection shouldn’t rely on these attributes because they are not guaranteed to be present.
Cobalt Strike is not inherently malicious.
It is simply a way for someone to implement an action.
The intent behind that action is what determines a classification of malicious or benign.
Consequently, I don’t focus on Cobalt Strike specific signatures, I look at the behavior/technique being implemented.
Thanks to https://twitter.com/anthemtotheego  for creating this tool.
Stay tuned for part 2 where I ‘ll talk about how the latest version uses an “undocumented” feature to download the minidump file instead of hijacking the BEACON_OUTPUT function.
This post highlighted the need to ‘hack’ Cobalt Strike because of a lack of features.
Why isn’t this part of the toolset?
Cobalt Strike is a framework.
It is meant to be tuned to fit a user’s need.
Projects like this help expose areas that can be improved.
This helps the team add new features, update documentation, or provide examples.
The Cobalt Strike references (malleable c2 profiles, scripts, Elevate Kit, etc.)
have been consolidated under a new GitHub account.
We understand that many blog posts (and even our documentation) have references to the original links.
The original links will be available for the time being but may not be in the future.
Update your references to use the new repositories.
All future updates will be made under the new account.
This short post is a follow up to the post “Manage Cobalt Strike with Services” where I described a method to automate Cobalt Strike teamservers by creating services.
In this post, I will take a closer look at the aggressor function that is used to create listeners listener_create_ext to expanded on the documentation and provide an example.
The documentation shows three arguments.
Let’s focus on $3, the key/value pairs.
The key/values control the settings used to setup a listener.
Let’s break down the options with an aggressor script that creates an HTTP listener.
I formatted the script to be easier to read and added comments to provide a bit of guidance.
This aggressor script will create a listener that looks like this in the GUI.
This post is part of a “Quality of Life” series, where tips and tricks will be shared to make using Cobalt Stike easier.
Cobalt Strike is a post-exploitation framework and requires customization to meet your specific needs.
This flexibility is one of the most powerful features of Cobalt Strike.
While this is great, some may find it challenging to quickly set up a teamserver.
Even if you are only conducting quick tests, consider building an automated deployment process using something as simple as a bash script or something more complex like a DevOps process based on tools like Ansible or Terraform.
This post covers the aspect of considering adding to a deployment process to enhance teamserver automation.
It does not cover complete infrastructure design.
Several people in the security community have posted excellent design guidance.
This post explores the automation of:
This process needs three files:
These templates can be found here: https://github.com/vestjoe/cobaltstrike_services
I’ll summarize the steps here, but you should integrate these steps into an infrastructure deployment plan in actual practice.
I demo the results of a practical example at the end of the post.
Note: These scripts have been tested on Ubuntu server and may need to be adjusted based on your actual use case.
Note: The following steps show the details, but should broken down into deployment steps (ansible, terraform, etc.)
that fit your own process.
This file is used to configure teamserver as a Linux service.
Use the template below as a starting point.
Update the settings to match your environment and save it to a temporary location.
(I’m using /tmp for this demo)
The malleable c2 profile can be any you create.
I like to use randomly generated profiles for quick tests.
The listener service uses agscript to run a headless aggressor script as a service.
If you are not familiar with agscript, take a look at “Headless Cobalt Strike” in the manual https://www.cobaltstrike.com/aggressor-script/index.html
Use the template below as a starting point.
Update the settings to match your environment and save them to a temporary location.
(I’m using /tmp for this demo)
This example aggressor script is used to create and start an HTTP, HTTPS, and SMB listener with all the needed parameters.
It is a regular aggressor script and can be loaded manually through the Cobalt Strike client or run headless using agscript.
Use the template below as a starting point.
Update the settings to match your environment and save them to a temporary location.
(I’m using /tmp for this demo)
The script uses the listener_create_ext function.
Take a look at the support documentation for additional options.
At a minimum, change the following to match your environment.
Teamserver should be running, and the script should have created the listeners.
If so, test a few payloads and commands to make sure everything works as expected.
These manual steps and templates provide a means to automate some of the Cobalt Strike but can be enhanced further through a more formal process.
For example, I do this in a couple of ways:
In this demo, I show how I fully automate the deployment and configuration of the range I used for quick realistic testing to AWS LightSail.
The deployment is fully automated and includes settings to protect the teamserver from direct public access.
The script results in a small test range that follows this traffic pattern
The agscript user logon event (listener_service) can be seen in the Event Log.
The listeners are automatically created based on the service settings.
© 2012-2021 Strategic Cyber LLC, a HelpSystems company | Corporate Compliance & Ethics | Privacy Policy | Security Hall of Fame | Blog
