Making the world safer and more secure
Authors: Nikolaos Pantazopoulos, Stefano Antenucci (@Antelox), Michael Sandee and in close collaboration with NCC’s RIFT.
About the Research and Intelligence Fusion Team (RIFT):RIFT leverages our strategic analysis, data science, and threat hunting capabilities to create actionable threat intelligence, ranging from IOCs and detection capabilities to strategic reports on tomorrow’s threat landscape.
Cyber security is an arms race where both attackers and defenders continually update and improve their tools and ways of working.
To ensure that our managed services remain effective against the latest threats, NCC Group operates a Global Fusion Center with Fox-IT at its core.
This multidisciplinary team converts our leading cyber threat intelligence into powerful detection strategies.
WastedLocker is a new ransomware locker we’ve detected being used since May 2020.
We believe it has been in development for a number of months prior to this and was started in conjunction with a number of other changes we have seen originate from the Evil Corp group in 2020.
Evil Corp were previously associated to the Dridex malware and BitPaymer ransomware, the latter came to prominence in the first half of 2017.
Recently Evil Corp has changed a number of TTPs related to their operations further described in this article.
We believe those changes were ultimately caused by the unsealing of indictments against Igor Olegovich Turashev and Maksim Viktorovich Yakubets, and the financial sanctions against Evil Corp in December 2019.
These legal events set in motion a chain of events to disconnect the association of the current Evil Corp group and these two specific indicted individuals and the historic actions of Evil Corp.
We have tracked the activities of the Evil Corp group for many years, and even though the group has changed its composition since 2011, we have been able to keep track of the group’s activities under this name.
Business associations are fairly fluid in organised cybercrime groups, Partnerships and affiliations are formed and dissolved much more frequently than in nation state sponsored groups, for example.
Nation state backed groups often remain operational in similar form over longer periods of time.
For this reason, cyber threat intelligence reporting can be misleading, given the difficulty of maintaining assessments of the capabilities of cybercriminal groups which are accurate and current.
As an example, the Anunak group (also known as FIN7 and Carbanak) has changed composition quite frequently.
As a result, the public reporting on FIN7 and Carbanak and their various associations in various open and closed source threat feeds can distort the current reality.
The Anunak or FIN7 group has worked closely with Evil Corp, and also with the group publicly referred to as TA505.
Hence, TA505 activity is sometimes still reported as Evil Corp activity, even though these groups have not worked together since the second half of 2017.
Similarly, it is easy for confusion to arise around the many financially oriented organised crime groups which are tracked publicly.
Access to victim organisations is traded as a commodity between criminal actors and so business links often exist which are not necessarily related to the day to day operations of a group.
Nevertheless, despite these difficulties, we feel that we can assert the following with high confidence, due to our in depth tracking of this group as it posed a significant threat to our clients.
Evil Corp has been operating the Dridex malware since July 2014 and provided access to several groups and individual threat actors.
However, towards the end of 2017 Evil Corp became smaller and used Dridex infections almost exclusively for targeted ransomware campaigns by deploying BitPaymer.
The majority of victims were in North America (mainly USA) with a smaller number in Western Europe and instances outside of these regions being just scattered, individual cases.
During 2018, Evil Corp had a short lived partnership with TheTrick group; specifically, leasing out access to BitPaymer for a while, prior to their use of Ryuk.
In 2019 a fork of BitPaymer usually referred to as DoppelPaymer appeared, although this was ransomware as a service and thus was not the same business model.
We have observed some cooperation between the two groups, but as yet can draw no definitive conclusions as to the current relationship between these two threat actor groups.
After the unsealing of indictments by the US Department of Justice and actions against Evil Corp as group by the US Treasury Department, we detected a short period of inactivity from Evil Corp until January 2020.
However, since January 2020 activity has resumed as usual, with victims appearing in the same regions as before.
It is possible, however, that this was primarily a strategic move to suggest to the public that Evil Corp was still active as, from around the middle of March 2020, we failed to observe much activity from them in terms of BitPaymer deployments.
Of course, this period coincided with the lockdowns due to the COVID19 pandemic.
The development of new malware takes time and it is probable that they had already started the development of new techniques and malware.
Early indications that this work was underway included the use of a variant of Gozi we refer to as Gozi ISFB 2 variant.
It is thought that this variant is intended as a replacement for Dridex botnet 501 as one of the persistent components on a target network.
Similarly, a customized version of the CobaltStrike loader has been observed, possibly intended as a replacement for the Empire PowerShell framework previously used.
The group has access to highly skilled exploit and software developers capable of bypassing network defences on all different levels.
The group seems to put a lot of effort into bypassing endpoint protection products; this observation is based on the fact that when a certain version of their malware is detected on victim networks the group is back with an undetected version and able to continue after just a short time.
This shows the importance of victims fully understanding each incident that happens.
That is, detection or blocking of a single element from the more advanced criminal actors does not mean they have been defeated.
It appears the group regularly finds innovative but practical approaches to bypass detection in victim networks based on their practical experience gained throughout the years.
They also demonstrate patience and persistence.
In one case, they successfully compromised a target over 6 months after their initial failure to obtain privileged access.
They also display attention to detail by, for example, ensuring that they obtain the passwords to disable security tools on a network prior to deploying the ransomware.
The new WastedLocker ransomware appeared in May 2020 (a technical description is included below).
The ransomware name is derived from the filename it creates which includes an abbreviation of the victim’s name and the string ‘wasted’.
The abbreviation of the victim’s name was also seen in BitPaymer, although a larger portion of the organisation name was used in BitPaymer and individual letters were sometimes replaced by similar looking numbers.
Technically, WastedLocker does not have much in common with BitPaymer, apart from the fact that it appears that victim specific elements are added using a specific builder rather than at compile time, which is similar to BitPaymer.
Some similarities were also noted in the ransom note generated by the two pieces of malware.
The first WastedLocker example we found contained the victim name as in BitPaymer ransom notes and also included both a protonmail.com and tutanota.com email address.
Later versions also contained other Protonmail and Tutanota email domains, as well as Eclipso and Airmail email addresses.
Interestingly the user parts of the email addresses listed in the ransom messages are numeric (usually 5 digit numbers) which is similar to the 6 to 12 digit numbers seen used by BitPaymer in 2018.
Evil Corp are selective in terms of the infrastructure they target when deploying their ransomware.
Typically, they hit file servers, database services, virtual machines and cloud environments.
Of course, these choices will also be heavily influenced by what we may term their ‘business model’ – which also means they should be able to disable or disrupt backup applications and related infrastructure.
This increases the time for recovery for the victim, or in some cases due to unavailability of offline or offsite backups, prevents the ability to recover at all.
It is interesting that the group has not appeared to have engaged in extensive information stealing or threatened to publish information about victims in the way that the DoppelPaymer and many other targeted ransomware operations have.
We assess that the probable reason for not leaking victim information is the unwanted attention this would draw from law enforcement and the public.
While many things have changed in the TTPs of Evil Corp recently, one very notable element has not changed, the distribution via the SocGholish fake update framework.
This framework is still in use although it is now used to directly distribute a custom CobaltStrike loader, described in 4.1, rather than Dridex as in the past years.
One of the more notable features of this framework is the evaluation of wether a compromised victim system is part of a larger network, as a sole enduser system is of no use to the attackers.
The SocGholish JavaScript bot has access to information from the system itself as it runs under the privileges of the browser user.
The bot collects a large set of information and sends that to the SocGholish server side which, in turn, returns a payload to the victim system.
Other methods of distribution also appear to still be in use, but we have not been able to independently verify this at the time of writing.
The CobaltStrike payloads are embedded inside two types of PowerShell scripts.
The first type (which targets Windows 64-bit only) decodes a base64 payload twice and then decrypts it using the AES algorithm in CBC mode.
The AES key is derived by computing the SHA256 hash of the hard-coded string ‘saN9s9pNlD5nJ2EyEd4rPym68griTOMT’ and the initialisation vector (IV), is derived from the first 16 bytes of the twice base64-decoded payload.
The script converts the decrypted payload (a base64-encoded string) to bytes and allocates memory before executing it.
The second type is relatively simpler and includes two embedded base64-encoded payloads, an injector and a loader for the CobaltStrike payload.
It appears that both the injector and the loader are part of the ‘Donut’ project [3].
An interesting behaviour can be spotted in the CobaltStrike payloads that are delivered from the second type of PowerShell scripts.
In these, the loader has been modified with the purpose of detecting CrowdStrike software (Figure 1).
If the C:\\Program Files\\CrowdStrike directory exists, then the ‘FreeConsole’ Windows API is called after loading the CobaltStrike payload.
Otherwise, the ‘FreeConsole’ function is called before loading the CobaltStrike beacon.
It is assumed that this is an attempt to bypass CrowdStrike’s endpoint solution, although it still unclear if this is the case.
WastedLocker is protected with a custom crypter, referred to as CryptOne by Fox-IT InTELL.
On examination, the code turned out to be very basic and used also by other malware families such as: Netwalker, Gozi ISFB v3, ZLoader and Smokeloader.
The crypter mainly contains junk code to increase entropy of the sample and hide the actual code.
We have found 2 crypter variants with some code differences, but mostly with the same logic applied.
The first action performed by the crypter code is to check some specific registry key.
In the variants analysed the registry key is either: interface\{b196b287-bab4-101a-b69c-00aa00341d07} or interface\{aa5b6a80-b834-11d0-932f-00a0c90dcaa9}.
These keys relate to the UCOMIEnumConnections Interface and the IActiveScriptParseProcedure32 interface respectively.
If the key is not detected, the crypter will enter an infinite loop or exit, thus it is used as an anti-analysis technique.
In the next step the crypter allocates a memory buffer calling the VirtualAlloc API.
A while loop is used to join a series of data blobs into the allocated buffer, and the contents of this buffer are then decrypted with an XOR based algorithm.
Once decrypted, the crypter jumps into the data blob which turns out to be a shellcode responsible for decrypting the actual payload.
The shellcode copies the encrypted payload into another buffer allocated by calling the VirtualAlloc API, and then decrypts this with an XOR based algorithm in a similar way to that described above.
To execute the payload, the shellcode replaces the crypter’s code in memory with the code of the payload just decrypted, and jumps to its entry point.
As noted above, we have observed this crypter being used by other malware families as well.
Related information and IOCs can be found in the Appendix.
WastedLocker aims to encrypt the files of the infected host.
However before the encryption procedure runs, WastedLocker performs a few other tasks to ensure the ransomware will run properly.
First, Wastedlocker decrypts the strings which are stored in the .bss section and then calculates a DWORD value that is used later for locating decrypted strings that are related to the encryption process.
This is described in more detail in the String encryption section.
In addition, the ransomware creates a log file lck.log and then sets an exception handler that creates a crash dump file in the Windows temporary folder with the filename being the ransomware’s binary filename.
If the ransomware is not executed with administrator rights or if the infected host runs Windows Vista or later, it will attempt to elevate its privileges.
In short, WastedLocker uses a well-documented UAC bypass method [1] [2].
It chooses a random file (EXE/DLL) from the Windows system32 folder and copies it to the %APPDATA% location under a different hidden filename.
Next, it creates an alternate data stream (ADS) into the file named bin and copies the ransomware into it.
WastedLocker then copies winsat.exe and winmm.dll into a newly created folder located in the Windows temporary folder.
Once loaded, the hijacked DLL (winmm.dll) is patched to execute the aforementioned ADS.
The ransomware supports the following command line parameters (Table 1):
It is also worth noting that in case of any failure from the first two parameters (-r and –s), the ransomware proceeds with the encryption but applies the following registry modifications in the registry key Software\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap:
 The above modifications apply to both 32-bit and 64-bit systems and is possibly done to ensure that the ransomware can access remote drives.
However, a bug is included in the architecture identification code.
The ransomware authors use a well-known method to identify the operating system architecture.
The ransomware reads the memory address 0x7FFE0300 (KUSER_SHARED_DATA) and checks if the pointer is zero.
If it is then the 32-bit process of the ransomware is running in a Windows 64-bit host (Figure 2).
The issue is that this does not work on Windows 10 systems.
Additionally, WastedLocker chooses a random name from a generated name list in order to generate filename or service names.
The ransomware creates this list by reading the registry keys stored in HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control and then separates their names whenever a capital letter is found.
For example, the registry key AppReadiness will be separated to two words, App and Readiness.
The strings pertaining to the ransomware are encrypted and stored in the .bss section of the binary file.
This includes the ransom note along with other important information necessary for the ransomware’s tasks.
The strings are decrypted using a key that combined the size and raw address of the .bss section, as well as the ransomware’s compilation timestamp.
The code’s authors use an interesting method to locate the encrypted strings related to the encryption process.
To locate one of them, the ransomware calculates a checksum that is looked up in the encrypted strings table.
The checksum is derived from both a constant value that is unique to each string and a fixed value, which are bitwise XORed.
The encrypted strings table consists of a struct like shown below for each string.
The encryption process is quite straightforward.
The ransomware targets the following drive types:
Instead of including a list of extension targets, WastedLocker includes a list of directories and extensions to exclude from the encryption process.
Files with a size less than 10 bytes are also ignored and in case of a large file, the ransomware encrypts them in blocks of 64MB.
Once a drive is found, the ransomware starts searching for and encrypting files.
Each file is encrypted using the AES algorithm with a newly generated AES key and IV (256-bit in CBC mode) for each file.
The AES key and IV are encrypted with an embedded public RSA key (4096 bits).
The RSA encrypted output of key material is converted to base64 and then stored into the ransom note.
For each encrypted file, the ransomware creates an additional file that includes the ransomware note.
The encrypted file’s extension is set according to the targeted organisations name along with the prefix wasted (hence the name we have gave to this ransomware).
For example, test.txt.orgnamewasted (encrypted data) and test.txt.orgnamewasted_info (ransomware note).
The ransomware note and the list of excluded directories and extensions is available in the Appendix.
Finally, once the encryption of each file has been completed, the ransomware updates the log file with the following information:
During our analysis, we managed to identify a decrypter for WastedLocker.
The decrypter requires administrator privileges and similarl to the encryption process, it reports the number of files which were successfully decrypted (Figure 3).
Excluded extensions (in addition to orgnamewasted and orgnamewasted_info)
IoCs related to targeted ransomware attacks are a generally misunderstood concept in the case of targeted ransomware.
Each ransomware victim has a custom build configured or compiled for them and so the knowing the specific hashes used against historic victims does not provide any protection at all.
Even if behavioural patterns of the ransomware or network related indicators of the ransomware stage are given (should they exist), it is arguable whether detection of the attack at that stage would allow prevention of the actual attack.
We do include known ransomware hashes here; however, please note that these are for RESEARCH PURPOSES ONLY.
Blocking files based on these file attributes in any endpoint protection product will not provide any value.
At Fox-IT we focus mainly on detection of the initial stages of such attacks (such as the initial stage of infection) by detecting the various methods of infection delivery as well as the lateral movement stage which typically involves scanning, exploitation and/or credential dumping.
Providing these IoCs to the wider public would, however, be counterproductive as the threat actors would simply change these methods or work around the indicators.
However, we have included some of them to provide historical as well as current protection or detection against this particular threat, and provide a better understanding of this threat actor.
It is also hoped this information will help other organisations to conduct further research into this particular threat.
Custom CobaltStrike loader samples (sha256 hashes):
.NET injector (Donut) (sha256 hash):
Gozi ISFB v2This particular set contains C&C domains, bot version, Group ID, RSA key and Serpent encryption keys for 2 Gozi variants used for persistence in victim networks during 2020.
Gozi serpent network encryption keys:
The following IoCs are specifically related to the crypter used by Evil Corp, which we refer to as CryptOne.
Given that CryptOne is used by more malware families and variations than just those related to Evil Corp it is likely that CryptOne is a third party service.
List of metadata extracted from Gozi ISFB v3 samples
We have found a sample crypted by the CryptOne crypter as used by WastedLocker, which is capable of detecting/disabling a list of security software.
It is believed that this tool is used during ransomware deployment, but we have no specific evidence that it was used by Evil Corp.
However in the past we have seen execution of commands listed in the tool to disable Microsoft Windows Defender.


				View all posts by Stefano Antenucci
