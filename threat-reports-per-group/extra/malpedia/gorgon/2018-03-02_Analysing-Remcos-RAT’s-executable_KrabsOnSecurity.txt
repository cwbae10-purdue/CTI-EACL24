Remcos is a native RAT sold on the forums HackForums.net.
It is an interesting piece of RAT (and the only one that is developed in a native language other than Netwire) and is heavily used by malware actors.
Coded by the author, Viotto, it is self proclaimed to be a legal administration tool.
Whether that is true or not is to be understood by people who have seen Remcos malware campaigns and the fact that the author also sells a crypter.
First thing we notice when looking at Remcos RAT is that it uses C++ and the CRT quite heavily.
This leads to the output file being rather large (though still small by some standards) at 120kb.
Another interesting thing is that Remcos allows you to extract the license (which is most likely based on the HWID) of the individual who created the stub easily by executing the file with the -l switch.
If the sample is packed by a crypter that does not pass the command line parameter, you’ll have to unpack it first.
Static Mutex (compared across multiple bins), runtime detection and hooking as well as memory signature anyone?
Simple resource loading using kernel32 APIs
Fragments from usage of the public password recovery tools developed by NirSoft (/stext is a command line switch used to dump passwords to a text file, reference):
Public pasted runpe (almost identical to this, the only difference is that the Unicode API is used and the input buffer is not freed at the end).
Very simple (and runtime detected) keylogger using SetWindowsHookExA (13 is the constant for WH_KEYBOARD_LL)
Downloading file using URLDownloadToFileW and then dropping VBS file to replace old executable with new executable for updating:
Resolving some APIs (I am rather curious as to why these specific APIs are resolved dynamically when other suspicious APIs such as WriteProcessMemory and SetThreadContext are imported directly from the IAT0.
Downloading DLL to buffer, map a new memory page and then loading the DLL:
It also seem that the RAT is somewhat modular, DLLs are sent from the controller (or loaded from resource/.data) and functions from it are called.
The functions listed here are only found as strings in remcos samples, which confirms that the module is custom.
Overall, Remcos is not advanced nor extraordinary and a killer for it can be easily be developed when needed.
Despite being rather unsophiscated, it is still heavily used by cybercriminals to control infected devices and siphone money from those who are infected.
Sample hash: 46E4CFF5DD847E0A9AB26F2F92E89AE9E1BB14ED (file is available via VirusBay)
IDA Database File: Uploaded to GitHub
