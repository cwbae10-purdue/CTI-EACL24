A few months ago, I posted a diary to explain how to search for (malicious) PE files in Base64 data[1].
Base64 is indeed a common way to distribute binary content in an ASCII form.
There are plenty of scripts based on this technique.
On my Macbook, I'm using a small service created via Automator to automatically decode highlighted Base64 data and submit them to my Viper instance for further analysis:
But yesterday, I found, on pastebin.com[2], a malicious WScript file with a Base64 string that did not decode.
The script ended with an error "Invalid character in input stream”.
I had a quick look at the script and found indeed unexpected characters randomly spread in the Base64 data:
If you check in the VBScript code, you'll indeed see an instruction to replace those unexpected characters from the Base64 string:
When just replace the string by ‘0’ as stated in the script, you get back the malicious PE file:
The file is, of course, malicious as reported by VT[3].
Finally, a quick remark about the script itself: it uses the Windows registry to store the payload and execute it:
Nothing fancy here but attackers are always using small tricks to prevent (or better " to slow down") the automated analysis by security tools.
Search always for functions/tools that do search/replace operations in the analyzed code.
It can help to save your time.
[1] https://isc.sans.edu/forums/diary/Searching+for+Base64encoded+PE+Files/22199
[2] https://pastebin.com/EhG9ZQtH
[3] https://www.virustotal.com/en/file/0e6694d37b2a424402a41bbd520bec4bc416813fa744013ba1b3eab27378a291/analysis/
Xavier Mertens (@xme)
ISC Handler - Freelance Security Consultant
PGP Key
