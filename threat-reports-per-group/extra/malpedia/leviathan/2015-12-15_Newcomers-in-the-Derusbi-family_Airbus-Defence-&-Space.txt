By Fabien Perigaud    on 2015/12/15, 13:30        - Reverse engineering
        - Permalink
Derusbi is a well-known RAT family, used in various APT attacks since at least 2008.
Many papers (1,2,3) have described two known variants of this malware: a client version, acting as any other RAT by contacting its C&C server, as well as a server version, which just listens for incoming connections from a client.
This RAT seems to be continuously evolving, as enlightened by Sekoia which recently described a new way for Derusbi to bypass Windows drivers signature enforcement.
In this blog post, we'll present the analysis of two new variants we encountered: a driver for x64 Windows, and a Linux library.
We found various samples of this driver, all signed by legitimate, stolen certificates.
One has been revoked, another one is expired, and the last one is still perfectly valid.
However, we didn't find any installer delivering the driver, which might mean it is installed manually, for example along with the installation of the HD Root bootkit, as multiple evidences link to Derusbi.
According to the samples we found, the driver filename is either wd.sys or udfs.sys.
The following malicious certificates are used to sign the drivers:
In the 4 different samples we found, only one was using VMProtect to obfuscate its imports.
The other ones were not packed.
During the initialization phase, the driver tries to disable the kernel debugger by calling nt!KdDisableDebugger to prevent dynamic analysis.
As for the previous client versions (also using a kernel driver for rootkit features), the drivers filters both the filesystem and the network to hide the RAT activities..
Depending on the Windows versions, hooks are performed either on \\Device\Tcp or \\Driver\nsiproxy.
Whenever a specific IOCTL is performed on the device (0x120003 or 0x12001b respectively), the hook function hides network connections using ports between 1025 and 1777.
The filesystem rootkit is installed by hooking the IRP_MJ_DIRECTORY_CONTROL major function of \\Filesystem\Ntfs, and hides the presence of the driver file (which is grabbed by reading the service ImagePath registry value).
To perform all its RAT capabilities, the driver relies on a userland component, which is dynamically injected in memory from the kernel.
This ensures a better stealthiness, as the userland component is never written to the disk.
This userland component is a DLL, located in the .data section and ciphered using the classical Derusbi ciphering (which simply consists in a 4-bytes XOR).
The DLL is injected in one of the svchost.exe processes running as SYSTEM or LocalSystem, using the following steps:
Second shellcode is a custom DLL loader, which directly loads the DLL in memory without writing it to the disk.
The export is then called, with a randomly generated integer as parameter.
The randomly generated integer is used to build a named pipe called \\.\pipe\usbpcex%d.
This pipe is then used for the communication between the driver and the userland DLL.
Once loaded, the DLL writes the machine IP address to the registry key HKLM\SYSTEM\CurrentControlSet\Control\WMI\lpstatus.
The configuration is stored just after a string made of 15 "X”.
It is obfuscated using a simple XOR loop:
The configuration has the following structure:
The rest of the configuration is filled with garbage.
The malware configuration can embed up to 8 C&C addresses.
A configuration update mechanism is also available, by requesting the URL in the configuration.
The resulting web page is then parsed, looking for tags $$$--Hello and Wrod--$$$ surrounding a base64 string, which is the new encoded configuration blob.
Up to 3 different protocols are supported:
Once a C&C has been reached, its information is stored in the following registry key, xored with 0x51: HKLM\SYSTEM\CurrentControlSet\Control\WMI\Level10.
The DNS Server to use for DNS requests is stored in value Level01, xored with 0x51.
Source port for the DNS requests is randomly chosen between 1025 and 1777.
Proxy settings are stored in registry values Level02 to Level05, xored with 0x51.
DNS server IP address and proxy settings are retrieved by the userland DLL, by setting up a raw socket to sniff all outcoming traffic and parsing:
These two settings are then written to the registry.
All network communications are performed by the kernel driver.
Each received packet is decoded and sent to the userland in the pipe, and each data received through the pipe is encoded and sent back on the network.
Packets have a 0x1c bytes clear header, followed by encrypted/compressed data.
The header has the following structure:
The ciphering is a simple XOR with the 4-bytes key, packet might be compressed with LZO and checkSum is a CRC32.
The userland component is in charge of the network communications decoding and commands interpretation.
It receives, from the kernel module, the moduleID and the deciphered/uncompressed data from the network packet.
This part of the malware seems modular, and each module is associated to a module ID.
Previous papers described some of those modules, but our samples contained two new modules.
Here is the list of all the modules compiled in the DLL:
The two new modules are PCC_GUI and PCC_VPN.
The userland DLL embeds 5 PE files, all stored in .data section and ciphered with a 4-bytes XOR key.
This one is a 64-bits DLL (export "Func") for the PCC_GUI module.
It is injected in "winlogon.exe" directly in memory, with the custom DLL loader.
Communication with the main DLL is performed through a named pipe called \\.\pipe\usbpcg%d.
This is a 64-bits DLL (export "R32") used for commands execution (PCC_CMD module).
It is dropped in %Systemroot%\web\safemedo.html, and executed with rundll32.exe.
Communication with the main DLL is performed through named pipes \\.\pipe\usb%si and \\.\pipe\usb%so, where “%s” is GetTickCount output in decimal.
Process is created with its IO redirected to the pipes.
It can be run under a logged-in user, or by specifying user credentials.
This is a 64-bits DLL (export "Func") for keylogging capabilities via the GetAsyncKeyState API.
It is directly injected in "explorer.exe" process, and a mutex Microsoft.Windows.Common-Controls_6595b64144ccf1df_6.0.3790.4770-ww_05FDF087 is created.
Data is saved to %tmp%\Ziptmp$$__.1.
This one is another 64-bits DLL (export "Func") for keylogging capabilities, this time via the SetWindowsHook API.
It is dropped in %Systemroot%\web\safemode.html, executed with rundll32.exe, and a mutex Microsoft.Windows.Common-Controls_6595b64144ccf1df_6.0.3790.4770-x_05FDF087 is created.
Data is saved to %tmp%\Ziptmp$$__.2.
This is a 64-bits NDIS driver for the VPN feature.
It is dropped in %SystemRoot%\Drivers\{1D24B7E2-869D-49D8-B4EB-1424B36C42B6}.sys, and is signed with the XL Games Co.,Ltd.
The architecture of this new Derusbi variant is distributed amongst various drivers and processes, each one being responsible of a specific task.
This avoids having a single process performing all the malicious tasks, and prevents security software from raising alerts.
We recently noticed that the group behind HD Root bootkit was interested in compromising Linux systems as well.
A very interesting Chinese article describes the features of the Linux version of the bookit.
Focusing on the payload loading part, we can see that a userland library is loaded into a /usr/bin/sshd process using LD_PRELOAD.
Interestingly, we discovered a Linux library exporting all the classical PAM exports, with an added CTOR leading to a PccMain() function exposing the Derusbi server behaviour.
This library could be the perfect payload for the Linux HD Root, comforting us in the assumption of a strong link between the bootkit and the RAT.
The sample we found included all debug symbols, helping the understanding and the naming of each feature.
When started, the malware creates a lock in /dev/shm/.shmfs.lock.
The sample listens on port 40101 for incoming connections.
The communication protocol is the same than the Windows version.
All the network I/O are handled by the BD_SOCK and PCC_SOCK classes.
As for the Windows versions, various modules are embedded in the library, each one dedicated to a specific task:
The PCC_CMD module spawns a new process, which argv[0] is replaced by [diskio].
The following PS1 variable is set:
Regarding the debugging information still present in the library, it seems that the authors reused code from the Windows version of their RAT, and implemented wrappers for the original Windows API.
Source file name is Win32APIWarp.cpp.
We found various functions corresponding to Windows API, such as:
A kernel module is embedded in the .data section, ciphered using the classical 4-bytes XOR algorithm.
Its goal is to perform rootkit features, by accepting all packets to port 40101 and hiding network communications corresponding to the RAT.
Technically, it sets hooks in the netfilter stack by using the nf_register_hook function, and accept all packets matching the RAT communication.
For the hiding part, a hook is set on special file /proc/net/tcp which hides connections using ports between 40101 and 40500.
The driver is first patched to insert proper .modinfo and dropped in /tmp/.secure.
It is then loaded by simply calling insmod.
The correct version information inserted in .modinfo is retrieved by trying to read various hardcoded kernel modules which should be present on Linux machines.
After loading, the module file is deleted.
Derusbi seems to be a trendy malware, evolving on several fields.
The interest of APT actors in the Linux systems should encourage the community to improve and develop forensics and malware investigation tools for these platforms.
