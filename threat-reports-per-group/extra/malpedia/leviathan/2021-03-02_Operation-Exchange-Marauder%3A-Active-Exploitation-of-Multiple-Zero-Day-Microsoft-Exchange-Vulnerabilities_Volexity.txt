by Josh Grunzweig, Matthew Meltzer, Sean Koessel, Steven Adair, Thomas Lancaster
[UPDATE] March 8, 2021 – Since original publication of this blog, Volexity has now observed that cyber espionage operations using the SSRF vulnerability CVE-2021-26855 started occurring on January 3, 2021, three days earlier than initially posted.
Volexity is seeing active in-the-wild exploitation of multiple Microsoft Exchange vulnerabilities used to steal e-mail and compromise networks.
These attacks appear to have started as early as January 6, 2021.
In January 2021, through its Network Security Monitoring service, Volexity detected anomalous activity from two of its customers' Microsoft Exchange servers.
Volexity identified a large amount of data being sent to IP addresses it believed were not tied to legitimate users.
A closer inspection of the IIS logs from the Exchange servers revealed rather alarming results.
The logs showed inbound POST requests to valid files associated with images, JavaScript, cascading style sheets, and fonts used by Outlook Web Access (OWA).
It was initially suspected the servers might be backdoored and that webshells were being executed through a malicious HTTP module or ISAPI filter.
As a result, Volexity started its incident response efforts and acquired system memory (RAM) and other disk artifacts to initiate a forensics investigation.
This investigation revealed that the servers were not backdoored and uncovered a zero-day exploit being used in the wild.
Through its analysis of system memory, Volexity determined the attacker was exploiting a zero-day server-side request forgery (SSRF) vulnerability in Microsoft Exchange (CVE-2021-26855).
The attacker was using the vulnerability to steal the full contents of several user mailboxes.
This vulnerability is remotely exploitable and does not require authentication of any kind, nor does it require any special knowledge or access to a target environment.
The attacker only needs to know the server running Exchange and the account from which they want to extract e-mail.
Additionally, Volexity is providing alternative mitigations that may be used by defenders to assist in securing their Microsoft Exchange instances.
This vulnerability has been confirmed to exist within the latest version of Exchange 2016 on a fully patched Windows Server 2016 server.
Volexity also confirmed the vulnerability exists in Exchange 2019 but has not tested against a fully patched version, although it believes they are vulnerable.
It should also be noted that is vulnerability does not appear to impact Office 365.
While Volexity cannot currently provide full technical details of the exploit and will not be sharing proof-of-concept exploit code, it is still possible to provide useful details surrounding the vulnerability’s exploitation and possible mitigations.
Volexity observed the attacker focused on getting a list of e-mails from a targeted mailbox and downloading them.
Based on these observations, it was possible for Volexity to further improve and automate attacks in a lab environment.
There are two methods to download e-mail with this vulnerability, depending on the way that Microsoft Exchange has been configured.
In corporate environments it is common that multiple Exchange servers will be set up.
This is often done for load balancing, availability, and resource splitting purposes.
While it is less common, it is also possible to run all Exchange functionality on a single server.
In the case where a single server is being used to provide the Exchange service, Volexity believes the attacker must know the targeted user’s domain security identifier (SID) in order to access their mailbox.
This is a static value and is not considered something secret.
However, it is not something that is trivially obtained by someone without access to systems within a specific organization.
In a multiple server configuration, where the servers are configured in a Database Availability Group (DAG), Volexity has proven an attacker does not need to acquire a user’s domain SID to access their mailbox.
The only information required is the e-mail address of the user they wish to target.
In order to exploit this vulnerability, the attacker must also identify the fully qualified domain name (FQDN) of the internal Exchange server(s).
Using a series of requests, Volexity determined that this information could be extracted by an attacker with only initial knowledge of the external IP address or domain name of a publicly accessible Exchange server.
After this information is obtained, the attacker can generate and send a specially crafted HTTP POST request to the Exchange server with an XML SOAP payload to the Exchange Web Services (EWS) API endpoint.
This SOAP request, using specially crafted cookies, bypasses authentication and ultimately executes the underlying request specified in the XML, allowing an attacker to perform any operation on the users’ mailbox.
Volexity has observed this attack conducted via OWA.
The exploit involved specially crafted POST requests being sent to a valid static resources that does not require authentication.
Specifically, Volexity has observed POST requests targeting files found on the following web directory:
This folder contains image, font, and cascading style sheet files.
Using any of these files for the POST request appears to allow the exploit to proceed.
If a file such as /owa/auth/logon.aspx or simply a folder such as /owa/auth/ were to be used, the exploit will not work.
The video below demonstrates the vulnerability being exploited in a lab environment:
Video demonstrating the authentication bypass vulnerability at work in a lab environment.
In the video demonstration, the following SOAP XML payload is used to retrieve the identifiers of each email in Alice’s inbox:
XML payload used to pull email identifiers from Alice's inbox without authentication.
Then, the following payload is used to pull down each individual email:
Payload used to retrieve individual emails without authentication.
As mentioned in the introduction to this post, a remote code execution (RCE) exploit was also observed in use against multiple organizations.
This RCE appears to reside within the use of the Set-OabVirtualDirectory ExchangePowerShell cmdlet.
Evidence of this activity can be seen in Exchange's ECP Server logs.
A snippet with the exploit removed is shown below.
IIS logs for the server would show an entry similar to what is shown below; however, this URL path may be used for items not associated with this exploit or activity.
In this case, this simple backdoor, which Volexity has named SIMPLESEESHARP, was then used to drop a larger webshell, named SPORTSBALL, on affected systems.
Further, Volexity has observed numerous other webshells in use, such as China Chopper variants and ASPXSPY.
While the attackers appear to have initially flown largely under the radar by simply stealing e-mails, they recently pivoted to launching exploits to gain a foothold.
From Volexity's perspective, this exploitation appears to involve multiple operators using a wide variety of tools and methods for dumping credentials, moving laterally, and further backdooring systems.
Below is a summary of the different methods and tools Volexity has observed thus far:
In Volexity’s observations of authentication bypass attacks being performed in the wild, files such as the following were the targets of HTTP POST requests:
To identify possible historical activity related to the remote code execution exploit, organizations can search their ECP Server logs for the following string (or similar).
ECP Server logs are typically located at <exchange install path>\Logging\ECP\Server\
Further, Volexity has observed indicators that are consistent with web server breaches that can be used to look on disk and in web logs for access to or the presence of ASPX files at the following paths:
\inetpub\wwwroot\aspnet_client\ (any .aspx file under this folder or sub folders)
It should be noted that Volexity has observed the attacker adding webshell code to otherwise legitimate ASPX files in an attempt to blend in and hide from defenders.
There are also a handful of User-Agent that may be useful for responders to look for when examining their web logs.
These are not necessarily indicative of compromise, but should be used to determine if further investigation.
Volexity observed the following non-standard User-Agents associated with POST requests to the files found under folders within /owa/auth/Current.
Volexity observed the following User-Agents in conjunction with exploitation to /ecp/ URLs.
Further other notable User-Agent entries tied to tools used for post-exploitation access to webshells.
To identify possible historical activity relating to the authentication bypass and RCE activity, IIS logs from Exchange servers can be examined for the following:
Note that the presence of log entries with POST requests under these directories does not guarantee an Exchange server has been exploited.
However, its presence should warrant further investigation.
Yara signatures for non trivial webshells deployed by attackers following successful exploitation may be found in the Appendix of this post.
Volexity has observed numerous IP addresses leveraged by the attackers to exploit the vulnerabilities described in this blog.
These IP addresses are tied to VPS servers and VPN services.
Volexity has also observed the attackers using Tor, but has made attempts to remove those entries from the list below.
103.77.192.219
104.140.114.110
104.250.191.110
108.61.246.56
149.28.14.163
157.230.221.198
167.99.168.251
185.250.151.72
192.81.208.169
203.160.69.66
211.56.98.146
5.254.43.18
80.92.205.81
Highly skilled attackers continue to innovate in order to bypass defenses and gain access to their targets, all in support of their mission and goals.
These particular vulnerabilities in Microsoft Exchange are no exception.
These attackers are conducting novel attacks to bypass authentication, including two-factor authentication, allowing them to access e-mail accounts of interest within targeted organizations and remotely execute code on vulnerable Microsoft Exchange servers.
Due to the ongoing observed exploitation of the discussed vulnerabilities, Volexity urges organizations to immediately apply the available patches or temporarily disabling external access to Microsoft Exchange until a patch can be applied.
If you have concerns that your servers or networks may have been compromised from this vulnerability, please reach out to the Volexity team and we can help you make a determination if further investigation is warranted.
rule webshell_aspx_simpleseesharp : Webshell Unclassified
{
author= "[email protected]"
date= "2021-03-01"
description= "A simple ASPX Webshell that allows an attacker to write further files to disk."
$header= "<%@ Page Language=\"C#\" %>"
$body= "<% HttpPostedFile thisFile = Request.Files[0];thisFile.SaveAs(Path.Combine"
$header at 0 and
$body and
filesize < 1KB
rule webshell_aspx_sportsball : Webshell
{
author= "[email protected]"
date= "2021-03-01"
description= "The SPORTSBALL webshell allows attackers to upload files or execute commands on the system."
$uniq1= "HttpCookie newcook = new HttpCookie(\"fqrspt\", HttpContext.Current.Request.Form"
$uniq2= "ZN2aDAB4rXsszEvCLrzgcvQ4oi5J1TuiRULlQbYwldE="
any of ($uniq*) or
all of ($var*)
