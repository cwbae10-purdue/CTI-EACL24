I saw this hash 2569cc660d2ae0102aa74c98d78bb9409ded24101a0eeec15af29d59917265f3 shared at malwareresearchgroup.slack.com.
It was submitted to VT at 2021-09-01 19:47:50 and 37 security vendors flagged this file as malicious.
This loader is 64-bit Dll, compiled by MinGW and has one exported function:
With the help of IDA, we can see the ServiceMain function will spawn a new thread (I renamed to f_spawn_shellcode_thread):
The f_spawn_shellcode_thread function does the following tasks:
I wrote a short script to do shellcode extraction for later analysis:
After run script, I got the shellcode like the figure bellow:
If we load the raw shellcode into IDA and convert to asm code, it will look like the figure bellow.
At the first beginning of this code, we can see the pattern code that shellcode use to locate the fields of PEB structure.
This makes me think that it will use PEB to looking up the addresses of the API functions in the Dll used by shelllcode.
Go into sub_D2, the first statement assigns the return address to the rbp register.
And we know that this address is 0xA (push r9).
Then we see the string value ‘wininet’ is load to r14 register at 0xD5.
We see a value is assigned to the r10 (726774Ch; 726774Ch) register and following is a call to the address pointed by the rbp register.
At that time, I think these are hash values related to api functions, shellcode will perform calculations to compare with these values from which to get the related API address.
For the convenience of analysis and debugging, I converted the shellcode to an exe.
Finally, I got the following pseudocode related to finding the address of the API function and calling API through jmp rax command:
Based on the above pseudocode, we can see that the shellcode will calculate two hash values, the first value is based on the name of the Dll, the second value is based on the name of the API function of that Dll.
These two values are added together and compared with the pre-computed hash value.
You can write scripts to recover API functions or to save time, I always use shellcode_hashes_search_plugin.py of FLARE Team.
Details can be found in this article.
Final result after using the plugin:
At this point, we can do debugging for further analysis, however, for quickly I use hasherezade’s tiny_tracer tool to trace the shellcode:
Fill in your details below or click an icon to log in:


			You are commenting using your WordPress.com account.
( Log Out / 
				Change )


			You are commenting using your Google account.
( Log Out / 
				Change )


			You are commenting using your Twitter account.
( Log Out / 
				Change )


			You are commenting using your Facebook account.
( Log Out / 
				Change )
 Notify me of new comments via email.
 Notify me of new posts via email.
This site uses Akismet to reduce spam.
Learn how your comment data is processed.
