
Blog /
July 29, 2021 /
Rasta Mouse
NTLM relaying is a popular attack strategy during a penetration test and is really trivial to perform.
Just roll up at the client site, plug your laptop into the LAN, fire up responder and ntlmrelayx, and away you go.
The majority of opportunistic relays come when a user or a machine tries to access an SMB resource that doesn’t exist.
It therefore sends broadcast requests which tools like responder will send poisoned responses for.
There are tactics to coerce requests that specifically target the address you’re listening on.
For instance – create a Windows shortcut with the icon set to a UNC path (e.g.
\\attacker-ip\pwn.icon), place it in a network share and wait for a user to browse that share.
And there are also services that are vulnerable to relaying in their default configuration, such as Active Directory Certificate Services.
It’s probably safe to say that NTLM relaying isn’t going to vanish anytime soon.
However, relaying through a C2 framework is a bit less trivial for a few reasons.
Assuming  you’ve compromised a Windows endpoint:
This second point is easy to solve, we can just run them on a local Linux VM or WSL, and tunnel the traffic to it.
Redirecting the incoming traffic on port 445 is the slightly tricky part, but is possible using a tool such as WinDivert.
This is a driver (yes, a driver) which is capable of intercepting and redirecting incoming network packets before they can hit the underlying services.
There are multiple projects out there that leverage WinDivert to achieve this style of traffic redirection in post-ex tools, including DivertTCPconn, StreamDivert, and PortBender.
DivertTCPconn & StreamDivert compile to an EXE and PortBender to a reflective DLL.
Both are generic enough implementations that can be run via practically any C2 framework, though PortBender has the added perk of including an Aggressor Script.
These tools allow us to direct traffic incoming on port 445 to another, arbitrary local port.
On this port, we can start a reverse port forward which will redirect the traffic again to a location where the relay tools are running.
Cobalt Strike does have an rportfwd command, which will bind a port on the compromised machine, tunnel that traffic back to the team server, and forward it to the specified IP and port.
The inconvenience is that it requires that your relaying tools are running on either the team server itself, or on another machine that is routable from the team server.
The rportfwd_local command differs in that instead of tunnelling the traffic only as far as the team server, it will be forwarded to the machine running the Cobalt Strike client of the operator who started it.
This means that you can run the relaying tools in a VM or in WSL of your own machine.
Finally, for the relaying tool to send traffic back into the target network, we can just use the socks command.
The traffic flow will look something like this:
Let’s see it in action.
I generally set the attack up in reverse order.
You want everything up and running before the traffic is redirected so you don’t miss anything.
In this example, 10.10.17.68 is the target machine.
Start the reverse port forward on the same machine that will run PortBender.
172.20.77.73 is the IP address that my WSL Ubuntu image has.
Upload WinDivert64.sys (or WinDiver32.sys depending on the target arch), and then run PortBender.
Local admin access is required to load the driver, so this Beacon is running as SYSTEM.
When port 445 receives a connection, PortBender will report it in the Beacon console.
When this happens, check ntlmrelayx!
As expected, the traffic has been tunnelled all the way to my WSL instance where ntlmrelayx is listening; and it has relayed the traffic to the target machine back on the internal network.
By default, it dumps the local SAM database.
To stop PortBender, use the jobs command to list the running job.
This will give you the job ID (JID) and an associated PID.
Use jobkill <jid> to stop the job, and then kill <pid> to close the spawned process.
As well as the usual MS guidance for NTLM relay mitigation, one may wish to look for the WinDivert driver load events (Sysmon Event ID 6).
This blog post was written using the lab from my Red Team Ops course.
Placing backdoors in legitimate applications is a good way to achieve persistence, data exfiltration,...
I'm sure the subject of combining D/Invoke with GadgetToJScript has been written about multiple...
Disclaimer:  I didn't come up with any of the methods or techniques described...
In Part 1, we reviewed the very simple VirtualAllocEx/WriteProcessMemory/CreateRemoteThread injection pattern.
If you've any experience with building infrastructure designed to support a red team or...
Cobalt Strike 4.2 introduced a new set of "spawn and tunnel" commands called spunnel...
Placing backdoors in legitimate applications is a good way to achieve persistence, data exfiltration,...
I'm sure the subject of combining D/Invoke with GadgetToJScript has been written about multiple...
Disclaimer:  I didn't come up with any of the methods or techniques described...
In Part 1, we reviewed the very simple VirtualAllocEx/WriteProcessMemory/CreateRemoteThread injection pattern.
If you've any experience with building infrastructure designed to support a red team or...
Cobalt Strike 4.2 introduced a new set of "spawn and tunnel" commands called spunnel...
Many thanks to my Black Hat patrons:
Robert Horn, Joe Helle, Maleick Miles, Adam Svoboda, yue chen, Raul Carmona, eon, Dave, mut8nt, Joel Tomassini, mark, Lény Bueno, James Curbow, Suraj Khetani, Ty-reX, Henrik, SV1, Kovert, and Fawaz.
Copyright © 2021 Rasta Mouse
