A brief story regarding cobalt team server operators being lazy AF!
TLDR; Current assessment (using cb_looper) testing cobalt strike C2 beacons have stock standard configurations with minor to no variation in complexity and are easily detected by leveraging the below process flow.
I wanted to see how many cobalt team servers are running out in the wild and analyse said servers for defensive purposes.
So I did a quick check with Shodan and identified 6200 endpoints running on approx.
For context surrounding how I use cobalt beacons; you can leverage cb_looper within a docker image and automate the extraction of IOC’s into your SIEM or SOAR, enabling you to have defensive actions related to cobalt strike IOC’s.
The image below explains the high-level process flow.
I have also stored the latest scan and Shodan extract within my GitLab repository.
Link to the repository here.
This will enable you to understand this post in greater detail and dashboard/analyse it yourself.
So the first thing we do is run cb_looper against the Shodan export to collect all the major and minor cobalt strike configs exported into a Splunk index for later parsing and analysis.
The below image is the cb_looper log file, and as we can see, we have started to collect major and minor configurations, plus some IP’s do not have enumerable beacon configs.
After looper has finished, we can check to ensure the configurations were extracted and have the correct information we need, as displayed below.
As we can see, all the configurations are indexed within Splunk correctly.
40 or so fields that contain the data we need (Image was snipped for visibility)
If you are doing this yourself and using Splunk's data models I suggest you rename the fields with spaces and join certain fields like C2, user agent etc.
So after I configured all the correct data models, I started analysing the data for this subset of C2 beacons and identified that port:443 was the most popular and port:8443 was the least.
It’s also interesting to note that not one of these beacons uses any custom ports.
After that, I wanted to see the main injection processes, as seen below in the code snippet and image.
Then I checked the C2 URLs for both X86 and X64 beacons.
User agents used for X64 beacons.
Finally, I wanted to see if I could create detection methods based on time-based analysis, and I realised most of the beacons use zero jitters, and none of the beacons uses any custom jitter, which is a bit sad :(.
Thanks for reading, and if you have any questions or “positive feedback”, feel free to reach out, and as always…..
