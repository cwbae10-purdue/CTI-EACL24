This article was published on the 8th of April 2020.
The Emotet trojan is dropped in multiple stages.
The first stage is an office file that contains a macro.
This macro then loads the second stage, which is either a PowerShell script or a piece of JavaScript.
A PowerShell based downloader script that was used to downloaded the Emotet binary, is analysed in the Emotet droppers article.
In this article, a JavaScript based downloader is analysed in the usual step-by-step manner.
At first, the obfuscation methods are explained, after which the deobfuscated sample is analysed.
The JavaScript based downloader is lauched by a macro in a Word document.
The hashes of both samples are given below.
Additionally a sample package (which contains both files) can be downloaded from MalShare, Malware Bazaar, or VirusBay.
Note that this article only covers the JavaScript based downloader.
The JavaScript file is obfuscated using Obfuscator.io‘s obfuscator.
One can inspect the obfuscator’s source code to understand how it works.
Its not often that the obfuscator’s source code is available, which is why its not used in this article.
Understanding how to approach such a sample, and knowing how to recognise patterns in code, is a valuable skill to develop.
This article will show six steps that are required to remove the obfuscation.
Firstly, the original strings are retrieved.
After that, multiple dead code variants are removed.
Thirdly, the dictionary mappings within functions are addressed.
Fourthly, the control flow is unflattened.
Fifthly, the function overrides are explained.
Lastly, function callbacks are addressed.
After the deobfuscation is complete, the original payload will be reconstructed and analysed step-by-step.
Within the sample, the strings are stored in a single array, as can be seen when scrolling through the code.
The strings are obtained from this array during run time.
The code below provides the string array, together with a function that alters the array.
The anonymous function shuffles the array’s order 0x13b places, or 315 in decimal.
Directly below that, a function is defined.
The code is given below.
This function is called at places where a string is normally located in the script.
An example of such a call is given below.
The first parameter is the index of the value in the string array, as can be seen in the code excerpt below.
The second argument is used in the decryption of he given string.
Searching for some of the magic values, will lead to the conclusion that the RC4 encryption algorithm is used, and is decrypted using this function.
Note that the string array contains base64 encoded strings, as not all encrypted output is printable.
As such, the decryption function base64 decodes the strings first, using the atob function.
The refactored function template is given below.
Note that one can also find the usage of the RC4 encryption algorithm in the feature list of the obfuscator.
As stated prior, this article does not rely on the feature list nor source code of the obfuscator, as this is not always available.
To clean the script, replace all occurrences of the decryption function with the result it returns for the given array.
One can copy the string array and shuffle function into the browser’s console to obtain the shuffled and decrypted values, or automate the process with a script.
A version of the script where all strings have been replaced is present in the file package that is provided in the beginning.
Within the script, dead code is present in several ways.
The two most occurring methods are the insertion of dead code in the form of variables and the creation of redundant if-statements.
To avoid automatic removal of unused variables, the variables link to other dead code, thereby referencing each other.
An example from the script is given below.
Not all dead code references other dead code.
An example of dead code without references is given below.
Additionally, this excerpt contains a redundant if-statement.
Only when the code is altered, statically or in-memory, the condition could be met.
In the code above, the body within the if-statement is unreachable.
Therefore the code within the else-clause is executed.
All variables are created within the condition, meaning they cease to exist outside of the else-body.
In this case, f7 is returned, which references eX and f4.
Neither eX nor f4 references a variable that is created within the else-body.
As such, the content of the else-body can be rewritten without the garbage code.
The rewritten excerpt is given below.
This makes the code more readable, and will allow for a quicker analysis later on.
To obscure the control flow, aside from the encrypted string array, dead code, and redundant if-statements, the control flow is flattened.
The same concept is used within all occurrences in the script.
At first, two variables are created.
One contains a series of numbers that are separated by pipes.
Using the split function, an array is filled with the numbers in the given order.
The next variable is used to loop through the code.
For each number in the sequence, there is a piece of code present in a switch case.
Using the order that is specified by the array, the code is executed in the original order.
The code excerpt is given below.
Once reordered, the code becomes easier to read, as can be seen below.
Note the dead code that is present in the recovered code.
At the beginning of functions, a JavaScript object is made that contains fields with values.
These fields, and their values, serve as key-value pairs.
In the function, the values will be taken from the object to obscure the function’s purpose.
An excerpt from the code is given below.
The if-statement compares the same field from the object, meaning the value is irrelevant as it will always be equal.
A new function is then created, where the function template as defined in the OtIWa field is then used to add the two given parameters together.
The first parameter is the value of YlyIl and GyBoN.
The second value is equal to );.
The value, once concatenated, is given below.
This code is then executed as a function by using the function template that is defined in FnRMt, whose return value is then stored in bq.
The try-catch statement is written below in the cleaned form.
Note that the try-catch structure has also been removed from the code, as it serves no purpose during the analysis and only clutters the overview the analyst creates.
The excerpt below is a part of the code that is used to override several functions that are normally present in the console.
A commonly used technique to see the value of an variable is to print it using console.log(variableName).
Several fields within the console object are set equal to bp, which is defined as an empty function in the first line of the excerpt.
This example also serves to show that not all obfuscation needs to be removed in order to make the code readable.
The last switch does not need to be removed, as the order of the execution does not matter.
The fact that functions are replaced is already visible.
Code segments like this are inserted to hinder dynamic analysis, which is often much quicker than static analysis.
Since this analysis is done statically, code segments like these are considered clutter.
As such, they can be removed from the script once it is certain that none of the code that is present in the original input is handled within such a function.
Usually, a function requires arguments and returns a value based upon the input.
Sometimes, one or more of the arguments is also altered.
It is also possible to provide a function as an argument.
The obfuscation here passes a function with two arguments, which is done several times.
The first argument is the data to use, whereas the second argument is a boolean.
Within the function, a check is done to see if the value is either true or false.
Depending on the hardcoded path, either of these values is required to continue the execution.
This further obscures the execution path within the obfuscated code, especially if this is done in all functions.
To illustrate the above, two functions will be discussed.
Below, the cs function partially given.
As stated before, the function that is passed as the second argument requires two parameters.
The first is the URL, and the second is the function to continue the execution in.
In this case, the hardcoded boolean value should be false.
The cs function is given below in its refactored form.
If the HTTP status code is equal to OK (status code 200), the Emotet binary could be downloaded.
Note that cu is the function that is passed to cs.
The binary itself is then passed to cu as the first argument.
The second argument that is passed to cu is !
The boolean’s value should be false to successfully continue the execution, as can be seen in the code of cu.
Rewriting the code can be done by defining more functions that do not require the boolean to follow the correct path, but return the first argument that is passed to given function.
To illustrate, the cs function would return the response body.
Based on the obfuscation techniques that are given above, one can clean the code.
Removing the content that is not centered around the interesting variables will remove the anti-tampering and anti-debugging code that is present.
By removing the function callbacks, more functions will be created, which also results in a clearer overview for the analyst.
Once all relevant code is gathered and cleaned, the original input can be recovered.
Functions names and variable names can be refactored to improve the readability of the code even further.
The refactored and cleaned script is analysed in parts, after which the whole script is given.
The first part of the script contains the variables.
As most of the variables occurred only once, the sole occurence has been replaced by its value.
The five URLs are stored in a single array, as this makes the iteration over all five URLs easier.
The next function, named download, is used to download the Emotet binary from a given URL using a Microsfot XML object.
The request is not async, as is defined by the third argument in the open function.
Only if the HTTP status code is OK (which is equal to 200), the response body is returned.
Once downloaded, the response body needs to be saved somewhere.
The getOutputPath function generates the full path, including a random file name with the exe extension to save the downloaded binary to.
The GetSpecialFolder function, when given the argument is 2, returns the path to the temporary folder on the system.
The file name starts with \x5c, which equals \\, as the temporary folder’s location does not end with a backslash.
This needs to be added before the file name can be appended.
The file name is nine characters long, and is obtained using the random function.
The result from this function always starts with zero dot.
To remove these two characters, a substring that is nine characters long, starting at the second index, is taken.
The saveAndRun function gets the the output path for the downloaded file, and saves the file to the disk using an ADO Stream Object.
The type is set to 1, which corresponds with the adTypeBinary constant in the StreamTypeEnum.
Since the downloaded data is a byte array.
The SaveToFile function saves the file to the given location.
The second parameter, 2, is equal to the adSaveCreateOverWrite constant in the SaveOptionsEnum.
If there already is a file with the randomly generated name, it is overwritten.
At last, the WScript Shell is used to execute the file that was just written to the disk.
The start function is used to display the fake error message to the victim, using the WScript Shell’s Popup function.
The first argument is the text to display.
The second argument is the amount of seconds that the message box should maximally be displayed, where the value 0 is used to mark the time frame as indefinite.
The third argument is the title of the message box.
The last argument is the icon type of the messagebox, where 64 refers to the informational message box icon.
After all functions have been defined, the URL array can be iterated through to download the binary.
If the download is successful, the data is saved to the disk, and then executed.
At last, the fake error message is displayed.
The complete script is given below.
By recognising patterns in the code, one can remove the obfuscation.
This is, however, a time consuming task.
Therefore, it is essential to find a balance between deobfuscating code and reading deobfuscated code.
The amount of code that needs to be deobfuscated differs based on the goal of the analysis.
The analysis, deobfuscation, and refactoring efforts reduced the code from 1067 lines of code, into 46 lines of code.
This is a reduction in size of more than 95 percent, allowing the analyst to quickly read and understand the code.
Based on this, future changes can be tracked without fully deobfuscating the sample.
To contact me, you can e-mail me at [info][at][maxkersten][dot][nl], send me a PM on Reddit, or DM me on Twitter @Libranalysis.
