Your Handbook to Utilize the MITRE ATT&CK Framework
Your Handbook to Utilize the MITRE ATT&CK Framework
Your Handbook to Utilize the MITRE ATT&CK Framework
SÃ¼leyman Ã–zarslan, PhD | February 08, 2020
Researchers identified Emotet for the first time in 2014 as a banking malware stealing sensitive and private information.
Now, adversaries are using Emotet as Infrastructure as a Service (IaaS) for delivering malware, including other banking Trojans.
Emotet incorporates various obfuscation and evasion techniques to avoid detection, and these techniques change over time.
We revealed obfuscated Visual Basic codes in  the first part of the Emotet Technical Analysis series  .
In this second part, we analyze the PowerShell codes in the Emotet malware document ( PowerShell,   MITRE ATT&CK T1086   ).
We analyzed the following Word document step by step in the first part:
Let's remember the revealed VBA code ( Scripting,   MITRE ATT&CK T1064   ):
In this Do While loop, the Create method of the Win32_Process class is used to create a new process.
ðŸ’¡ The  Win32_ProcessStartup  abstract WMI class represents the startup configuration of a Windows-based process.
The class is defined as a method type definition, which means that it is only used for passing information to the Create method of the Win32_Process class.
Therefore, the VBA code embedded in the Word document executes a PowerShell command using WMI ( Windows Management Instrumentation,   MITRE ATT&CK T1047   ) .
 ðŸ’¡ Windows Management Instrumentation (WMI)  is the infrastructure for management data and operations on Windows-based operating systems.
We'll reveal the obfuscated malicious PowerShell command in this blog.
Let's remember the PowerShell command:
ðŸ’¡PowerShell Parameter Completion: Substrings of parameters like -NoEx (- NoExit), -Executi (-ExecutionPolicy), -w (-WindowStyle) are used in the PowerShell command instead of using the complete parameter string to avoid detection.
Because of the way that PowerShell handles parameters, parameter substrings like -W, -Wi, -WindowSt, -WindowSty, are all valid ways of specifying an execution argument such as -WindowStyle.
ðŸ’¡-w can be used for -WindowStyle , because -WindowStyle is the only parameter starts with -w .
Adversaries commonly use the -WindowStyle parameter with Hidden value in malicious PowerShell commands to avoid detection ( Hidden Window,  MITRE ATT&CK T1143  ).
Actually,  -WindowStyle Hidden  does not entirely hide the PowerShell command windows, it shows the command window for a while before hiding it.
 ðŸ’¡ -WindowStyle  parameter sets the window style for the session.
Valid values are Normal, Minimized, Maximized, and Hidden .
ðŸ’¡The -e parameter cannot be used for the -EncodedCommand , because multiple parameters start with -e : -EncodedCommand and -ExecutionPolicy .
 ðŸ’¡-EncodedCommand  accepts a base-64-encoded string version of a command.
Therefore, we must use base64 decoding to reveal the PowerShell command ( Obfuscated Files or Information,   MITRE ATT&CK T1027   ).
There are garbage variables to obfuscate the code.
There are `(backtick) characters, which are used to obfuscate the code.
In this case, it is not used to escape any character, so we can remove it from the code.
ðŸ’¡`(backtick, grave accent) character is the PowerShell's escape character.
Let's put ' 937 ' in place of $Nnyjthcrzjoyv .
Now, let's get rid of + characters.
 ðŸ’¡+   operator  in PowerShell concatenates two string expressions and adds integers.
Let's put ' $env:userprofile\937.exe ' in place of $Ekxhlobqrlh , and ' &('new-object') NeT.WeBCLiEnT ' in place of $Hirmyhqaltos :
Let's change variable names with more readable ones:
Now, we must reveal the $list variable.
The Split() method is used in this variable.
ðŸ’¡Split(Char[])  splits a string into substrings that are based on the characters in the separator array.
In this case, the separator is [char]42 , which is equal to the * (asterisk) character.
Let's change random case to PascalCase:
ðŸ’¡Randomized case : In this old method, uppercase and lowercase letters appear in a random sequence in the code, which is useful to bypass weak security controls.
  ðŸ’¡Net.WebClient.DownloadFile(Uri address,string fileName())   : The WebClient.DownloadFile method of System.Net namespace downloads the resource with the specified URI to a local file.
ðŸ’¡$env:userprofile indicates the  userprofile  environment variable that specifies the user's profile directory.
This directory stores personal data of the user and a typical path is C:\Users\Username .
Adversaries used the Invoke-Item cmdlet to execute the downloaded file in  our previous Emotet analysis  .
Now, they are using the  Process.Start  method instead of Invoke-Item to decrease the detection rate.
In our analysis, the PowerShell coded downloaded 937.exe from the first URL.
The other URLs are also active.
The purpose of this second part of the Emotet Technical Analysis Series is analyzing the PowerShell code included in the heavily obfuscated Visual Basic macros revealed in  the first article  .
Briefly, this PowerShell code downloads a file from a list of URLs, then executes the file as a process.
Adversaries used the following techniques in the PowerShell code for obfuscation and evasion:
WMI was used to create a process instead of cmd .
If WMI activity is not monitored, it is hard to detect the creation of the malicious process.
Substrings of parameters were used instead of the complete version of the parameters.
PowerShell completes the incomplete version of a parameter.
-w was used for -WindowStyle and -en was used for the -EncodedCommand .
The -WindowStyle parameter was used with the Hidden value to hide the PowerShell command window.
The Base64-encoded version of the PowerShell command was used with  -EncodedCommand  parameter.
Garbage variable assignments were used to obfuscate the code.
The ` (backtick character was used to obfuscate strings.
For example, Dow`Nloadfi`LE was used instead of DowNloadfiLE .
+ operator was used to concatenate fragmented strings.
As an example, 'new-o'+'bj'+'ect' was used instead of newobject to evade weak security controls.
URLs were joined with * (asterisk) character to evade weak URL regexes of security controls.
Then, the Split() method was used to separate URLs.
The [char] conversion function was used to obfuscate.
For example, [char]42 was used for the * (asterisk) character.
Randomized case (e.g., NeT.WeBCLiEnT ) was used to bypass weak security controls.
The  Process.Start  method was used to execute the downloaded file instead of the more common execution method like the Invoke-Item cmdlet.
We will analyze the behavior of the executed file 937.exe in the third part of the Emotet Technical Analysis series.
 T1027 Obfuscated Files or Information
