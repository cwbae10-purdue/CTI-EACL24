Threat actors are continuously developing and refining methods to evade detection from cybersecurity professionals.
One of the more creative ways to disguise threat activity comes in the form of packing software – a technique that applies a packing algorithm on malware to produce a file that is harder to detect, analyze, and prevent.
While packers are legitimate and quite useful in helping developers protect their code against illegal copying and reverse engineering, in the wrong hands packing software can be used for more sinister purposes.
A packing software called CryptOne became popular recently among some major threat actors.
It was first reported by Fox-IT that the group behind Wastedlocker has begun using it, as well as Netwalker, Gozi ISFB v3, ZLoader, and Smokeloader.
The CryptOne packer caught our attention when Emotet started using it.
We followed the Emotet group closely and published multiple articles[1][2][3] about the malware until the operation was disrupted and taken down.
Some of the most recent samples that were generated before the takedown were packed by CryptOne.
As we began analyzing the packed samples we found more malware families that are using CryptOne that weren’t reported by Fox-IT, such as Dridex, Qakbot and Cobaltstrike.
In this blog post we will describe the features of this packer that made it so popular among threat actors, outline the unpacking process, and detail indicators that can determine if a sample was packed with CryptOne.
The data that is decrypted by the loader has the following structure: names of WinAPI, encrypted PE file, and then the shellcode.
The shellcode decrypts the PE which is the destined malware, and then performs reflective loading using the following steps:
After all these steps are performed, the shellcode jumps to the entry point of the destined malware.
CryptOne is a sophisticated packer and presents a unique set of challenges to detect.
It is composed of multiple stages of execution and attempts to evade detection by subverting static analysis, reducing the entropy of the data, and confusing disassembly algorithms.
It also tries to avoid sandbox detection and cause damage by staying inactive for a long duration and filling the report with useless information.
These features make it attractive for attackers that need to reduce the detection rate of their malware, and we might see more threat actors use it in the near future.
If you’d like to hear more about our industry-leading approach to stopping malware, please contact us and we’ll set up a demo.
[1] https://www.deepinstinct.com/2020/08/12/why-emotets-latest-wave-is-harder-to-catch-than-ever-before/
[2] https://www.deepinstinct.com/2020/10/12/why-emotets-latest-wave-is-harder-to-catch-than-ever-before-part-2/
[3] https://www.deepinstinct.com/2021/01/07/emotet-malware-2020/
