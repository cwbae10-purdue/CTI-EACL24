Contributor: Amitai Ben Shushan Ehrlich
Sofacy is an APT threat actor that’s been around since 2008 and rose to prominence with the election hacks of 2016.
Better known as FancyBear or APT28, this threat actor targets governments, military, and private organizations and has been known to engage in hack-and-leak operations.
In the past couple of years, Sofacy has drastically retooled and largely evaded analysts.
One of the more consistent subgroups is known as Zebrocy.
Their targeting appears primarily focused on former Soviet Republics and, more recently, Asia.
In March 2021, we observed a cluster of activities targeting Kazakhstan with Delphocy – malware written in Delphi and previously associated with Zebrocy.
The Word documents that were observed purport to be from a Kazakhy company named Kazchrome, a mining and metal company and one of the world’s largest producers of chrome ore and ferroalloys.
In total, we found six Delphocy Word documents that appear to be related to this cluster, all of which contain the same VBA script that drops a PE.
Out of the six Word documents, two appear to be authentic uploads to VirusTotal by victims originating from Kazakhstan.
The uploaded files contain what appeared to be the original filenames Авансовый отчет(новый).doc and Форма докладной (служебной) записки.doc.
In this post, we take a deep dive into these samples and share some techniques other analysts can employ to reverse engineer Delphocy dropper docs.
We show how researchers can bypass password-protected macros and describe both how to decompile Delphi using IDR (Interactive Delphi Reconstructor) and how to import the saved IDC file into Ghidra using dhrake’s plugin.
The results of our analysis led us to discover further Zebrocy clusters; a list of IOCs and YARA detection rules are provided to enable threat hunters to search for these and related artifacts in their environments.
When analyzing Office documents with VBA macros, threat hunters have many different tools and techniques that do the job, but I’ve built a habit that I still use when I first started reversing malware to bypass password-protected macros manually.
When opening the Word document and viewing the macro this time, you can see the script as well as the Forms.
When analyzing the function, what immediately sticks out is the ert.DataType = “bin.base64”, showing that the UserForm1 is encoded with base64.
When selecting on UserForm1, the textbox reveals a base64 encoded string; we know this because of the function we discussed above.
The next step is to copy the entire string into a file so it can be decoded.
Now we decode the binary from base64 and save it to disk as wininition.exe.
Following that, clean the headers using HxD, and then use PE-Bear to fix the sections headers to move to the next phase of the analysis.
When triaging a binary, the go-to tool is Hiew to investigate and look for clues for a deeper understanding.
With wininition, I notice the Embarcadero string, which means that this binary was written in Delphi.
When reversing Delphi binaries I’ve always used IDR (Interactive Delphi Reconstructor).
IDR is a decompiler of executable files and dynamic libraries (DLL) written in Delphi.
When searching for the latest developments with IDR, I came across a fantastic plugin for Ghidra, a collection of scripts for reverse engineering Delphi binaires in Ghidra using IDR’s output to IDC.
It was published over a year ago, but it is a gem if threat hunters are using Ghidra.
dhrake allows you to import the IDC file from IDR into Ghidra.
This will import the Symbol names, function signatures and create structs for Delphi classes.
This plugin extracts and applies the Delphi symbols from the IDC file, which is generated by IDR, and attempts to find cases where Ghidra has incorrectly determined the entry point of a function.
If you’ve never imported a plugin to Ghidra please read this post.
I’ve saved the IDC to a selected folder.
I then install the plugin in Ghidra and run the script it prompts for the IDC file and then load it!
In the wininition binary, the first function WinMain has SetWindowsHookExW function, which is a hook procedure to monitor a system for certain types of events.
The hook procedures low-level keyboard input events is WH_KEYBOARD_LL, which is the number 13 in the parameter.
This hook is a mechanism that intercepts keystroke events.
All the events are then saved to a log file to be sent to a C2.
The C2 is obfuscated using hex that can be converted to ascii:
Note: These appear to be compromised domains.
Analysis of these documents led us to find other Zebrocy clusters.
As Zebrocy continues to evolve its scope, organizations must have the proper visibilities and detection capabilities to find this threat actor.
We hope the techniques discussed in this post will be useful to other researchers in analyzing Delphocy dropper docs in particular, and documents with password-protected macros in general.
Get notified when we post new content.
Keep an eye out for new content!
In the era of interconnectivity, when markets, geographies, and jurisdictions merge in the melting pot of the digital domain, the perils of the threat ecosystem become unparalleled.
Crimeware families achieve an unparalleled level of technical sophistication, APT groups are competing in fully-fledged cyber warfare, while once decentralized and scattered threat actors are forming adamant alliances of operating as elite corporate espionage teams.
Get notified when we post new content.
Keep an eye out for new content!
