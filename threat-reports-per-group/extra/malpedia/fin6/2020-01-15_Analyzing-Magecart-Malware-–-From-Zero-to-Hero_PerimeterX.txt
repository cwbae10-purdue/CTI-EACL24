Javascript obfuscation is not a new trend, but it is widely used today to hide malware code in many websites.
This post is for
technical readers who want to understand Magecart's common obfuscation
pattern, and ways to decode it.
As websites get more and more complex, we see an increasing number of sites that are being compromised by malicious code injections, also commonly known as Magecart or digital skimming attacks.
These attacks are designed to steal user data such as credit card numbers from websites, and if left unchecked, can result in significant data breaches and huge fines for the website owner.
Magecart attacks often go unnoticed for weeks, months or even years.
One reason that they escape scrutiny is that the injected JavaScript code is heavily obfuscated, making it hard to detect malicious script actions and data leaking to unauthorized domains.
However, a significant number of these obfuscated scripts seem to share a pattern.
“the action of making something less clear and less easy to understand, especially intentionally” - Cambridge Dictionary
Take a look at this Magecart attack sample.
This code steals credit card details from users and this sample is from an ongoing attack.
The obfuscated code doesn’t make a lot of sense at first, but upon closer inspection we can see that it has a structure that repeats across many different Magecart scripts that we have analyzed.
It uses two main techniques.
This involves using any number of Javascript language tricks to manipulate data (e.g., using non-decimal values for strings and numbers, randomizing variable names, using chained commas in return statements, etc.)
This is a common JavaScript obfuscation pattern that we see repeated across many different Magecart attack scripts.
Magecart code uses a classic obfuscation technique, which is also used by several legitimate obfuscation services.
This technique is effective, but once you understand the common pattern, you can de-obfuscate it and uncover the logic.
The pattern contains three layers:
Now let's analyze the Magecart attack code seen above using this pattern (Content, Decryption, Logic)
Once you have separated the layers of the malware, you will be able to reveal its code by doing two simple steps:
You can automate the de-obfuscation procedure and use this node script:
Note: This code is a proof-of-concept.
This is the output of the automated de-obfuscation script.
As you can see, ALL of the strings are revealed, and it is much easier to understand what Magecart actually does.
Thank you for reading, and stay tuned for the next post where I'll be focusing on more advanced techniques to analyze Magecart malware, and malicious code in general.
