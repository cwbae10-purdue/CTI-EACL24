On March 25, 2021,  360 NETLAB's BotMon system flagged a suspiciousELF file (MD5=64f6cfe44ba08b0babdd3904233c4857) with 0 VT detection, the sample communicates with 4 domains on TCP 443 (HTTPS), but the traffic is not of TLS/SSL.
A close look at the sample revealed it to be a backdoor targeting Linux X64 systems, a family that has been around for at least 3 years.
We named it RotaJakiro based on the fact that the family uses rotate encryption and behaves differently for root/non-root accounts when executing.
RotaJakiro pays quite some attention to hide its trails,  using multiple of encryption algorithms, including: the use of AES algorithm to encrypt the resource information within the sample; C2 communication using a combination of AES, XOR, ROTATE encryption and ZLIB compression.
RotaJakiro supports a total of 12 functions, three of which are related to the execution of specific Plugins.
Unfortunately, we have no visibilityto the plugins, and therefore do not know its true purpose.
From a broad backdoor perspective, the functions can be grouped into the following four categories.
With the sample we have, we discovered the following 4 samples, all of which have 0 detections on VT, and the earliest First Seen time on VT is in 2018.
These samples all have the following 4 C2s embedded.
These 4 C2 domains have very close Crteated,Updated and Expired time, readers will notice that the crated data was in Dec 2015, 6 years ago.
The 4 RotaJakiro samples, with time distribution from 2018 to 2021, are very close to their functions, and the 2021 sample is selected for analysis in this blog, which has the following basic information:
At the coding level, RotaJakiro uses techniques such as dynamic AES, double-layer encrypted communication protocols to counteract the binary & network traffic analysis.
The following will analyze the specific implementation of RotaJakiro from the above perspective.
All sensitive resources in RotaJakiro are encrypted, and in IDA we can see that the decryption method dec_proc is called 60 times, which is composed of AES and Rotate.
The AES decryption entry is as follows:

Where aes_dec is AES-256, CBC mode, key&iv are hardcoded.
The Rotate decryption entry is shown below:

The so-called Rotate is a cyclic shift, we can see that the number of shifts is determined by the value of plain_len(length of plaintext) &7.
Take the following C2 cipher text as an example.
The various parameters related to decryption are shown below, the length of the ciphertext is 32 bytes and the length of the plaintext is 26 bytes.
First, decrypting with AES, we get the following "sub-ciphertext".
Then, the valid ciphertext is extracted from the  sub-ciphertext, where the valid ciphertext starts from the 8th byte, and the length is the plaintext length minus 8, which is 26-8=18 bytes here.
Finally, we can calculate 26(the length of plaintext is 26)&7=2, and get the number of shifts, and shift the above valid ciphertext byte by byte by 2 bits to get C2 plaintext.
RotaJakiro makes a distinction between root/non-root users when implementing persistence features, and different techniques are used for different accounts.
Depending on the Linux distribution, create the corresponding self-starting script /etc/init/systemd-agent.conf or /lib/systemd/system/sys-temd-agent.service.
The file name used for the disguise is one of the following twos.
RotaJakiro implements process guarding to protect its own operation, and like persistence, there are different implementations for root/non-root users.
When running under the root account, depending on the Linux distribution, a new process is automatically created when the service process is terminated by writing Restart=always or respawn to the service's configuration file.
The actual result is shown in the figure below, where you can see that a new process is created immediately after the systemd-daemon process is terminated.
When running under a non-root account, RotaJakiro generates two processes, session-dbus and gvfsd-helper, which monitor each other's survival and restore them when one of them is terminated, which is very typical of dual-process protection.
How is RotaJakiro's dual-process protection implemented?
First, it creates a piece of shared memory with the shmget API, and session-dbus and gvfsd-helper communicate with each other through this shared memory, telling each other their PIDs.
Then, dynamically fetching the process survival through the /proc/[PID] directory.
When the other process is found dead, the process is created by execvp API to help the dead process "resurrect", as shown in the following diagram.
The actual effect is shown in the figure below, you can see that after session-dbus and gvfsd-helper are ended by kill -9, new processes are created right away.
RotaJakiro implements a single instance by file locking, as shown below.
The lockfile used in this differs under the root/non-root account.
In the actual non-root account, for example, the processes and file locks can be matched by /proc/locks, and then the corresponding RotaJakiro sample is executed.
RotaJakiro establishes communication with C2 through the following code snippet, pending the execution of subsequent commands.
This process can be divided into 2 stages
The C2 list is decrypted by the decryption algorithm described in the previous section, and the following four C2s are built into the sample at present.
RotaJakiro will first try to establish a connection with them, and then construct the golive message by the following code snippet.
Then it encrypts the golive information and sends it to the C2s

Finally, it receives the packet back from the C2, decrypts it and checks its legitimacy, and if it passes the check, it goes to Stage 2.
Receive and execute the command from C2 through the following codesnippet.
At present, RotaJakiro supports a total of 12 instructions, and the correspondence between the instruction code and the function is shown in the following table.
The Run Plugin function reuses the same code and implements the function call through the following logic.
We are currently not capturing such payloads, so we use the Plugin_"parameter" form to represent different tasks.
The network communication packet of RotaJakiro consists of three parts: Head, Key, Payload.
Head is mandatory and 82 bytes long, and the Key & Payload parts are optional.
Head & Keyare encrypted with XOR & Rotate, and Payload is encrypted with AES & ZLIB Compression.
In the following, we will illustrate the composition of network traffic head&key&payload and the decryption process through a round of interaction between Bot and C2.
The first 0x52 bytes are the content of the Head.
How to decrypt the head?
Very simple, shift 3 bits left byte by byte, and then XOR with 0x1b.
After decryption, we can get the following content.
Reading 32 bytes from offset 0x5a gives us the following Payload.
Using the decrypted key as the AES-256 key, decrypt the above data in CBC mode to get the following content.
The 8th byte onwards is ZLIB compressed data, decompressed to get the following content.
What is the use of the decompressed Payload(bf 89 88 08 cd 2d fd 50)?
It is used as a new AES key to decrypt some sensitive resource information.
For example, when Bot collects device information, one of the information is the current OS distribution, which is implemented by the cat /etc/*release | uniq command.
Thecat /etc/*release | uniq command  is the result of the following cipher text
decrypted with the new AES key and the parameters in the following figure.
When BOT receives C2's "report device information" command, it will send the following data to C2, and you can see that the value of the key part is still ea 9a 1a 18 18 44 26 a0.
The decrypted key value is 4c cf cb db db 39 2a 1e.
After decrypting and decompressing the payload sent by Bot to C2, we get the following data, which is the various information of the device, including the information obtained by cat /etc/*release | uniqmentioned before, which verifies that our analysis is correct.
The Torii botnet was exposed by Avast on September 20, 2018, and we noticed that there are some the similarities between the twos,for example:
After decrypting the sensitive resources of RotaJakiro & Torii, we found that they reuse a lot of the same commands.
In the process of constructing the flow, a large number of constants are used and the construction methods are very close.
From the perspective of reverse engineering, RotaJakiro & Torii share similar styles: the use of encryption algorithms to hide sensitive resources, the implementation of a rather old-school style of persistence,structured network traffic, etc.
We don’t exactly know the answer, but it seems that RotaJakiro and Torii have some connections.
While this concludes our analysis of RotaJakiro, the real work is far from over, and many questions remain unanswered: "How did RotaJakiro spread, and what was its purpose?"
, "Does RotaJakiro have a specific target?”, We would love to know if the community has relevant leads.
Readers are always welcomed to reach us on twitter, or email to netlabat[at]360.cn.
This post was a collaboration between
Read more posts by this author.
Read more posts by this author.
