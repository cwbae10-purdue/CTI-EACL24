On Apr 28, we published our RotaJakiro backdoor blog, at that time, we didn’t have the answer for a very important question, what is this backdoor exactly for?
We asked the community for clues and two days ago we got a hint, PE(Thanks!)
wrote the following comment on our blog post.
The sample mentioned in the message is a zip packing file, which has appeared in 2016.
The zip contains multiple files, the Mach-O format executable file named Noi dung chi tiet (translated to detailed information) is the OceanLotus sample.
When we compare the this file with the RotaJakiro sample, we noticed there are multiple similarities and it is VERY likely that this is the Linux version of the OceanLotus.
The common domain name resolution function for Linux is gethostbyname(), but RotaJakiro uses the relatively niche getaddrinfo() function.
C2 domain name resolution and session establishment are performed in one function, this is also used by the the OceanLotus sample.
The comparison of the 2 functions is as follows.
It can be seen that they not only have the same function, but also use sprintf() and getaddrinfo() in almost exactly the same way.
In addition, both RotaJakiro and OceanLotus use separate data structures to hold C2 session information, such as socket fd, whether active, timeout, etc., and their data structures are also very similar.
The network packets of both RotaJakiro and OceanLotus are composed ofHead, Key, and Payload, of which Head is mandatory and has a length of 82 bytes, while Key and Payload are optional.
The RotaJakiro initializes the Head of the registration packets with a separate function.
There is also a function in the OceanLotus sample that is dedicated to initializing the Head of the registration packets.
This function has no code for memory allocation and random character generation, and the whole function uses multiple constants to assign values to specific fields of the registration packet one by one, exactly like the RotaJakiro.
In addition, OceanLotus shares the same field values with RotaJakiro at offsets 1, 24 and 75, especially the magic at offset 1 is 0x3B91011, which is hard to describe as a coincidence, so it greatly increases the probability that these two pieces of code are the same origin.
In addition, both the RotaJakiro and the OceanLotus have assigned message codes to the registration packets, and both are 0x2170272:

The resulting registration packets is also very similar, and the RotaJakiro registration packets is as follows.
The following is the OceanLotus registration packets analyzed by PAN in 2017.
The decrypted registration packets for the RotaJakiro is shown below.
The following is the OceanLotus plaintext registration packets from PAN's analysis.
You can see that they have the same plaintext structure and basically the same key field values.
Both RotaJakiro and OceanLotus have a function we called rotate() for encryption/decryption, the rotate function of RotaJakiro is as follows.
For OceanLotus

It is easy to see the commonalities between them.
In actual use, for example, in the process of encrypting the registration packets, you can see that the RotaJakiro and the OceanLotus use the same parameters.
Both RotaJakiro and OceanLotus  use DWORD type instruction codes to specify the function of the message, and share several semantically identical instruction codes, some of which are featured as shown in the following table.
This similarity obviously cannot be explained by coincidence, it is an extremely strong evidence of their code homology.
Although the RotaJakiro and the Mac version of the OceanLotus are implemented in different languages, their similarity in function and message format design, and their similarity in specific implementation, can no longer be explained by coincidence.
It is highly likely that RotaJakiro is a Linux version of the OceanLotus.
Read more posts by this author.
Background In Feb 2021, we came across an ELF sample using some CWP’s Ndays exploits, we did some analysis, but after checking with a partner who has some nice visibility in network
