Real Intrusions by Real Attackers, The Truth Behind the Intrusion
In October of 2020, the group behind the infamous botnet known as Trickbot had a bad few days.
The group was under concerted pressure applied by US Cyber Command infiltrating the botnet, and allegedly, providing alternate configuration files to break the bot’s connections to the larger network.
At the same time, Microsoft along with other partners, secured court orders to take over and take down Trickbot command and control servers.
While this did appear to have a short term effect on limiting the scope of the botnet operators, there have been reports on the limits of its’ effectiveness.
In our collection there was certainly a drop in overall Trickbot activity, but since the October disruption, we have seen it begin to rise again; this is a recent intrusion from late December.
The Trickbot threat actors used Cobalt Strike to pivot through-out the domain, dumping lsass and ntds.dit as they went.
They used tools such as AdFind, Nltest, Net, Bloodhound, and PowerView to peruse the domain, looking for high privileged credentials to accomplish their mission.
They used PowerShell, SMB, and WMI to move laterally.
After acquiring the necessary credentials, the threat actors used a technique called Overpass-the-hash to move to a backup server, before being kicked off the network.
We believe if this attack had been allowed to continue, it would have ended in domain wide ransomware, specifically Ryuk.
The original delivery mechanism was not found, but likely to have been a malicious email based on previous known Trickbot campaigns.
Trickbot was manually executed on a single endpoint.
Source: Hatching Triage | Behavioral Report
During the intrusion, we witnessed the threat actors elevate privileges on several systems using the built-in GetSystem named pipe privilege escalation tool in Cobalt Strike.
After executing on the infected endpoint, the Trickbot executable injected itself into the Window Error Reporting Manager (wermgr.exe).
Subsequent Trickbot command and control traffic then originated from the injected wermgr.exe process going forward.
Using the YARA rule generated by Malpedia we were able to locate Cobalt Strike injections in the following processes.
The threat actors employed a couple different credential access techniques.
The first technique used was dumping passwords from lsass on the beachhead machine.
After they gained access to a domain controller, we witnessed them use ntdsutil to run the following command:
The above command was executed from a batch file that was dropped and then executed using wmic.
This command, which is included in DPAT, dumps NTDS.dit to disk and has been used by Trickbot actors in the past.
The above technique has been around since at least 2014 @chriscampell.
Event ID 2001, 2003, 102, 300, 301, 302, and 103 were all seen in response to the above command as well as a file create by lsass.
The threat actors ran the AdFind utility for domain discovery.
The following net commands were used by the threat actor.
While on systems, we also saw them use the following commands.
The following Nltest commands were executed several times by the threat actors over the course of the intrusion.
The ping command was then used to test connectivity to the domain controllers and other systems.
Bloodhound was ran for domain attack path enumeration.
The following Powerview commands were also seen invoked by the threat actors for discovery.
This file was seen executed locally via cmd, and on remote systems using wmic.
SMB was also used to transfer Cobalt Strike Beacon executables to the ADMIN$ share on systems, which were then executed via a service.
Additionally, we also witnessed the use of overpass-the-hash.
Here we can see a 4624 event with seclogo as the logon process and logon type 9 which tells us some form of pass the hash occurred.
Shortly after we see a couple Kerberos service ticket requests for that user.
This alert fired a couple times based on network activity.
Here’s some helpful information when looking for PTH or OPTH from Stealthbits
Based on the activity seen, we assess that the likely final actions would have been ransomware deployment across the domain environment.
Based on research from late last year by Kyle Ehmke, we can assess that the likely ransom deployment would have been Ryuk (Wizard Spider / UNC1878).
Please consider donating $1 or more to the project using Patreon.
Thank you for your support!
We also have pcaps, files, and Kape packages available here.
No memory captures are available for this case.
Enter your email address to subscribe to this blog and receive notifications of new posts by email.
Intro The Ryuk threat actors went from a phishing email to domain wide ransomware in 5 hours.
They escalated privileges using Zerologon (CVE-2020-1472), less than 2 hours after the initial … Read More
Intro The Ryuk group went from an email to domain wide ransomware in 29 hours and asked for over $6 million to unlock our systems.
They used tools such as … Read More
The threat actor logged in through RDP, attempted to run a Cobalt Strike Beacon, and then dumped memory using ProcDump and Mimikatz.
Next, they RDPed into a Domain Controller, minutes … Read More
Here’s another example of threat actors brute forcing RDP to install ransomware, this time the brute forced system was not using the default RDP port.
The threat actors installed ransomware … Read More
