I spent a little time looking into Saleforce’s JARM tool released in November.
JARM is an active tool to probe the TLS/SSL stack of a listening internet application and generate a hash that’s unique to that specific TLS/SSL stack.
One of the initial JARM fingerprints of interest relates to Cobalt Strike.
The value associated with Cobalt Strike is:
To generate a JARM fingerprint for an application, use the JARM python tool:
python3 jarm.py [target] -p [port]
I opted to dig into this, because I wanted to get a sense of whether the fingerprint is Cobalt Strike or Java.
I started my work with a hypothesis: Cobalt Strike’s JARM fingerprint is Java’s JARM fingerprint.
To validate this, I created a simple Java SSL server application (listens on port 1234) in Sleep.
I ran this server from Java 11 with:
I assessed its JARM fingerprint as:
This fingerprint does not match the supposed Cobalt Strike fingerprint.
Does this mean we’re done?
The current popular use of JARM is to fingerprint web server applications listening on port 443.
This implies that these servers have a certificate associated with their TLS communications.
Does this change the above JARM fingerprint?
Let’s setup an experiment to find out.
I generated a Java keystore with a self-signed certificate and I directed my simple server to use it:
keytool -keystore ./exp.store -storepass 123456 -keypass 123456 -genkey -keyalg RSA -dname “CN=,OU=,O=,L=,S=,C=”
java -Djavax.net.ssl.keyStore=./exp.store -Djavax.net.ssl.keyStorePassword=123456 -jar sleep.jar server.sl
We’ve validated that the above JARM fingerprint is specific to a Java 11 TLS stack.
Another question: is the JARM fingerprint affected by Java version?
I setup several experiments and validated that yes, different major Java versions have different JARM fingerprints in the above circumstance.
Part of the value of JARM is to turn the internet haystack into something smaller for an analyst to sift through.
I wanted to get a sense of how much Java is on the internet.
Fortunately, this analysis was easy thanks to some timely and available data.
Silas Cutler had scanned the internet for port 443 and obtained JARM values for each of these hosts.
This data was made available as an SQLite database too.
Counting through this data was a relatively easy exercise of:
sqlite> .open jarm.sqlite
sqlite> select COUNT(ip) FROM jarm WHERE hash = “[hash here]”;
Here’s what I found digging through this data:
I went a slight step further with this data.
I opted to convert the Java 11.05 data to hostnames and eyeball what appeared as interesting.
I found several mail servers.
I did not investigate which application they are.
I found an instance of Burp Intruder (corroborating Salesforce’s blog post).
I also found several instances of Oracle Peoplesoft as well.
These JARM hashes are a fingerprint for Java applications, in general.
For defenders, I wouldn’t act on a JARM value as proof of application identity alone.
For red teamers, this is a good reminder to think about pro-active identification of command and control servers.
This is a commoditized threat intelligence practice.
If your blue team uses this type of information, there are a lot of options to protect your infrastructure.
Part 3 of Red Team Operations with Cobalt Strike covers this topic starting at 1h 26m 15s:
JARM is a pretty cool way to probe a server and learn more about what it’s running.
I’d love to see a database of JARM hashes and which applications they map to as a reconaissance tool.
The C2 fingerprinting is a neat application of JARM too.
It’s a good reminder to keep up on your infrastructure OPSEC.
© 2012-2021 Strategic Cyber LLC, a HelpSystems company | Corporate Compliance & Ethics | Privacy Policy | Security Hall of Fame | Blog
