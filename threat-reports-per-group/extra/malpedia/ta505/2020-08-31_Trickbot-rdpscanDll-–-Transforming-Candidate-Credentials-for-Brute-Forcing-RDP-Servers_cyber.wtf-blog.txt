After some weeks of not seeing the RDP scanner module of Trickbot, I recently observed that the module was again distributed among the bots in our tracking lab.
Since Bitdefender already published a report on the module in March 2020, I focused on checking whether or not the command-and-control (C2) communication of the module remained more or less the same or if there was anything groundbreakingly new.
But while I was checking that, I also had a look at the actual data that we received from the C2 server.
My intuition on the password list was that it is just a dictionary of words to try.
This is also suggested by the URL which is used to retrieve the password list: hxxps://%c2%/%gtag%/%bot_id%/rdp/dict.
Thus I did not have a closer look at the password list at that time, because everything looked the way Bitdefender described it and I had no reason to look at it in detail.
But one or two days later, I re-requested the list of passwords to see whether the list changed in the meantime – and it did indeed.
Because of that I had a quick look at what changed and then I noticed that I overlooked something right from the start (literally, duh!).
On the left side of the picture you see what I had a quick look at after retrieving the password list from the C2 server with curl (and thus seeing only the last lines of the output).
On the right side there is the very same password list, just seen from the start.
To the keen eye it seems that they may be using some kind of templating mechanism to adjust the list of passwords and use more specific credential candidates.
With that thought in mind I spun up my analysis environment and started digging into the module to see what the Trickbot gang is actually doing there (spoiler: yes, they do some kind of templating – but not just the find-and-replace kind).
As mentioned before, this is not a simple find-and-replace but instead they can change the credential candidates to better fit the attacked host.
In that sense, I decided to call those things transforms instead of templates because they are not just templates that are filled out but a little bit more dynamic.
And that is essentially how the markers in the password list work.
I was able to extract all 91 transformations that are currently available to the rdpscanDll (as of 2020-08-14).
Please find the list with all transforms with an example and a description for each of them at the end of this blog post.
Some of the transforms can even be parameterized to a certain degree: %OriginalUsername%, %OriginalDomain%, and %domain% can be prepended or appended with an (N) to indicate whether the first N or last N characters of the element should be used (or everything if no parameters are present).
After finding the list of transforms, I decided to ask my favorite internet search engine whether these names for the transforms are known related to RDP.
And I indeed found a RDP brute force tool by a certain z668 which seemingly makes use of some of the transforms that are used in the rdpscanDll.
Although this tool seems to be a standalone application, the names of the transforms and the context of their use could suggest a connection between z668 and the Trickbot gang – at least to a certain degree.
Sure, the connection may not be really strong because the Trickbot module is written in C++ and the RDP tool seems to be written in C#.
But given the fact that C# can load and use native DLLs and considering that z668 forked the FreeRDP project on Github, the actual scanner may indeed be written in C/C++ (and probably using FreeRDP).
Thus it is possible that the Trickbot gang may have obtained the source code from z668 to integrate the RDP scanner into their module framework and to use their C2 communication protocol.
But: this is just guessing based on some more or less loose facts – I could easily be completely wrong with that.

													You must be logged in to post a comment.
