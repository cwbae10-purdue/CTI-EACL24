By: Jason Reaves and Joshua Platt
Recently we stumbled upon a new CS loader being leveraged by an actor involved in TrickBots CS and ransom operations.
Most of the important strings are obfuscated:
In both cases the strings are ultimately decoded by XORing with a single byte and subtracting the iterator+1 from the value, in these cases the XOR key is simply 0 however.
An example of IDA code for decoding the various strings can be found below:
A partial listing of relevant strings can be found below:
The sample will manually load kernel32.dll and ntdll.dll into memory to resolve some of its functions but will utilize LoadLibraryW for loading wininet.dll.
The sample will also utilize VirtualAllocExNuma for loading the DLLs into memory:
After resolving the necessary dependencies the loader will simply attempt to download a file that will be decoded and then executed in memory.
As can be seen in the partial listing of strings above this file was being hosted on GitHub at one time:
This account is no longer active and appears to of been deleted possibly eluding to the actors cleaning up after themselves after leveraging their campaigns.
We did manage to discover an active account being leveraged however:
The file that will be used is in the ‘ubiquitous-sniffle’ repository:
The safety.png file is not an image at all, it is actually just a small binary blob of data:
After we decode this blob of data we are left with a C-style string of hex bytes which appear at first glance to be shellcode:
Which will download a 64bit CobaltStrike beacon:
We’re powering the next great retail disruption.
We’re powering the next great retail disruption.
Learn more about us — https://www.linkedin.com/company/walmartglobaltech/
Malware Researcher, Crimeware Threat Intel, Reverse Engineer @Walmart
We’re powering the next great retail disruption.
Learn more about us — https://www.linkedin.com/company/walmartglobaltech/
