Using a satisfiability modulo theories (SMT)[8] solver to break the latest variant of the crypter being used on Get2.
TA505 [3] has been pushing their Get2 loader DLLs for a long time now using the same tactic [4], during this time the crypter has remained the same with a few modifications every few months.
This crypter is actually a prime candidate for using SMT [1] to solve it and the latest iteration of the crypter gave me enough of a reason to write up a new unpacker utilizing SMT.
The crypter on the DLL has remained mostly static for the past 6 months with a few tweaks here and there.
For example, the XOR key for decoding the unpacked binary has moved around a bit; the latest version looking at the 32-bit binary had the key referenced as an offset instead of having it placed in relation to the binary blob to be decoded.
The decoding is actually done by an encoded blob of bytecode which is decoded in a similar manner to the crypted binary.
The next layer that is decoded has remained pretty static over the months, it will reconstruct the binary data, run the same decoding routine and finally APLib decompress the resulting blob giving us our unpacked Get2 loader.
The decoding is going to be:
We also know the output for the first iteration being a compressed binary will be ‘M8Zx90’ so we can construct our problem in Z3[2] and let it solve what the XOR key should be.
After solving for the XOR key we just decode the data and write out the decompressed file.
Now with a decoder, we can run it on the past few campaigns to harvest the IOCs.
After breaking apart a crypter that appears to only be used by a specific actor group we can pivot on that crypter to see what else they might be using, such as this FlawedAmmy Loader that was mentioned on Twitter[5].
And another FlawedAmmy loader sample: ad320839e01df160c5feb0e89131521719a65ab11c952f33e03d802ecee3f51f
Also an ‘av_block’ sample:  1c983566c27a154f319bf6f1681b1de91930f3b7c019560a0fbc52ead861bf90
This sample when unpacked shows to be designed to block protection services, after deobfuscating the strings which are obfuscated using a partial base64 and then eexec decoding.
Deobfuscated strings involve a huge list of security products.
This sample appears possibly related to Clop or Cryptomix ransomware[6].
Some of the other strings in the binary we can also decode to get the process and files names related to some common server processes such as SQL, ElasticSearch and Apache.
Another interesting sample found by pivoting on this packer is a custom loader designed to load TeamViewer which FireEye calls MINEBRIDGE[7] and list that is also used as a backdoor.
This sample after unpacking has a custom UPX layer on it as well.
After unpacking the sample fully we have a number of interesting strings.
Also some hardcoded strings that seem interesting:
The loader performs a checkin to the C2 with a hardcoded User-Agent as well.
Downloading the all_files_m.bin gives us a ZIP compressed file full of TeamViewer software:
Get notified when we post new content.
Keep an eye out for new content!
In the era of interconnectivity, when markets, geographies, and jurisdictions merge in the melting pot of the digital domain, the perils of the threat ecosystem become unparalleled.
Crimeware families achieve an unparalleled level of technical sophistication, APT groups are competing in fully-fledged cyber warfare, while once decentralized and scattered threat actors are forming adamant alliances of operating as elite corporate espionage teams.
Get notified when we post new content.
Keep an eye out for new content!
