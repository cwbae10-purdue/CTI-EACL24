Earlier today, Adam Weidemann from Google’s Threat Analysis Group (TAG) published research regarding a threat actor targeting security analysts following a social engineering campaign.
Google attributes this activity to DPRK threat actors.
This blog has no evidence to corroborate or refute this claim, but considers Google to be a reputable source of information.
Once executed under the specified conditions, the malware will move an encoded set of strings into memory and decode them.
The malware uses these strings to call the CreateDirectory API at C:\ProgramData\VMWare and later to specify a filename at this location for a dropped payload (vmnat-update.bin).
These decoded strings also contain an export and an additional parameter for this dropped payload.
After this, the malware enumerates running processes via NtQuerySystemInformation and checks for the presence of avp.exe (Kaspersky) and avastui.exe (Avast).
If either of these two processes are found, the malware will gracefully exit.
If not, it continues with its workflow.
Following this step, the malware decodes a second set of strings.
These are used to create persistence via the CurrentVersion\Run key under an entry named “OneDrive Update.”
Once the malware has created persistence key, it writes a second-stage DLL to the “C:\ProgramData\VMWare\” directory and calls it using the previously decoded parameters.
Second StageAnalysis of the second-stage payload is in-flight and additional details beyond what is listed below will be provided when available.
The first of these parameters, lxUi5CZ0IV45j89Y, is used as to create a mutex to ensure that only one copy of the malware is running at a time.
If the mutex already exists, the malware will exit.
The malware then resolves a long list of API calls before jumping in to a section in memory.
While this list is extensive, they indicate potential functionality, including C2 operations (HttpOpenRequest, HttpAddRequestHeaders, etc) and host-based operations (GetDesktopWindow, WriteFile).
The sample examined contains multiple C2 domains and URLs, each of which contain a different endpoint for communication.
]io/upload/upload.aspThe malware uses the OpenSSL library and communicates to these endpoints via POST request:
As part of the POST request, the malware transmits the date and time of the malware’s execution to the C2 server (encoded in Base64 format).
These are assumptions based on common malware characteristics, however, and not observed activity.
* (Updated below)*Update (1/26): Over the course of the last 24 hours, a lot of great research and analysis came to light from various parties.
Most notably, I’d like to direct readers to three posts that offer additional context and demonstrate that the final action after this POST request is to download an additional payload onto the disk:
