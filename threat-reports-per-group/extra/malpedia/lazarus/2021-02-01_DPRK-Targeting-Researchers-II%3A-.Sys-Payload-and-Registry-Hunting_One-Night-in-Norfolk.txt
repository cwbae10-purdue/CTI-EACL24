In an earlier post, this blog examined malware from a DPRK-affiliated campaign targeting security researchers.
As a disclaimer, the hunt workflow proposed is merely hypothetical, and should not be considered any sort of official security guidance.
(2/1 Update, Stage 2 can be found here)
This current task requires that a DLL be installed as a service.
Thus, it did the job of handling the appropriate registry modifications.
This PowerShell script will start a new copy of svchost, which in turn runs this new service.
Once this patch is in place, the malware will resume its expected behavior.
First, the malware steps into a function and begins placing data in memory in a similar fashion as the previously analyzed DLL.
In this instance, the malware decrypts three values:– SubVersion– Description– Software\Microsoft\Windows\CurrentVersion\KernelConfigThis third value is a registry entry.
The malware attempts to open this value under HKLM; however, this value does not exist, and the malware does not create it.
This strongly suggests another mechanism, such as code launched via browser exploit or another dropper, places this data in the registry.If the malware does open this key, it attempts to read data within values named SubVersion and Description (the two other decrypted strings).
For the purposes of continuing the analysis, I created this registry key and these two entries, with dummy values in each location.
The values chosen were random, which led to some trial and error to determine their possible purpose.
After some attempts, it seemed that anything longer than four bytes in the SubVersion entry led to an error during the malware’s execution.
Specifically, the malware returned 0xEA and gracefully terminated.
In addition, the malware seemed to hit an exception when tested with exactly four bytes.
I picked a random two-byte value to allow it to proceed.
For the Description entry, I used human-readable sentences and words to make them easier to track.
After reading the Description value, it begins transforming this data through a loop; however, the number of repetitions of the loop is not dependent on the length of the Description data.
Instead, the malware uses a value that appears to be [10 in hex, 16 in decimal] fewer than the value stored in the SubVersion registry key.
In addition, the malware truncates 16 hex characters off of the start of the data being transformed.
After this transformation, the malware steps into a function that checks for the presence of a PE header (MZ) and allocates memory.
Following these function calls, the malware starts the service.
After publication, an analyst who wished to remain anonymous pointed me to a copy of the missing registry data.
I left the previous writing intact, as the analytic method may prove useful to future readers.
Below contains some brief technical analysis of the payload decrypted from the registry.
Name: KernelConfig Registry data (approx.
2mb)MD5 7904d5ee5700c126432a0b4dab2776c9 SHA1 79bd808e03ed03821b6d72dd8246995eb893de70 SHA256 7c4ea495f9145bd9bdc3f9f084053a63a76061992ce16254f68e88147323a8efThis file can be given a .reg extension, which will import the data into the device’s registry.
With this data in place, the malware properly continues its routine and decrypts and runs an executable payload.
Unlike the DLL analyzed in a previous post that functioned as a downloader, this file has a wide range of additional features.
This second-stage file begins by dynamically resolving a very large list of APIs from Windows libraries such as kernel32, advapi, ntdll, userenv, and others.
In this case, the malware can use this routine to decode three C2 servers for communication.
In addition, it can write to and read data from the a key located at HKLM\Software\Microsoft\Windows\CurrentVersion\DriverConfig.After this, the malware will contact a C2 server.
The decoded C2s for this sample are:   hxxp:  // www.colasprint[.
The malware supports a wide range of commands and actions.
Based on these commands, the tool is likely used to conduct reconnaissance and potentially to triage a device before taking further steps in the environment.
Hunting PossibilitiesWhen looking for malware like this on a device or across a network, an initial instinct might be to search for known malicious registry key values.
As this post will shortly show, this is merely a starting point for hunting; however, it’s an effective one.As an experiment, I pulled malware samples from previous (unrelated) adversary activity.
An uncompressed meterpreter shell took up just under 1 kb (1,000 bytes).
A compressed version took up approximately 300 bytes.
I consider these to be a reasonable estimate for the lower-bounds of an executable payload size that an attacker would use.I then modified an open-source PowerShell script to enumerate the every key and value in the CurrentVersion location of HKLM.
In a real scenario, I would likely try this against the entire registry.
This produces a CSV file of approximately 194,000 values (I used the upside down question mark as a delimiter and edited out excess commas and quotation marks) with the key path, key name, and length of the data.
In theory, sorting these by the largest keys should show outliers.
I used the following Python code:
Additions to this workflow, such as generating the last modified time of the registry key, would likely greatly improve this workflow.
Parsing the data for character entropy would also likely improve the accuracy.
Even without these two changes, however, a malicious payload stored in a registry value would easily rank in the top 99% of values.
Update 2/1/2021: Analysis of the proper, adversary-intended KernelConfig value shows that the registry data is approximately 2mb.
Registry data of this size would likely rank at the top of any registry dump in this proposed workflow.
