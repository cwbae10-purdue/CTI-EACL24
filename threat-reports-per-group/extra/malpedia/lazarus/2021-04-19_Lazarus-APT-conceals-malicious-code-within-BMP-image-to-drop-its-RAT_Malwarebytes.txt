Protect your devices, your data, and your privacy—at home or on the go.
"Thanks to the Malwarebytes MSP program, we have this high-quality product in our stack.
It’s a great addition, and I have confidence that customers’ systems are protected."
Activate Malwarebytes Privacy on Windows device.
Posted: April 19, 2021 by Threat Intelligence Team

Last updated: July 28, 2021
This blog was authored by Hossein Jazi
Lazarus APT is one of the most sophisticated North Korean Threat Actors that has been active since at least 2009.
This actor is known to target the U.S., South Korea, Japan and several other countries.
In one of their most recent campaigns Lazarus used a complex targeted phishing attack against security researchers.
Lazarus is known to employ new techniques and custom toolsets in its operations to increase the effectiveness of its attacks.
On April 13, we identified a document used by this actor to target South Korea.
In this campaign, Lazarus resorted to an interesting technique of BMP files embedded with malicious HTA objects to drop its Loader.
This attack likely started by distributing phishing emails that were weaponized with a malicious document.
The following figure shows the overall process of this attack.
In the next sections, we provide the detailed analysis of this process.
Opening the document shows a blue theme in Korean that asks the user to enable the macro to view the document.
Upon enabling the macro, a message box will pop up and after clicking the final lure will be loaded.
The document name is in Korean  “참가신청서양식.doc”  and it is a participation application form for a fair in one of the South Korean cities.
The document creation time is 31 March 2021 which indicates that the attack happened around the same time.
The document has been weaponized with a macro that is executed upon opening.
The macro starts by calling MsgBoxOKCancel function.
This function pops up a message box to the user with a message claiming to be an older version of Microsoft Office.
After showing the message box, it performs the following steps:
The macro added the extension zip to the BMP file during the image conversion process to pretend it’s a zip file.
This BMP file has an embedded HTA file.
This HTA contains a JavaScript that creates “AppStore.exe” in the “C:\Users\Public\Libraries\AppStore.exe” directory and then populates its content.
At the start, it defines an array that contains the list of the functions and parameters required by the script: OpenTextFile, CreateTextFile, Close, Write, FromCharCode, “C:/Users/Public/Libraries/AppStore.exe” and some junk values.
When the script wants to perform an action, it calls a second function with a hex value that is responsible for building an index to retrieve the required value from the first array.
For example, at the first step it calls the second function with 0x1dd value.
This function subtracts 0x1dc from 0x1dd to get the index for the first array which would be 1.
Then it uses this index to retrieve the first element of the first array which would be “C:/Users/Public/Libraries/AppStore.exe”.
Following the same process, it calls CreateTextFile to create AppStore.exe and then writes MZ into it.
Then it converts the data in decimal format to string by calling fromCharCode function and uses the same procedure it writes them into the AppStore.exe.
At the end it calls Wscript.Run to execute the dropped payload.
AppStore.exe loads a base64 encrypted payload that has been added to the end of itself.
Before the payload there is a string which is the decryption key (by7mJSoKVDaWg*Ub).
To decrypt the second stage payload, at first it writes itself into a buffer created by VirtualAlloc and then looks for the encrypted payload and copies it into another buffer.
In the next step, it has implemented its own base64 decoder to decode the allocated buffer and write it into another buffer using memset and memmove.
At the end, this encoded payload gets decrypted via XOR using hardcoded decryption key to generate the second stage payload.
After the decryption process has finished, it jumps to the start address of the second payload to execute it.
This payload is loaded  into memory by AppStore.exe and has not been written to disk.
It starts by performing an initialization process which includes the following steps:
After the initialization process has finished, it checks if the communications to C&C servers were successful or not and if they were successful it goes to the next step in which it receives the commands from the server and performs different actions based on the commands.
The commands received from the C&C are base64 encoded and encrypted using its custom encryption algorithm (Figure 16).
After deobfuscation, it performs the following commands based on the command codes.
The communications to the server have been done through send and recv socket functions.
Output of cmd.exe has been encoded and encrypted and is sent to the server as test.gif using an HTTP POST request (Figure 18).
If the CreateThread process was not successful, it executes the command by calling WinExec and then sends the “”8888 Success!” message after encrypting it using its custom encryption and then encoding it using base64 to the server as test.gif.
This second stage payload has used custom encoded user agents for its communications.
All of these user agents have been base64 encoded and encrypted using the same custom encryption algorithm used to encrypt the server addresses.
Here is the list of the different user agents used by this RAT.
There are several similarities between this attack and past Lazarus operations and we believe these are strong indicators to attribute this attack to the Lazarus threat actor.
The Lazarus threat actor is one of the most active and sophisticated North Korean threat actors that has targeted several countries including South Korea, the U.S. and Japan in the past couple of years.
The group is known to develop custom malware families and use new techniques in its operations.
In this blog we documented a spear phishing attack operated by this APT group that has targeted South Korea.
The actor has used a clever method to bypass security mechanisms in which it has embedded its malicious HTA file as a compressed zlib file within a PNG file that then has been decompressed during run time by converting itself to the BMP format.
The dropped payload was a loader that decoded and decrypted the second stage payload into memory.
The second stage payload has the capability to receive and execute commands/shellcode as well as perform exfiltration and communications to a command and control server.
 September 17, 2021 - APT actors are exploiting a recently-discovered flaw in ManageEngine's self-service password management product.
 June 1, 2021 - Kimsuky, the North Korean threat actor active since 2012, is still targeting the South Korean government.
We take a look at the phishing infrastructure and command and control mechanisms of this APT.
 March 9, 2021 - The ProxyLogon vulnerability in Microsoft Exchange has moved from an Advanced Persistent Threat to cybercrime's new toy in record time.
 March 1, 2021 - On Lock and Code, we talk to Eva Galperin, director of cybersecurity for EFF, about the importance of defending online anonymity and speech.
Threat analysis | Threat Intelligence
 December 14, 2020 - Possibly the largest hacking operation of 2020 was just unveiled.
In this blog we share what we know and what you should do right now.
Want to stay informed on the latest news in cybersecurity?
Sign up for our newsletter and
                            learn
                            how to protect your computer from threats.
Imagine a world without malware.
Your intro to everything relating to cyberthreats, and how to stop them.
