Automatically investigate security alerts to reduce false positives.
Validate that security controls are working as expected.
Take decisive action with industry leading threat intelligence.
Fully map your entire environment to mitigate risks.
Defend your enterprise with managed detection and response.
Battle-test how well your security program performs.
Establish and properly orchestrate cyber defenses.
Train your security team to effectively protect your enterprise.
See case studies and customer testimonials.
Read expert perspectives and industry news.
Expand your cyber security knowledge base.
Listen to our State of the Hack, Eye on Security and Cyber Security Effectiveness podcasts.
Threat Intelligence from front line experts.
Explore the latest views on key threats, trends and predictions.
In May and June 2017, FireEye observed a phishing campaign targeting at least seven global law and investment firms.
We have associated this campaign with APT19, a group that we assess is composed of freelancers, with some degree of sponsorship by the Chinese government.
APT19 used three different techniques to attempt to compromise targets.
In early May, the phishing lures leveraged RTF attachments that exploited the Microsoft Windows vulnerability described in CVE 2017-0199.
Toward the end of May, APT19 switched to using macro-enabled Microsoft Excel (XLSM) documents.
In the most recent versions, APT19 added an application whitelisting bypass to the XLSM documents.
At least one observed phishing lure delivered a Cobalt Strike payload.
As of the writing of this blog post, FireEye had not observed post-exploitation activity by the threat actors, so we cannot assess the goal of the campaign.
We have previously observed APT19 steal data from law and investment firms for competitive economic purposes.
This purpose of this blog post is to inform law firms and investment firms of this phishing campaign and provide technical indicators that their IT personnel can use for proactive hunting and detection.
APT19 phishing emails from this campaign originated from sender email accounts from the "@cloudsend[.
]net" domain and used a variety of subjects and attachment names.
Refer to the Indicators of Compromise section for more details.
APT19 leveraged Rich Text Format (RTF) and macro-enabled Microsoft Excel (XLSM) files to deliver their initial exploits.
The following sections describe the two methods in further detail.
Through the exploitation of the HTA handler vulnerability described in CVE-2017-1099, the observed RTF attachments download hxxp://tk-in-f156.2bunny[.]com/Agreement.doc.
Unfortunately, this file was no longer hosted at tk-in-f156.2bunny[.
Figure 1 is a screenshot of a packet capture showing one of the RTF files reaching out to hxxp://tk-in-f156.2bunny[.
The XLSM attachments contained multiple worksheets with content that reflected the attachment name.
The attachments also contained an image that requested the user to “Enable Content”, which would enable macro support if it was disabled.
Figure 2 provides a screenshot of one of the XLSM files (MD5:30f149479c02b741e897cdb9ecd22da7).
One of the malicious XLSM attachments that we observed contained a macro that:
Figure 3 depicts the macro embedded within the XLSM file (MD5: 38125a991efc6ab02f7134db0ebe21b6).
Figure 4 contains the decoded output of the encoded text.
Figure 4: Decoded ZLIB + Base64 payload
The shellcode invokes PowerShell to issue a HTTP GET request for a random four (4) character URI on the root of autodiscovery[.]2bunny[.]com.
The requests contain minimal HTTP headers since the PowerShell command is executed with mostly default parameters.
Figure 5 depicts an HTTP GET request generated by the payload, with minimal HTTP headers.
Figure 5: GET Request with minimal HTTP headers
Converting the shellcode to ASCII and removing the non-printable characters provides a quick way to pull out network-based indicators (NBI) from the shellcode.
Figure 6 shows the extracted NBIs.
FireEye also identified an alternate macro in some of the XLSM documents, displayed in Figure 7.
This macro uses Casey Smith’s “Squiblydoo” Application Whitelisting bypass technique to run the command in Figure 8.
Figure 8: Application Whitelisting Bypass
The command in Figure 8 downloads and launches code within an SCT file.
The SCT file in the payload (MD5: 1554d6fe12830ae57284b389a1132d65) contained the code shown in Figure 9.
Figure 10 provides the decoded script.
Notice the “$DoIt” string, which is usually indicative of a Cobalt Strike payload.
Figure 10: Decoded SCT contents
A quick conversion of the contents of the variable “$var_code” from Base64 to ASCII shows some familiar network indicators, shown in Figure 11.
Figure 11: $var_code to ASCII
Once the XLSM launches its PowerShell command, it downloads a typical Cobalt Strike BEACON payload, configured with the following parameters:
Figure 12 depicts an example of a BEACON C2 attempt from this payload.
Figure 12: Cobalt Strike BEACON C2
The following FireEye products currently detect and block the methods described above.
Table 1 lists the current detection and blocking capabilities by product.
*Appliances must be configured for block mode.
FireEye recommends organizations perform the following steps to mitigate the risk of this campaign:
The following section provides the IOCs for the variants of the phishing emails and malicious payloads that FireEye has observed during this campaign.
BEACON and Meterpreter payload MD5 hash values
Process arguments, named pipes, and file paths
rule FE_LEGALSTRIKE_RTF {
			    meta:
			        version=".1"
			        filetype="MACRO"
			        author="joshua.kim@FireEye.com"
			        date="2017-06-02"
			        description="Rtf Phishing Campaign leveraging the CVE 2017-0199 exploit, to point to the domain 2bunnyDOTcom"
        $encoded1 = "4f4c45324c696e6b"
			        $encoded2 = "52006f006f007400200045006e007400720079"
			        $encoded3 = "4f0062006a0049006e0066006f"
			        $encoded4 = "4f006c0065"
        $http1 = "68{"
			        $http2 = "74{"
			        $http3 = "07{"
        // 2bunny.com
			        $domain1 = "32{\\"
			        $domain2 = "62{\\"
			        $domain3 = "75{\\"
			        $domain4 = "6e{\\"
			        $domain5 = "79{\\"
			        $domain6 = "2e{\\"
			        $domain7 = "63{\\"
			        $domain8 = "6f{\\"
			        $domain9 = "6d{\\"
    condition:
			        $header at 0 and all of them
			}
Joshua Kim, Nick Carr, Gerry Stellatos, Charles Carmakal, TJ Dahms, Nick Richard, Barry Vengerik, Justin Prosco, Christopher Glyer
