Recently, the FortiGuard Labs research team observed that a new variant of Poison Ivy was being spread through a compromised PowerPoint file.
We captured a PowerPoint file named Payment_Advice.ppsx, which is in OOXML format.
Once the victim opens this file using the MS PowerPoint program, the malicious code contained in the file is executed.
It downloads the Poison Ivy malware onto the victim’s computer and then launches it.
In this blog, I’ll show the details of how this happens, what techniques are used by this malware, as well as what it does to the victim’s computer.
Figure 1 shows a screenshot of when the ppsx file is opened.
As you can see, the ppsx file is played automatically.
The “ppsx” extension stands for “PowerPoint Show,” which opens the file in presentation mode.
This allows the malicious code to be executed automatically.
The warning message box alerts the user that it might run an unsafe external program.
Usually, the implied content of the document beguiles the user into pressing the Enable button.
Let’s take a look at the malicious code embedded inside this PowerPoint file.
OOXML file is a zip format file.
By decompressing this file we can see the file/folder structure, shown below.
Going into its .\ppt\slides\ subfolder, slide1.xml is the slide automatically shown in Figure 1.
The file “.\_rels\slide1.xml.rels” is the relationship file where the resources used in slide1.xml are defined.
In slide1.xml, I found the xml code:
This means that when the user's mouse hovers over this element, something named “rId2” in slide1.xml.rels file is executed.
Figure 3 shows the relationship between them.
The code defined in “rId2”
The code defined in “rId2” uses an echo command of cmd.exe to output vbs codes into the Thumbs.vbs file in the “Startup” folder of the Start menu.
This allows the Thumbs.vbs file to be executed when the victim’s system starts.
We’ll take a look at the content of this Thumb.vbs file below.
Thumb.vbs in the Startup folder and its content
Thumbs.vbs downloads a file from hxxp://203.248.116.182/images/Thumbs.bmp and runs it using msiexec.exe.
As you may know, msiexec.exe is the Microsoft Windows Installer program, which is the default handler of .MSI files.
Msiexec.exe can be used to install/uninstall/update software on Windows.
The MSI file is an Installer Package.
It contains a PE file (in a stream) that is executed when it’s loaded by msiexec.exe.
This PE file could be replaced with malware to bypass any AV software detection.
We have also observed that more and more malware authors have started using this method to run their malware.
The MSI file is in the Microsoft OLE Compound File format.
In Figure 5 we can see the downloaded Thumbs.bmp file content in the DocFile Viewer.
The downloaded Thumb.bmp in DocFile viewer
Next, I’m going to extract this PE file from the stream into a file (exported_thumbs).
By checking with a PE analysis tool, we can see that it’s a 64-bit .Net program.
This means that this malware only afftects 64bit Windows.
After putting this extracted file into dnSpy to be analyzed, we can see the entry function Main(), as shown in Figure 6.
It then calls the rGHDcvkN.Exec() function in Main(), which contains a huge array.
Actually, the data in the array is the code that is executed as a thread function by a newly-created thread.
Figure 7 clearly shows how the code in the array is executed.
.Net program runs a thread to execute the code in a huge array
If the code is run on a 64-bit platform, IntPtr.Size is 8.
So the huge array is passed to array3.
It then allocates memory buffer by calling rGHDcvkN.VirtualAlloc() and copies the code from array3 into the new memory by calling Marshal.Copy().
It eventually calls rGHDcvkN.CreateThread() to run the code up.
I started the .Net program in the debugger, and set a breakpoint on CreateThread API to see what the array code would do when it’s hit.
Per my analysis of the array code, it is a kind of loader.
Its main purpose is to dynamically load the main part of the malware code from the memory space into a newly-allocated memory buffer.
It then repairs any relocation issues according to the new base address and repairs APIs’ offset for the main part code.
Finally, the main code’s entry function is called.
Checking for breakpoints on exported APIs in “ntdll”
If one of the named pipes cannot be created, it means one of the analysis tools is running.
It then exits process soon thereafter.
These are all the ways that this malware performs anti-analysis.
Most of these checks run in their own threads, and are called every second.
It then exits the process if any check is matched.
To continue the analysis of this malware, we have to first skip these checks.
We can dynamically modify its code to do so.
For example, changing “IsDebuggerPresent”’s return value as 0 allows us to bypass the running-in-debugger detection.
By decrypting three strings and putting them together, we get the magic string "Poison Ivy C++", which will be saved in a global variable qword_1B0E4A10.
From the code snippet below you can see how it makes this string.
It next loads several modules from its encrypted data.
It creates a doubly-linked list, which is used to save and manage these loaded modules.
There are many export functions from each of these modules that achieve the malware’s main work.
In this way, it’s also a challenge for dynamic debugging.
The variable qword_1AFE45D0 saves the header of that doubly-linked list.
Each object in the list has the structure below:
It then decrypts and decompresses six modules one by one, and adds each of them into the doubly-linked list.
Figure 11 shows a code snippet from decrypting these six modules.
Each module has an Initialization function (like DllMain function for Dll files) that is called once the module is completely decrypted and decompressed.
Three of these modules have an anti-analysis ability similar to the one I described in the Anti-Analysis section above.
So to continue the analysis of this malware, I needed to modify their codes to bypass their detection function.
After that it calls the export functions of those modules.
It decrypts the configuration data from the buffer at unk_1AFE3DA0.
This configuration data is decrypted many times during the process running, and it tells the malware how to work.
I’ll talk more about the configuration data in a later section.
The malware then picks a string from the configuration data, which is “%windir%\system32\svchost.exe”.
It later calls CreatProcess to run svchost.exe, and then injects some code and data from malware memory into the newly-created svchost.exe.
It finally calls the injected code and exits its current process.
The malware’s further work is now done in the svchost.exe side.
Through my analysis I could see that the injected codes and data represent the entire malware.
It all starts over again in the svchost.exe process.
Everything I have reviewed about is repeated in svchost.exe.
For example, executing the anti-analysis detection code, getting the magic string, creating a doubly-linked list, decrypting six modules and adding them into the doubly-linked list, and so on.
It then goes to different code branch when executing the instruction 01736C2 cmp dword ptr [rdi+0Ch], 1 in module2.
[rdi+0ch] is a flag that was passed when the entire code was initialized.
When the flag is 0, it takes the code branch to run svchost.exe and inject code in it; when it’s 1, it takes the code branch to connect to the C&C server.
Before the injected code in svchost.exe is executed, the flag is set to 1.
Figure 12 shows the code branches.
The C&C server’s IP addresses and ports are encrypted and saved on the PasteBin website.
PasteBin is a text code sharing website.
A registered user can paste text code on it in order to share the text content to everyone.
The malware author created 4 such pages, and put the C&C server IP addresses and ports there.
Do you remember when I talked previously about encrypted configuration data?
It contains the 4 PasteBin URLs.
Figure 13 shows the decrypted configuration data.
If you access any one of these URLs, you will find there are normal Python codes on it.
The encrypted server IP address and port are hidden in the normal python code.
While looking at the main function you will find the code below:
win32serviceutil.HandleCommandLine({65YbRI+gEtvlZpo0qw6CrNdWDoev}), the data between “{“ and “}”, is the encrypted IP address and port.
See Figure 14 for more information.
Encrypted C&C IP address and Port on PasteBin
Let’s see what we can see after decryption in Figure 15.
Decrypted IP address and Port
From Figure 15, we can determine that the decrypted C&C server IP address is 172.104.100.53 and the Port is 1BBH i.e.
It should be noted that the IP addresses and Ports on the four pages are not the same.
The author of this malware can update these IP addresses and Ports by simply updating the python codes on the four PasteBin pages.
The malware starts connecting and sending data to its C&C server once it gets the IP address and Port.
All the packets traveling between the malware and its server are encrypted using a private algorithm.
The structure of the packet is like this: (the first 14H bytes is the header part, from 14H on is the data part)
Once the malware has connected to the server, it first sends a “30001” command, and the server replies with command “30003”.
The command “30003” requests the client to collect the victim’s system information.
Once the malware receives this command, it calls tons of APIs to collect the system information.
In Figure 16 you can see the collected system information before encryption.
Figure 17 shows the data after encryption as it’s about to be sent to the C&C server.
The first four bytes are used to encrypt or decrypt the following data.
Collected information from the victim’s system
Encrypted system information from victim’s system
From my analysis during the malware runtime, I could determine that the malware keeps obtaining the C&C server’s IP address from PasteBin and communicating with the C&C server in an infinite loop (by calling Sleep(1000) to suspend the execution).
So far, I only saw that the commands “030001” and “030003” are used.
I’ll continue to monitor and analyze the malware’s behavior to see what else it will do.
The FortiGuard Antivirus service has detected the files "Payment_Advice.ppsx" as MSOFFICE/PoisonIvy.A!tr.dldr and "Thumbs.bmp" as MSOFFICE/PoisonIvy.A!tr.
Sign up for weekly Fortinet FortiGuard Labs Threat Intelligence Briefs and stay on top of the newest emerging threats.

variant, 
    
      poison ivy variant, 
    
      PowerPoint, 
    
      fortiguard, 
    
      poison ivy, 
    
      adobe flash, 
    
      security analysis
Copyright © 2021 Fortinet, Inc. All Rights Reserved
