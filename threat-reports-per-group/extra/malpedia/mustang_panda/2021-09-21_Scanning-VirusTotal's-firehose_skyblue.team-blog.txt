Let’s say one of your adversaries is known for using a given malware family, custom or off-the shelf.
Even if the coverage is biased and limited, samples on VirusTotal (VT) are the low-hanging fruits that keep on giving.
At $WORK, we are lucky to have access to the Virus Total feeds/file API.
This API endpoint is the firehose of VirusTotal: it allows downloading each sample submitted to VT in pseudo-real-time.
The feed is unfiltered (we are not talking about VT’s LiveHunt feature) so the volume is HUGE.
We set the crazy objective to extract and push IOC in real-time for a given malware family submitted to VirusTotal.
For this blog post, as an example, we will focus on Cobalt Strike.
Initially, we used our on-premises infrastructure with 2-3 servers.
Quickly, the operational maintenance killed us:
Taking a step back, it jumped out at us that this was a textbook example for a Serverless architecture.
It was easy to refactor our on-prem code into self-contained functions and glue them together with Amazon SQS:
The platform has been running smoothly for 18 months, and from an operational point of view, we love it:
For those who like numbers, here is a screenshot of the activity of the last 6 months:
We are using CobaltStrikeParser from Sentinel One to parse the beacons, then we are sending the JSON output to our Splunk instance.
There are two uses of this data:
For Threat Hunting perspectives, we implement alerting for things like:
Regarding proactive Defense, there is currently no automatic pipeline to push the IOC into a WatchList/DenyList for one reason: it is not uncommon to see trolling BEACONs using legitimate and “assumed safe” domains.
To mitigate that, we plan to have a kind of Slack/Mattermost bot that will make us approve each entry seamlessly.
