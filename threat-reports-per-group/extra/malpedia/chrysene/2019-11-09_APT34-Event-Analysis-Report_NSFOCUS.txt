We understand that when you are under attack you need help immediately.
Our team of security experts are available to get you back online and help ensure your critical assets are protected.
On April 18, 2019 a hacker/hacker organization sold a toolkit of the APT34 group, under the false name of Lab Dookhtegan, on a Telegram channel.
The organization also posted screenshots of the tool’s backend panels, where victim data had been collected.
Early in the middle of March 2019, this hacker/hacker organization had released and sold this toolkit on the Internet.
Interestingly, the CEO of a security company in Kuwait took to Twitter to stress in particular the authenticity of this post.
Tools included in the leaked toolkit are listed as follows:
NSFOCUS Security Labs and NSFOCUS M01N Security Research Team made an analysis of this toolkit together and found that tools included in the leaked toolkit differed from the previously released attacks tools of the APT34 group.
In this report, we have made a detailed analysis of the leaked tools from the perspectives of tactics, techniques and procedures (TTPs).
In addition to countries in the Middle East, APT34 has also hit China Mainland,  China Taiwan, Turkey, Albania, and other countries and regions.
China Mainland and China Taiwan both received a large proportion of attacks.
The released toolkit also contains a lot of passwords which are packaged and released in different archives according to information sources.
From the above figure, we can see that the archive names contain airport names and oil company names.
More than 12,000 weak passwords were disclosed this time.
The APT34 group, named by FireEye, uses tools and attack approaches that bear a high resemblance to the OilRig organization, an organization active in the Middle East followed up by Palo Alto Networks.
The APT34 group started to carry out malicious activities as early as in 2014, targeting governments and the financial, energy, chemical, and telecom sectors.
This group, though often seen in the Middle East, also hits China, as indicated in files leaked this time.
On November 4, 2017, FireEye discovered that this group exploited the vulnerability (CVE-2017-11882) to launch attacks by leveraging tools similar to those leaked this time.
During the functional analysis of APT34’s leaked sample, we have ascertained the attack tactics and techniques used by this hacking group, via a reverse deduction based on attack procedures.
Overall, four phases of the kill chain are involved: privilege escalation, collection, exfiltration, and command and control.
This leaked sample uses multiple WebShell backdoor programs like HighShell, HyperShell, and MinionProject, each of which is a .NET program.
Some of these programs encrypt the communications in order to evade defense measures.
By reference to the tool use record documents included in the leaked files and the list of websites compromised by APT34, we can see that this hacking group mainly uses these WebShell programs, placed in /owa/auth/, to target the Outlook email system of the Exchange server.
This sample’s attack targets are found all around the world, including 14 enterprises in the energy and securities sectors in the Chinese mainland.
By the time this report is released, some of those WebShell backdoor programs are still active.
The following figure shows WebShell backdoors targeting companies in China:
The following table lists URLs of active WebShells:
Our Webmask analysis of this leaked sample mainly focuses on attacks against Outlook.
Through the analysis, we found that such attacks used the email connection and man-in-the-browser (MITB) technologies.
Also, we dissected the sample’s source code and instructions and discovered that this tool could steal users’ email account passwords and cookies for Outlook authentication as well as inject code into traffic for further information collection.
In this phase, the Exfiltration Over Command and Control Channel tactic is applied.
The attacker sends sensitive data to the controlled server using a DNS protocol through command and control, in a way to avoid information disclosure due to common data loss prevention techniques.
The leaked sample used two remote access Trojans (RATs), poisonfrog.ps1 (old version) and Glimpse (dns_main.ps1) (new version), for remote control of the target server by using a DNS protocol for communication.
After a sample analysis, we found that both versions of RATs used PowerShell as an agent for code execution, and prior to that, the RATs needed to hijack the victim’s DNS server for DNS redirection in order to parse the domain name suffix designated by the attacker.
By generating a subdomain with a specific algorithm, the victim’s machine performs a DNS query to request an A/TXT record of the subdomain from the DNS server (C2 server) and obtains the IP address provided by the C2 server for communications.
In addition, the attacker will create a scheduled task to execute the PowerShell script regularly to obtain information from the C2 server before executing commands.
The C2 server mainly provides command execution and file upload and download functions.
The C2 server of the old version already implements proxy detection and can download files from the remote server for web proxy configuration.
The old version only supports the query of DNS A records and generates subdomain names that contain part of the UUID (Universally Unique Identifier) value of the victim’s system.
The C2 server of the new version does not involve proxy configuration and deems that the DNS hijacking is already completed.
It can parse DNS TXT records and generate subdomain names that do not contain the UUID value of the victim’s system.
The following figures show the directory structure of each tool used by this leaked sample:
When sorting out files and trying to reproduce the sample, we found that remote control tools had an incomplete logic which renders one-click deployment impossible.
These tools can run properly only after an analysis and reconfiguration is completed.
MinionProject, however, cannot directly execute due to the lack of files.
To sum up, we believe that the leaked toolkit is incomplete, which should be noted during analysis of the toolkit.
So far, no backdoor is discovered left by the leaker.
Glimpse is a remote control tool that uses DNS tunneling.
It consists of an agent, a panel, and a server.
The agent is a program at the controlled end.
The startup script is runner_.vbs which is used to start the main script of PowerShell.
The main script is dns_main.ps1 used for communications with the server.
The following table lists commands from the server.
The panel is the graphic panel of Glimpse, used to manage the communications between the agent and the server.
The server issues commands to the agent, instructing it what to do next.
The server uses a DNS tunneling protocol for communications, issuing commands to the agent or receiving files uploaded by the agent via the DNS tunnel of the A or TXT type.
For a false DNS request, the contents are in the format of data.mainData.mainData2.mainData3, each part of which contains different contents.
If the data contains the trailing string CxxT (x indicates arbitrary characters), the server determines that the data is based on a tunneling protocol.
If the data contains the trailing string in other formats than CxxT, the server forwards the data.
datarand: records the action and aid.
The data location is variable and determined by both reqNoIndex and actionIndex.
aid: ID of the packet, based on which the server directory is generated on the server.
action: action of the agent.
mainData: saves the body of the command file.
mainData2: saves the command file name.
mainData3: saves the domain name of the C&C server.
The server is a forged DNS server which responds to the agent’s DNS requests by returning designated IP strings.
Different IP strings have different meanings, as shown in the following table.
PoisonFrog is a remote control tool that can steal information from the controlled server and execute CMD commands issued by the C&C server.
The following figure shows part of contents of the poisonfrog.ps1 script.
This script is mainly used to send data to the C&C server and receive commands and files from this server.
When cfg.ini exists, the hUpdater.ps1 script will read contents from this file to extract the proxy and communicate with the C&C server in proxy mode.
As for command format parsing, the hUpdater.ps1 script obtains strings from the C&C server and splits them into four or more arrays with angle brackets.
SSA[0]<>SSA[1]<>SSA[2]<>SSA[3]<>SSA[4]<>SSA[5] is such an example.
In the string, each array corresponds to a different response function.
For instance, when SSA[2] has a value other than not, it downloads files to a specified directory.
The following table describes functions of these arrays.
The dUpdater.ps1 script parses the trailing character in the file name located first during the traversal of the receivebox folder, as a command.
The following table describes the mapping between commands and the script’s functions.
The scripts are used to assemble commands (e.g.
Each function has its own function.
This tool is used by the APT34 group as a DNS proxy and for HTTP hijacking.
This tool consists of three parts:
This module starts the local DNS proxy.
The configuration file and the IP address of the proxy server are specified with startup parameters.
By default, the script only does DNS forwarding.
The DNSd module can be started using the python script (dnsd.py) or JavaScript (dnsd.js).
guide.txt explains two way to use the DNSd tool.
This module is a tool written in PyICAP.
PyICAP is a python3 framework for writing ICAP servers.
ICAP is usually used to extend transparent proxy servers, implementing content filters in the transparent HTTP proxy cache and performing specific services (can be specified by developers) for HTTP requests/responses.
The extract_login_password method is used to steal account passwords included in HTTP information and record them in a designated file.
It extracts data in HTTP requests using regular expressions.
Meanwhile, this tool records header information involved in HTTP interactions, including the user’s IP address, request time, requested content, and recorded cookies.
When analyzing the tool code, we found hijacking code, i.e., the following JavaScript statement:
When the hijacking code executes, the first img src leads the victim’s machine to access logo.jpg on the attacker’s server.
During the process, NTLM authentication will be conducted automatically to allow the attacker to obtain the NetNTLMv2 hash which can be used for man-in-the-middle (MITM) attacks.
Assume that the attacker has taken control of the proxy.
In this case, he can use his server to respond to DNS requests to WPAD, and then answer requests to obtain images that are actually PAC files.
The Webshells_and_Panel directory contains multiple WebShell tools written in C#:
simpleDownload.aspx: a simple tool only with the upload function.
simple.aspx: a relatively complicated tool to provide authentication and command execution functions besides the upload function.
highshell.aspx: a full-featured tool that seems like the first version, providing functions like file upload, command execution, and database manipulation.
This version of tool was reported by Palo Alto Networks in 2017.
This tool implements login authentication as follows:
The following shows how login authentication is implemented via pseudocode:
Base64(sha256(bytes(cookies[“p”] + salt))) == pp
Both salt and pp are predefined values.
The configured cookie value can be used for authentication.
In addition, we have found multiple upgraded versions (minor differences exists between them) of HighShell in the Hypershell directory.
The following figure shows HighShell 8.6.2.
This version of tool is rewritten with the Semantic UI framework and its backend has been split into several modules.
Arguably, this version goes further in engineering than common versions.
Like other versions, this version performs authentication based on cookies.
Identifier: Leaked APT34 / OilRig tools
description = “Detects APT34 PowerShell malware”
$x1 = “= get-wmiobject Win32_ComputerSystemProduct  | Select-Object -ExpandProperty UUID” ascii
$x2 = “Write-Host \”excepton occured!\”” ascii /* 🙂 */
$s1 = “Start-Sleep -s 1;” fullword ascii
$s2 = “Start-Sleep -m 100;” fullword ascii
1 of ($x*) or 2 of them
description = “Detects APT34 PowerShell malware”
$x1 = “= \”http://\” + [System.Net.Dns]::GetHostAddresses(\”” ascii
$x2 = “$t = get-wmiobject Win32_ComputerSystemProduct  | Select-Object -ExpandProperty UUID” fullword ascii
$x3 = “| Where { $_ -notmatch ‘^\\s+$’ }” ascii
$s1 = “= new-object System.Net.WebProxy($u, $true);” fullword ascii
$s2 = ” -eq \”dom\”){$” ascii
$s3 = ” -eq \”srv\”){$” ascii
$s4 = “+\”<>\” | Set-Content” ascii
1 of ($x*) and 3 of them
description = “Detects APT34 PowerShell malware”
$x1 = “Powershell.exe -exec bypass -file ${global:$address1}”
$x2 = “schtasks /create /F /ru SYSTEM /sc minute /mo 10 /tn”
$x4 = “wscript /b \\`\”${global:$address1” ascii
$x6 = “.run command1, 0, false\” | Out-File ” fullword ascii
$x7 = “\\UpdateTask.vbs” fullword ascii
$x8 = “hUpdater.ps1” fullword ascii
Check whether there are abnormal DNS parsing server addresses.
Check whether machines within the network send a great number of DNS requests every 50 ms.
Check whether there are abnormal domain name requests.
Check whether the following directories or files exist on hosts:
Check whether DNS server addresses are tampered with on hosts.
Check whether unknown files exist in the root directory of the HTTP server.
OilRig Performs Tests on the TwoFace Webshell
OilRig Uses Updated BONDUPDATER to Target Middle Eastern Government
ALL RIGHTS RESERVED PRIVACY POLICY | TERMS OF USE | LEGAL TERMS AND CONDITIONS
