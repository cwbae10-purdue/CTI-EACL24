Vitali Kremez revealing how TrickBot’s hooking engine targets Chrome, Firefox, Explorer and Edge in Windows 10.
TrickBot banking malware remains one of the more interesting and continually developing malware on the financial crimeware landscape.
It employs multiple means and methods to exploit compromised machines of interest.
The focus of this post is to cover in-depth some of its Windows 10 Microsoft Edge and other browser hooking engine functionality.
We will focus on the internals, and how TrickBot leverages these browsers to set up hooks for API calls of interest.
The ultimate goal of the malware browser hooking is predominantly to intercept online banking credentials before they become SSL encrypted.
The stolen credentials can subsequently be used for account takeover (ATO) fraud.
Since Windows 10 came with a new browser, “Microsoft Edge”, TrickBot operators needed their banking malware to operate on that software.
To implement form-grabbing and web injections in the Windows 10 Edge browser, TrickBot’s rogue rtlbroker hooks the microsoftedgecp.exe process.
Normally, runtimebroker.exe is the parent process of the Microsoft Edge browser on Windows 10 machines.
In order to hook browser functions, TrickBot malware injects the payload into the browser of choice via the so-called “ReflectiveLoader” methodology.
The TrickBot process injection function targets four browsers from Microsoft Edge to Google Chrome and one Microsoft Edge related process.
TrickBot injects the malware targeting the following processes:
The malware also “relaxes” browser security and write changes files locally before injection occurs.
TrickBot’s reflective injection works as follows:
When the TrickBot banker hooks the API function, it enters the new hooked one and checks to make sure the process is microsoftedgecp.exe while passing control to the original one when the hooked function concludes.
The basic TrickBot banking API hooking template is as follows:
By and large, TrickBot hooking engine works via overwriting the basic API with the redirect functions with the 0xe9 opcode, which is the call for a jump with 32-bit relative offset.
TrickBot uses a trampoline function and the write hook call with the VirtualProtectEx API to make sure that the function has the 0x40 (PAGE_EXECUTE_READWRITE) property.
Additionally, it attempts to conceal detection of this hooking technique via prepending NOP and/or RETN.
The exact TrickBot hook pseudo-code is as follows:
For instance, TrickBot malware sets up its own custom myCreateProcessA function prototype after the hook on CreateProcessA.
The idea is to catch any instance of microsoftedgecp.exe execution to intercept it for subsequent injection.
This function ultimately returns the flow back to CreateProcessA after intercepting and collecting necessary process execution information.
The following four API calls being hooked are in the child Microsoft Edge via rogue rtlbroker.dll, allowing TrickBot operators to intercept and manipulate Microsoft Edge calls:
TrickBot hooks Internet Explorer and Microsoft Edge in wininet.dll library API calls:
The malware hooks Mozilla Firefox Browser in nspr4.dll  library API calls:
It hooks Chrome in chrome.dll library API calls:
Get notified when we post new content.
Keep an eye out for new content!
In the era of interconnectivity, when markets, geographies, and jurisdictions merge in the melting pot of the digital domain, the perils of the threat ecosystem become unparalleled.
Crimeware families achieve an unparalleled level of technical sophistication, APT groups are competing in fully-fledged cyber warfare, while once decentralized and scattered threat actors are forming adamant alliances of operating as elite corporate espionage teams.
Get notified when we post new content.
Keep an eye out for new content!
