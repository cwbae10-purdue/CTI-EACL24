
											Easy to install, simple to use, for total protection and peace of mind.

											Fast, powerful and easy-to-manage protection for businesses of all sizes.
This November, we monitored a rise in Trickbot campaign activities.
Based on Threat Analyzer results, the new variants still have almost the same payload behavior which were previously discussed in https://labs.vipre.com/trickbot-aka-banking-malware/ and https://labs.vipre.com/trickbot-and-its-modules/.
A quick glance at the physical structure of a particular Trickbot variant, the malware file’s features contain heavily obfuscated code.
In this post, we’lll show what we found out focusing on the properties and initial activities that this particular Trickbot variant does before reaching its payload (info stealing) activities.
Our aim is to identify what were in it’s bag of tricks.
Below are information we found about this malware file and its URL source which were related from ThreatIQ (https://www.vipre.com/products/business-protection/iq/)
Compiled with Microsoft Visual C++ 8 according using CFF Explorer.
Initially, the import table shows that this malware will be using cryptography APIs:
CryptReleaseContext
CryptDestroyKey
CryptEncrypt
CryptImportKey
CryptAcquireContextA
It starts with a new image
The code jumps right away to decrypting data from the data section.
The data size is 0x3e200 (254,464) bytes
The key is hard coded.
The following code shows the that it uses RSA/RC4 decryption algorithm.
Decrypted data results in a 32-bit PE file and gets mapped in a virtually allocated memory space.
Code execution is passed to the image’s entry point.
The new image contains heavily obfuscated code and data.
This PE image itself is not recognized as a known compiled program nor a known packed executable.
Almost every routine code that Trickbot executes requires to be decrypted, executed, then encrypted back using the following function:
The same algorithm is used when decrypting and encrypting.
This apparently slows down the analysis during reverse engineering.
So far, the algorithm uses single-byte encryption.
Calling this function only requires a command ID.
For example, the command ID 0x2C would return a given string ID while the command ID 0x22 is tasked to terminate a running service process.
The command ID is actually a value used to calculate for the offset of the function it will be running.
This code execution behavior aims to prevent analysts from easily analyzing the dumped process.
Usually, an obfuscated malware decrypts its code and data in the process memory space and leaves it as is.
An analyst can easily dump the process and reconstruct the dump file for easier analysis using disassemblers and decompilers.
The Trickbot authors were clever enough to implement this technique against reverse engineering.
Before it proceeds, Trickbot would need to dynamically import a list of APIs it will be using.
Notice that it will be using two Wow64 functions.
This means that it is aware of running in either 32-bit or 64-bit environment.
Use heaven’s gate code to pass execution control to the 64-bit image’s entry point.
Heaven’s gate is the term for the technique used to directly pass code execution from 32-bit to 64-bit.
This involves a low-level understanding of how Wow64 is able to run 32-bit programs in 64-bit Windows.
More explanation about the Heaven’s gate can be found at http://rce.co/knockin-on-heavens-gate-dynamic-processor-mode-switching/.
Further, the following code passes code execution to the entry point of the 64-bit PE image at address 10001a20.
Essentially, the job of routine e is to run this program in an escalated privilege bypassing even the UAC.
Routine f expects that it is already running in an escalated privilege giving either the 32-bit or 64-bit greater access for compromising the system.
IOCs based on this analysis
VIPRE Security protects customers from Trickbot across all builds of VIPRE.
VIPRE uses advanced process protection and machine learning to protect against the latest threats trying to penetrate corporations worldwide.
Using the latest state of the art technology, VIPREs Engine protects customers 24×7, no matter where they reside.
For an efficient analysis, we used Threat Analyzer (https://www.vipre.com/products/business-protection/analyzer/) to list down program behaviors along with risk assessments.

VIPRE Labs
                                            The power behind the malware analysis, detection and remediation technologies developed by VIPRE Security.
Our team of cybersecurity professionals, malware researchers, engineers and software developers work around the clock to discover and combat Advanced Persistent Threats, targeted attacks, Zero-days and other sophisticated malware.

            Due to the COVID-19 pandemic, the popularity of Zoom, a video conferencing software program, has grown significantly.
Corporations and schools have transitioned to a work-from-home setup, relying on…

            Kaseya, an IT Management company that provides remote software management services, announced that their system was compromised.
On July 2, there were reports from their customers that a…

            Recently, we came across a massive amount of spam emails that contain a .zip attachment and uses a typical social engineering scheme like payment/invoice notification to lure their…

					©2017 VIPRE Security, All rights reserved.
