TRICKBOT is an info-stealer/banking trojan which is currently under active development and has various modules to grab credentials, move laterally, steal data and provide remote access.
I recently spent sometime walking through this so I've compiled a few tools/techniques out there to decode and analyse each of the TRICKBOT modules - its super simple and very effective!
The idea here is to provide awareness, help with detections and aid incident response.
I'm no reverse engineer but I get enough done to produce a few IOCs and some basic understanding of it's functionality to scope response.
It's all about that context!
I can see where a lot of the OSINT reports on TRICKBOT are compiled from now.
Another post can be made on the original infection vector, created persistence, removal and other network related IOCs from PCAP data.
Once you have those downloaded, its just as easy as follows;
1️⃣ Run the BOTKEY retrieval on the infected host.
2️⃣ Once you have that, specify and decode.
config_decode.py --botkey {KEY} --datafile C:\Users\USER\AppData\Roaming\gpuDriver\Data\pwgrab64
This will dump the decypted .dll ready for analysis.
Do this for each module.
Repeat this step for the config files in the module named folders.
3️⃣ Run through with FLOSS and redirect to an output file if needed floss32.exe C:\Users\USER\AppData\Roaming\gpuDriver\Data\MODULE.dll > MODULE.txt
These are the updated versions I was playing with on my infected host.
Just to give a rough understanding for each modules output I've dumped interesting strings.
Most of the output seen here matches the OSINT reports I've read.
TRICKBOT's core modules at the time of writing;
Also of note: there is the main configuration file at C:\Users\*\AppData\Roaming\gpuDriver\Data\settings.ini but I was unable to decode via the scripts from hasherade's repo - more reversing/unpacking is needed and will save that for another post.
Using Process Hacker to analyse the hollowed out the SVCHOST process memory you can see similar results anyway:
I had previously captured a bigger list upon process start up and saved that which provides more connections (probably downloading the latest config verison?
See bottom for more IOCs.
Also, analyse Wireshark/PCAP data for the User-Agent it uses when POSTing back data from the infected host.
Quickly quering those C2 addresses, most seem to have a commonality of MikroTik based devices - either that or Shodan is misrepresenting that port.
Further digging can be done later on this.
Back to the string analysis of the TRICKBOT modules...
Basic information on the host.
Noticed the registry key lookup to gather installed applications aswell as WMI queries.
Gathers system information and network/domain topology - you can see what is being leaked.
Seems to be enumerating or looking for Administrative accounts which is all then reported back to the C2.
These are high end targets to steal financial details from, think tills, kiosks, payment terminals.
Pro-actively finding and securing these in your environment could help prevent further damage - patch, use unique local Administrative credentials, segregate (VLAN/FW), disabled ADMIN$ shares etc.
You can see the keyword searches via LDAP/AD.
Downloads a .png (.exe) from hxxp://54.38.127[.
]23/worming.png the TRICKBOT loader to prep for lateral movement.
Also, checks to see if the host is in a domain or not by using LDAP queries.
Seems to use lateral movment via shares T1077 using pysmb library.
pysmb is an experimental SMB/CIFS library written in Python.
It implements the client-side SMB/CIFS protocol (SMB1 and SMB2) which allows your Python application to access and transfer files to/from SMB/CIFS shared folders like your Windows file sharing and Samba folders.
Downloads the TRICKBOT loader, transfers over to ADMIN shares and creates persistence via services using a naming convention from the list "ControlInfoService" etc - needs confirming.
Also note the 'WormShare' function name.
Grabs passwords from various spots, seen here querying Chrome/IE password storage.
OSINT reports suggest RDP (CredEnumerateA API ref), VNC and Putty.
Used for injecting into banking websites to steal credentials.
Notice how it weakens Chrome Browser via Software\Policies\Google\Chrome\CertificateTransparencyEnforcementDisabledForUrls
Disables enforcing Certificate Transparency requirements to the listed URLs.
This policy allows certificates for the hostnames in the specified URLs to not be disclosed via Certificate Transparency.
This allows certificates that would otherwise be untrusted, because they were not properly publicly disclosed, to continue to be used, but makes it harder to detect misissued certificates for those hosts.
CertificateTransparencyEnforcementDisabledForUrls
You can see this is the main module and purpose of TRICKBOT (steal credentials/data) so this is made up of more configuration files then any other module.
dinj and sinj are made up of a dozen more banking websites and shopping sites such as Amazon.
Browser artefact grabber, form-data, cookies, history.
Profiles the installed browser/s via an html/jscript https://gist.github.com/sneakymonk3y/4c372ec9b6b90e445c81de7d9ecaffd9
Remote Control - VNC module.
Could be similar tooling such as http://vncproxy.sourceforge.net/proxy.html.
Outlook is being referenced - not sure if this is more a screen grabbing module for reading emails/security codes?
OSINT reports as reverse shell.
Will confirm later with network traffic/PCAP analysis.
Very quickly you can gather IOCs and some basic understanding of the malware.
Obviously further analysis on network traffic and stepping through the unpacking of the malware will result in any missed bits of information but requires reverse engineer lv.2 🥇🥇
TRICKBOT can be a real pain and while doing this research it was even in the US news - taking a school offline.
If you do detect a TRICKBOT infection in your environment, the likely hood is with, you have an EMOTET problem too - so one to be aware of and check that out.
Trickbot normally has its own malspam-based distribution channel, but now Trickbot attackers are also using Emotet for their infections.
2019-05-16 - #Emotet still doing #Trickbot as the follow-up malware this week, it seems.
With the rate of modules being developed by TRICKBOT, understanding the impact it can have on your environment is key for defense.
Hopefully this helped you understand the threat TRICKBOT imposes and has spurred you on to look in these various areas to proactively harden what 'TRICK' is looking for to ultimately steal.
With the added 'access-as-a-service' which criminal groups are providing nowdays, your TRICK infection might turn into something else.
Happy to hear any further information I've missed or is key for defenders 😎.
Read more posts by this author.
Some further TTPs used by TRICKBOT [1] from an infected host that I thought was interesting to share.
The sample used here is from an EMOTET to TRICKBOT infection "GTAG:mor14"
What are the best recommendations to a completely vulnerable, easily pwnable network?
