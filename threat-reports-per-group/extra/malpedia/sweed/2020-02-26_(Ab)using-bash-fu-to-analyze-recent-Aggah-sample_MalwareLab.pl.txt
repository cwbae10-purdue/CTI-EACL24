Recently one of my generic signatures for malformed documents was hit, this type of malformation was used mostly by Zebrocy so i was curious whats cooking.
After some analysis it turns out that last stage uses tools that are publicly attributed to Aggah, but to get that we need to tear through multiple layers of downloading scripts.
We probably could just run our lure document and collect dropped binaries in a sandbox but where is fun of that?
Let’s do some work and abuse bash in order to obtain next stages!
File that cought my attention is 47625e693220465ced292aefd7c61fffc77dedd01618432da177a3b89525be9b uploaded with a name Updated Pre-Contract.docx from Honk Kong.
File is broken its missing one byte and libreoffice refuses to open it, but we can easly fix that!
and we are presented with very blurred jpg embedded in document
we can also skip fixing phase and use 7zip to unpack content of the file, but we need screenshot of a doc right?
Anyhow looking into file with 7zip is always a good idea which may give a clue what to look for
What stands out immediately is a date of word/_rels/settings.xml.rels so this doc is most likely abusing Ole2Link property to load remote content,
You can find this simple script here
We got a next stage 17a8d46df8cdf7db3f9996a25dce7c78abb0cef0d7d55d94d39caf880801466b.
Ugh a lot, but all of them contain the same macro,
Here we should propably turn into python library that can view or manipulate xml files such as xlrd but this time we are lucky, applying strings(1) on ole files quickly yields an powershell code
after reversing string, we got proper code,
All of the OLE files have the same ps payload but we should verify that!
Next stage (854a0a9603b288cdf01fdcd0cc7feffb8393d35a80fca6ad981575cbe207aee4) is a JScript, lets take a look.
This script will fire encoded powershell and clean all files dropped after it execution.
Using WMI instead ordinarily spawning a cmd.exe is a nice addition.
fact.jpg (59012e676ed866ba013b1d950d1ef0558d7ea09e0a764ff65ee5b43663e918ea) is just a text file with hex encoded powershell separated by dashes
Here we need to cheat a little and abandon bash as its very slow to decode this big file (4.7MB) byte-by-byte.
So we turn to python for help
here is cleared code of the script
This script will load into memory 3 binaries, two of them compressed one not, based on a script we can assume that the last one is the final payload and others are used for loading.
While dealing with .NET malware dnSpy is your best friend, and while it doesn’t have a flashy gui when used under Linux systems we can still use it to quickly asses whats going on using its console version and mono.
After decompilation and looking into <Module>.cs file we can see a control flow obfuscation known as CFG flattening typical to ConfuserEX so lets remove it using modifed de4dot.
Much better, but still nothing obvious to determine family and C2 address.
At the top of the now cleared <Module>.cs we can see a decryption function
and a huge blob of ints shortly after, lets make an educated guess and try to decode this blob.
You can find those strings here.
In those strings we can find bunch of hints from which software this malware steales data from but mosty we can find informations about C&C server.
further examination of strings and code reveal its Agent Tesla.
At that point i had no idea what I’m actually look at, so i start pivoting - Agent Tesla with confuser is way to generic but loader with a unknown packer can be something unique.
If you look closely into Guwav/Properties/AssemblyInfo.cs you can find very strange definition
this sounds like a great pivot!
Indeed it is, soon after querying for metadata:"kernel32||CreateProcessA||GetThreadContext||Wow64GetThreadContext||SetThreadContext||Wow64SetThreadContext||ReadProcessMemory||WriteProcessMemory||ZwUnmapViewOfSection||ntdll||VirtualAllocEx||ResumeThread" on VT we will find this
While this is hardly any proof, its a hint for a direction.
After examine the files from VT and the one described in Yoroi’s blog post and comparing to my loader i reached a conclusion that it is indeed the same one.
However this loader can still be used by other parties, but while this campaign is quite different that the one previously described one can find some similarities such ash
With all that in mind i would say with medium confidence that this is another campaign from Aggah stable
When dealing with a many script based droppers using bash tools such as grep, send and awk can be a tremendous help, and since most of those encodings are used in in one or two campaigns there is no real need to create tons of throw-away scripts.
This static method of analysis is obviously more tedious and time consuming than throwing things into sandbox and just read the results it may reveal artifacts that would be missed in automated analysis.
Artifacts such as childish use of putin and mossad keywords.
Another curious thing that we would probably missed is password for ftp account, same password was mentioned in a PAN’s Unit42 blog post few years back, this password is unique enough to give a clue of possible history of the group or operator.
© 2020
Powered by Hugo, theme Anubis.
