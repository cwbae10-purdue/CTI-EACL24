
This blog for publishing full technical analysis of current malwares, so it helps companies, researchers easy understand malwares, how malware works, and how to cover themselves from it.
The
following table contains list of artifacts that had been analyzed within this
document.
Agent
Tesla is spyware that collects information about the actions of its victims by
recording keystrokes and user interactions.
It is falsely marketed as legitimate
software on the dedicated website where this malware is sold.
Code
of malware is packed, so after unpacking it you should see only these sections
as shown in figure below.
It
resolves QWzgdyIDcJlMs during runtime and code
will be around 25k lines of code as shown in figure below.
It
checks for the operating system as shown and gets a hash of the current domain
in figure below.
It
gets the hostname, processor type, name of current user as shown on figures
below.
It
enumerates network adapter configuration as shown in figure below.
It
gets the mac address of the machine as shown in figure below.
Get current process of
malware
Enumeration
functions in folder path "C:\\Users\\Mahmoud_El_Menshawy\\AppData\\Local”,
used for stealing browsers caches, passwords, profiles etc... As shown in
figure below.
stealing
browsers caches, passwords, profiles etc... As shown in figure below.
Iridium Browser user data and
logins
Vivaldi browser user data and
logins
Torch Browser user data and
logins
Comodo Dragon user data and
logins
Opera Browser user data and
logins
Citrio user data and logins
Elements Browser user data
and logins
Sputnik user data and logins
Epic Privacy  user data and logins
CentBrowser user data and
logins
Uran user data and logins
Chromium user data and logins
Chedot user data and logins
360 Browser user data and
logins
Yandex Browser user data and
logins
7Star user data and logins
Cool Novo (ChromePlus) user
data and logins
Chrome user data and logins
Purpose
of the code is to get malware configuration like username, password mailfrom
etc...
Code
of ((97085277-F30F-47FA-9C3D-82DA9E6730B4) shown
in figure below.
Probably
this is related to anti debugging, it creates
specified time after time expires then it does something if not expire it runs
normally.
It
hides debugging for editing browser state.
Enumeration and other
important Functions
All
configurations depends on big array called <<EMPTY_NAME>>
Let’s
go in depth of code.
Let’s
go to the function Bx().
<<EMPTY_NAME>> is an array of bytes.
When
I did more research I found reference to this array as shown in figure below.
So
<<EMPTY_NAME>> is really big array
around more than 11k line
So
it gets each element of the big array then XOR with
itself then XOR with
value 170 and save it to array.
<<EMPTY_NAME>> (overwrite
array with new value) as shown in figure below.
So
let’s see big array
So
the value of (byte.MaxValue) will be 255 as shown in figure below.
So
at this point everything is okay but only problem is string called
,"Notshowingallelementsbecausethisarrayistoobig(11846elements)" At
the end of array.
So that means we don’t
have all values of bytes of array which means we can’t reverse the array to get
string <<EMPTY_NAME>> which will be
resolved after finishing the loop.
I
tried to create array of bytes but it display error called “cannot implicitly convert
type string to byte”
That’s mean we don’t have complete elements of array
Let’s
see decryption function of malware and how to get host
That’s
the beginning of the SMTP function.
So
class call function Bx() as shown in figure
below.
If
we go through Bx() we see this code.
So
it pushes an array called <<EMPTY_NAME>>
with parameters (151, 1888,
25) and the return value will save at an array
called <<EMPTY_NAME>> [151].
<<EMPTY_NAME>> with parameters (151, 1888, 25)
151 =>
refers to the save position of the first array.
1888 =>
starting counting position of big array which was already mentioned at the
beginning of report.
So
that means it starts from the position of array 1888 until
1913.
So
length of host name will be 25
So
let’s go inside <<EMPTY_NAME>>
EMPTY_NAME>> with parameters (151, 1888, 25)
Num
=> 151, index => 1888,
count => 25.
So
we hit if condition if (num2 ==0){num2 =1}
So
value of num2 will be 1
If
value of num2 = 4 exit while loop otherwise continue looping
Value
of num2 = 1.
If
(num2 == 1) {num2 =2}
So
value of num2 will be 2
Then
continue looping because num2!
@string
= Encoding.UTF8.GetString(97085277-F30F-47FA-9C3D-82DA9E6730B4.<<EMPTY_NAME>>, index,
count);
So
it pushes big array and gets string (host) based on specific parameters.
Index
=> 1888, count => 25.
 And save value in @string.
So
value will be =>  mail.totallyanonymous.com.
 Same thing for credentials username will be at
function Bw(), and password will be at function BX());
If
we apply the same technique we get the result honebots@totallyanonymous.com.
Same
technique for Mail address to.
So
at this point I noticed that the class called
97085277-F30F-47FA-9C3D-82DA9E6730B4 includes all configurations so I decided
to decrypt all big arrays.
So
I write .net code as shown in figure to decrypt all content of the array.
I
just got the length of the array which will be 9998.
//
Author : Mahmoud ElMenshawy
for(int
i = 0; i < array.Length; i++)
                                    array[i]
= (byte)((int)array[i] ^ i ^ 170);
 MySQL Workbench%ProgramW6432%Private Internet
Access\data\Private Internet Access\data\account.json.*"username":"(.*?)".*"password":"(.*?
You can try code at link
below
