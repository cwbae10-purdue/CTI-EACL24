At that time, even UNIT42 was closely monitoring that actor, unveiling a large scale operation threatening also United States, Europe and Asia.
The recent operation we tracked was designed to delivery over 900 pieces of malware with highly dangerous capabilities enabling the threat actor to conduct both digital and environmental monitoring of their victims across the globe.
The attribution of this operations is far from certainty and such activities could be possibly related to the threat group named Gorgon/Subaat.
During our investigation we noticed the attack we were looking at, was just a piece of a wider offensive campaign lasting for months.
In fact, the analysis of the infection chain revealed the actor has established the new TTPs at least since April 2021, and many other attach waves were prepared and launched during that time.
Based on the evidence found during the attacker infrastructure analysis we reconstructed at least six offensive waves part of this campaign:
We observed an evolution on the techniques of this threat actor, but his strategic choice remains constant in time: a large amount of the malware delivery infrastructure is still serverless.
In the last three months Aggah, potentially linked with the APT group Gorgon/Subaat, leveraged other different legit third-party services in a multi-stage fashion (T1608) to bypass security control and gain the initial foothold into the target organizations.
Traditionally, the actor was heavily abusing Pastebin services to host and drop malicious code, but in the latest campaign they abuse Internet Archive, the popular nonprofit service created to help the internet community to store pass on the today's open knowledge to our heirs.
In fact, the actor hosted a huge volume of malicious code inside the “Community Texts” repositories of the Internet Archive project using multiple accounts on the platform, masking their malicious tool as open books and texts.
More details on the accounts leveraged by the threat actor (T1583.006) on section “Abused Accounts in the “Wayback” campaign”.
To get an immediate outlook of the mechanisms behind the “WayBack” campaign, we prepared an infographic comprehensive of all the capabilities and the extension, in terms of both serverless mechanisms and deployed payloads, of all the entire malicious infrastructure.
Figure 1: The “Wayback” Campaign attack chain
A necessary deepening point is the malware delivery infrastructure of the “WayBack” campaign.
During our inspections we observed that the actor mainly operated through three accounts on the Internet Archive repository.
These accounts have been abused by the threat actors at least since April 2021.
Figure 2: Evidence of the malicious account on Web Archive
Putting the principal malware delivery infrastructure deployment activities in a timeline helps understanding how intense the whole malicious operation has been, in fact the actor was especially active around 1st, 8th and 9th June with peaks in the weaponization phase (TA0042).
Table 6: Scheme of all the observed campaigns
To summarize how this actor is operating we prepared a synthetic flashcard capturing the main techniques observed during the campaign operation.
Table 1: Static information about the sample
The infection starts with a malicious Powerpoint file weaponized with a malicious macro, as a major part of the multi-stage chains.
The macro in this case is easy to decode and it is the following:
Figure 4:  Malicious Macro evidence
One thing to notice here is the assignment GetObject("new:F935DC22-1CF0-11D0-ADB9-00C04FD58A0B"): it is the CLSID key of WindowsScriptHost COM Object.
COM objects have been an interesting area for Security Researchers for some time, especially its usage in penetration testing.
Additionally, the MSHTA is a common LOLBIN to execute remote files the actor abuses from long time.
During the static inspection of the compiled VBA macro project named “titu.bin”, we noticed that that above mentioned bitly link is not the only one: in fact, there are many bitly links hidden inside:
Figure 5:  Piece of the list of bitly pages
All of them are functional and point to a different blogger page.
This mechanism is used to update the distribution infrastructure by only changing the redirection URLs.
At the time of writing some of them are offline, but most of them are still redirecting to the second layer of the malware distribution infrastructure.
Figure 6:  List of the blogspot pages
The bitly urls land on the several blogspot pages.
Each of these HTML pages contain an obfuscated Windows Script Host JavaScript code mimicking common javascript codes we can find in every web pages.
Code Snippet 1: Pseudocode executed by the MSHTA Engine
We identifier all the codes hidden in the blogpost pages and through them, we were able to retrieve another large series of dropurls pointing to another layer of the distribution infrastructure.
We found not only addresses belonging to the classis Blogspot pages, but also belonging to Web Archive, the famous platform to conserve the historical internet pages.
Analyzing the hidden JavaScript code in the blogger pages we recognized the classic obfuscation pattern we saw in past Aggah campaigns:
Figure 7:  Example of MSHTA code
After the decoding, we have a cleaner view of the malicious code executed though the MSHTA engine: Aggah downloads many pieces of powershell code from archive.org, the official Internet Archive project domain.
Code Snippet 2: Decoded script
We focused on the Invoke-Expression cmdlet which downloads and execute from the Web Archive Page.
The structure of the Powershell script looks like the following:
Code Snippet 3: Payload on the Web Archive page
Also, this structure remarks the classic TTPs observed during the previous campaign.
We have a module for the Process Hollowing technique to inject the final payload inside the designed process.
In this case is MSBuild.exe a basic executable of the .NET environment.
 This malicious routine is performed through the last line of the PowerShell code:
Code Snippet 4: .NET Assembly loading in PowerShell evidence
Figure 8: Process hollowing malicious DLL evidence
Many of them were commodity malware customized by the actor.
The first sample is the one retrieved from the https://ia601409.us.archive[.
]org/4/items/Re-Panel-24/10.txt and after a quick triaging operation, we categorized the sample as Agent Tesla info stealer.
Table 2: Static information about the sample
The malware does not seems to have an elevated level of obfuscation and it starts with a check of a security privileges, aimed to be an elementary evasion technique because the older machines don’t implement the modern SSL and TLS newest versions.
Figure 9: Check of security protocols
After that check, the malware behaves like the classic AgentTesla malware family and continues with its own info stealing operations, retrieving all the sensitive data about the victim machine, browser cache and cookies, Mail clients' credentials, Crypto wallets, Clipboard data etc.
It sends all of it to its C2.
Figure 10: C2 communication evidence
Table 3:  Static Information about the sample
Even this second wave of malware contains a series of Agent Tesla samples, but they have got a different configuration.
The sample performs the same info stealing operations, so we concentrated on the C2 extraction, and this time it is an FTP C2 pointing to another IP.
The C2 config is the following.
Figure 11: C2 FTP protocol evidence
In this campaign the threat actor changed final payload to deliver, now we have found Oski stealer.
Table 4: Static information about the sample
The sample is compilated in C++ and it does not show any evidence of obfuscation.
Moreover, we also noticed the classic string-decoding routine of this malware family.
It stores a long series of configuration strings in a base base64 format and encrypted with the RC4 algorithm, like the following way:
Figure 12: Evidence of decoding routine
So, we decoded them and reported the configurations strings in the Appendix “Oski/Vidar Configuration strings”.
Figure 13: Evidence of the C2 configuration
During the study of the campaigns, we focused on another peculiar sample, way less common than the previous ones.
It is written in .NET framework, and we decided to investigate it.
Table 5: Static information about the sample
The sample is packed with the famous .NET Reactor packer, so it is easy to unpack:
After that, we proceeded to study the malicious code to understand the malware capabilities.
Figure 15: Evidence of the classic Cobian malware behavior
By statically analyzing the code, two interesting strings emerge, the classic “HKCU/Software/Microsoft/CurrentVersion/Run” registry key aimed at setting the persistence, and a malformed IP, because the last octet is more than 255.
But debugging, the mystery is resolved: the code reverts the string and the actual IP C2 is 193[.56.29.171:
Figure 16: String Reverse evidence to restore the actual C2
After preparing the C2's IP to connect, the malware initiates a Socket to it and waits for the receipt of the commands, unfortunately, during the analysis the server was unresponsive, and we weren't able to recover the command list.
Figure 17: C2 communication routine evidence
This malware is a Cobian RAT v2.0 sample and by statically inspecting the code, we carried out all the most important command instructed to be executed by that rudimentary backdoor:
Earlier Cobian RAT versions were analyzed by ZScaler security researchers back in 2017.
In their report they documented an interesting fact: that old Cobian RAT sample they investigated was backdoored to retrieve commands from certain Pastebin pages.
After providing an overview of all the malicious payload delivered by all the campaigns, we go back to the inspection of the code seen in "Code Snippet 2" to identify the persistence mechanisms adopted by the threat actor.
It is quite noisy because it creates four keys inside the classic path, as shown in the following figure:
Figure 18: Evidence of the set registry keys
Not only, it creates also a scheduled task repeating every 80 minutes:
Figure 19: Evidence of the scheduled task
Those persistence mechanisms are designed to give the actor an important level of resilience and modularity of the entire infrastructure.
However, a simple antimalware engine could be able to detect all of them.
Besides this consideration, let's analyze all the five persistence components:
Figure 20: Evidence of the main script on usrfiles platform
As shown in the figure, it downloads other three components from the same platform:
1) The first one is the actual malicious script which disables every type of security protection, such as Windows Defender, UAC controls, Firewall, whitelisting some processes (obvious mshta, powershell, cmd, explorer, MsBuild etc), Microsoft Office.
Figure 21: Piece of the malicious script aimed at putting to zero the security of the victim machine
2) In order to work, it needs to have the administration privileges which are granted by the usage of the so-called "fodhelper UAC bypass", a well-known documented technique in red-team activities and we encountered in a previous attack chain of the same actor.
This technique is guaranteed by the second file on the "usrfiles" platform:
Figure 22: FodHelper UAC bypass technique evidence
3) The last file is the simplest, it has to start all the security destruction process:
Figure 23: Starting routine evidence
As shown in the first script, all these components will be stored into the folder "C:\Users\Public\" as VBS scripts.
1) "task2” registry key: During our analysis, the URL pointed by the task has been registered by the actor, but there wasn't any malicious script to execute.
Probably the actor will use that URL as backup or in a second moment.
2) "SECOTAKSA" scheduled task: This task points to "hxxps://0v2x.blogspot[.
]com/p/10.html" which downloads the last version of the payload from one of the mentioned Web Archive folders.
The malicious campaign we tracked has delivered over 450 distinct malwares to multiple targets all around the world.
Like in past operations, this enigmatic actor is still leveraging commodity malware to conduct large scale espionage operations, manipulating it to bypass security controls and antiviruses.
We also noticed an evolution in the delivery infrastructure related to the abuse of Internet Archive service, a well-known, high reputation, service.
Despite this tactical change, many pillars of its delivery operations remain stable such as the usage of PowerPoint presentations, shortening services and script hiding techniques on legit blogging platforms.
Multi-modular and multi-stage attack chain grant attackers’ high level of resilience and self-customization of the payloads and makes traditional detection and blocking less effective.
Yoroi protects its customers from this kind of threat leveraging the Yomi sandbox technologies, Genku network probes and Kanwa endpoint agent, along with precise, human refined Threat Intelligence to protect and respond to modern cyber threats.
This blogpost was authored by Luigi Martire and Luca Mella of Yoroi Malware ZLAB
