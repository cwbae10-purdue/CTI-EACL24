How are open-source software trojanized?
How can we detect them?
To answer these questions, let us walk through a recent investigation we conducted that involved this file type.
By: Abraham Camba, Bren Matthew Ebriega, Gilbert Sison
		
			November 20, 2020
Read time:  ( words)
Trojanized open-source software is tricky to spot.
This is because it takes on the façade of legitimate, non-malicious software, making it especially stealthy and useful for targeted attacks.
However, a closer investigation can reveal suspicious behavior that exposes their malicious intent.
How are open-source software trojanized?
How can we detect them?
To answer these questions, let us walk through a recent investigation we conducted that involved this file type.
In our analysis of an incident, we found a file named notepad.exe sticking like a sore thumb.
As most already know, Notepad is a well-known legitimate application.
However, some malware authors camouflage malicious files by using the name of legitimate software such as notepad.exe to evade detection.
The notepad.exe file was dropped through ntoskrnl.exe, short for Windows NT operating system kernel executable.
This was done by either exploiting ntoskrnl.exe or via network shares.
Based on the telemetry data we obtained, it’s most probably the latter.
Performing Root Cause Analysis (RCA) shows that this malicious notepad.exe file has done suspicious actions by calling the following tools:
dumps import registry keys/entries to a file
gathers operating system configuration information for a local or remote machine, including service pack levels
gets a list of currently running processes on either a local or remote machine
Executable file names and functions
The notepad.exe file’s link to these processes and their functions indicates that the file is a typical backdoor that gets commands from a malicious remote user.
However, something caught our attention.
The details listed in the file properties of notepad.exe show this:
The file description, product name, and original filename mention Notepad++, an open-source software used as a source code editor.
It can also be observed that some of the file’s details are dubious.
For example, Notepad++ files are usually named as “notepad++.exe” and not “notepad.exe” as seen in this sample.
The version — v7.8.6 released in April — is also old; as of writing, the latest version is v7.9.1, released in early November.
Executing the file in question shows this:
The user interface of the file looks and functions convincingly like a typical legitimate Notepad++ file.
An initial look reveals nothing suspicious.
But in terms of behavior, we discovered that the sample does something that a non-malicious Notepad++ won’t do: it searches for a file named config.dat located in c:\windows\debug folder.
This behavior is notable as the said file figures in the analysis of the sample’s code.
Decompiling the code of this malicious Notepad++ file shows the following code:
The code snippet taken from a typical non-malicious Notepad++ file is shown below:
These code snippets bear many similarities.
However, the malicious Notepad++ file has additional code that loads an encrypted blob file (config.dat) that decrypts the code and executes it in the memory so it can perform its backdoor routines.
This reminds us of some older malware types like PLUGX.
We observed two instances using the same loader but delivering different payloads.
One of the payloads is detected as TrojanSpy.Win32.LAZAGNE.B, while the other is detected as Ransom.Win32.EXX.YAAK-B (Defray ransomware).
Further investigation also revealed other blob files with the same loader which lead to different payloads.
We suspect that the file in this incident got into the organization through a targeted watering hole attack.
After the initial machine was infected, propagating the malicious notepad++ and config.dat via admin shares would be easy.
The notepad.exe file that we investigated came from malicious sources and are not associated with official distributing sites of Notepad and Notepad++.exe.
Due to its uncanny resemblance to a legitimate Notepad++ file, the analyzed sample can be easily mistaken as a non-malicious file, especially by employees with limited technical know-how.
Threat actors achieved this disguise by trojanizing open-source software.
Notepad++’s source code is available publicly; thus, anyone (including malware authors) can access it.
Threat actors can look for open source code of widely-used software and trojanize it by adding malicious code that can perform functions like loading an encrypted blob file.
This means that most of the resulting file’s binary code is outright non-malicious, and the malicious code simply loads a file, an activity that does not seem to be too suspicious.
Additionally, encrypted blob files don’t have file headers.
These make it difficult for antimalware solutions, including AI/ML-based ones and those that only focus on a single protection layer, to detect.
To block these types of threats, solutions that grant visibility across layers would be helpful, as security teams can use them to correlate data and behavior within the environment.
Users should only download files, applications, and software (such as open-source software) from trusted and legitimate sources to avoid these types of threats.
For example, Notepad++ users can download relevant files from their official website.
Enterprises can create and disseminate a list of approved downloading sites to their employees.
As a further security measure, companies can also require the approval of IT teams before employees can install any software on office devices.
For security and IT Teams, it is also strongly recommended to validate the downloaded binary with checksums, as good open source projects maintain checksums of their official released binaries.
We also recommend Trend Micro™ XDR, which collects and correlates data across endpoints, emails, cloud workloads, and networks, providing better context and enabling investigation in one place.
This, in turn, allows teams to detect advanced and targeted threats earlier.
Trend Micro Machine 
 Learning Detection
notepad.exe (malicious, non-legitimate file named as such)
Trend Micro Machine Learning Detection
BKDR.Win32.TRX.XXPE50FFF038E0002 (GENERIC: Hit Bad Auto Shield)
