Looking across the threat landscape at cybercriminals’ go-to attack vectors, we see SQL injection high on the list.
But there’s another injection method that also poses a serious threat: command injection.
In late September 2014, a more than 20-year-old vulnerability in the GNU Bash shell, which was widely used on Linux, Solaris and OS X systems, sparked the mobilization of attacks known as Shellshock.
This first vulnerability quickly gave way to the disclosure of several additional vulnerabilities affecting the UNIX shell.
IBM Managed Security Services (MSS) observed a significant increase in focused attacks targeting these vulnerabilities within 24 hours of their disclosure.
The attacks came in waves, from different source IPs and originating countries.
Almost two years later, we are still seeing a significant amount of Shellshock attacks.
Read the IBM research report on The importance of thwarting command injection attacks
A successful command injection attack allows an attacker to issue arbitrary commands within a vulnerable web application environment.
This happens when an application passes malicious user-supplied input — via, for example, forms, cookies or HTTP headers — to a system shell.
If the data input is not validated properly, the attacker can inject additional shell commands and have them executed with the permission of the vulnerable application.
Simply put, this means that a critical web server and its entire back-end database can be completely compromised.
Because command injection attacks are one of the most common and successful attacks on the web, they are not likely to fade away anytime soon.
Defending against these attacks requires implementation of strict defensive tactics, which are often overlooked when web applications are initially deployed — especially those applications developed in-house.
The IBM report “The Importance of Thwarting Command Injection Attacks” takes a more focused look at how these attacks are perpetrated and how you can protect your web environment from them.
