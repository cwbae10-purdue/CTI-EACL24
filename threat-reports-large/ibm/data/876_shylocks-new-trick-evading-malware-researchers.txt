Shylock is a financial malware platform discovered by IBM Security in 2011.
Like most malware strains, it continues to evolve in order to bypass new defensive technologies put in place by financial institutions and enterprises.
While analyzing a recent Shylock dropper, we noticed a new trick it uses to evade detection.
Namely, it can identify and avoid remote desktop environments, a setup commonly used by researchers when analyzing malware.
Researchers collect suspected malware samples for analysis and often place them onto machines that are isolated in an operations center, also known as a lab.
Rather than sit in front of a rack of physical machines in a cold basement lab, researchers use remote desktop connections to study malware from the convenience and coziness of their offices.
It is this human weakness that Shylock exploits.
We have discovered advanced malware that is now capable of detecting remote desktop environments to evade researchers.
The Shylock dropper we discovered detects a remote desktop environment by feeding invalid data into a certain routine and then observing the error code returned.
It uses this return code to differentiate between normal desktops and other lab environments.
In particular, when executed from a remote desktop session, the return code will be different and Shylock won’t install.
It is possible to use this method to identify other known or proprietary virtual/sandbox environments, as well.
For those more technically oriented, here is a bit more detail.
The dropper dynamically loads Winscard.dll and calls the function SCardForgetReaderGroupA(0, 0).
The malware proceeds as expected only if the return value is either 0x80100011 (SCARD_E_INVALID_VALUE) or 0x2 (ERROR_FILE_NOT_FOUND).
We noticed that when the dropper is executed locally, the return value is 0x80100011, but when it is executed from a remote desktop session the return value is 0x80100004 (SCARD_E_INVALID_PARAMETER).
The assembly language source code is shown below.
We have found a number of malware strains that utilize different approaches to identify specific execution environments in order to take appropriate evasive actions.
The assembly language source code is shown below.
IBM vs. Shylock
IBM Security solutions are not affected by anti-VM/anti-research techniques employed by malware.
This is because we use real-time application protection to monitor for suspected malware behavior in the endpoint device’s memory.
This approach prevents malware from compromising applications, including the browser, and stealing data like user credentials.
It is also immune to malware evasion techniques designed to identify remote desktop and virtual machine environments.
