In the months since the WanaCrypt0r/WannaCry and the Petya/NotPetya attacks, security researchers have delved into the nuts and bolts these incidents and the malware involved.
One key thing that research into these security incidents shows is that these attacks used a relatively new and unknown technique called kernel APC attacks as part of their toolkit.
Kernel APC attacks occur in a way that increases the “stealth” factor and makes standard detection and prevention very difficult.
And kernel APC attacks do this while still maximizing the power and control that the code has on the target system.
While kernel APC attacks aren’t well known and can be hard to understand, their proven success in WanaCrypt0r/WannaCry and the Petya/NotPetya make them an important threat to understand because proven attack techniques are quickly adopted widely.
And understanding is a first step to prevention.
To understand what makes kernel APC attacks so dangerous, it’s important to understand what they are.
The kernel is the heart of the operating system.
When talking about operating systems with security permissions and controls like Windows or UNIX/Linux, the kernel operates with the highest level of control.
Because of this, attacks against the kernel are used to gain complete control over a system, generally as part of an “elevation or privilege” (EoP) or “privilege escalation” attack.
Typically, attacks against the kernel are used in conjunction with code execution attacks so that an attacker can target a limited privilege user but ultimately gain full control over the system.
Privilege escalation attacks against the kernel have been around for some time and are well-known and can be well protected against.
Kernel APC attacks however are a different class of attack.
These don’t attack the kernel to gain privileges.
Instead kernel APC attacks already have kernel privileges and use them to further carry out their attack.
In this case by making legitimate programs execute malicious code rather than their own legitimate code.
Kernel APC attacks do this using their control over the kernel to redirect APCs: “Asynchronous Procedure Calls”.
APCs can basically be thought of as places in line for the CPU that the kernel gives access to.
In a kernel APC attack, the attacker gives a legitimate program’s place in line to the attacker’s code.
The crux of what makes this attack technique so important is how the technique uses this level of control to have legitimate programs run illegitimate commands.
It’s easier to detect and prevent illegitimate programs (malware) from executing commands.
But when legitimate programs execute illegitimate commands, it’s harder to detect and prevent: it’s not always clear whether a command is legitimate or not, and interfering with commands from legitimate programs can have significant (sometimes catastrophic) unintended consequences.
And finally because of ways that kernel APC attacks are carried out, it doesn’t leave the usual fingerprints you find after an attack making detection harder still.
Taken altogether, these make kernel APC attacks an effective and sophisticated technique.
And while this technique alone isn’t solely responsible for the damaging power of WanaCrypt0r/WannaCry and Petya/NotPetya it is certainly an important contributing factor.
Perhaps more importantly, it’s a piece of those attacks that has escaped relative notice outside of some specialized parts of the research community.
New effective attack techniques that escape notice are always inviting for other copycat attackers.
A good way to defend against this is to understand and be aware of the thread: forewarned is forearmed.
If you want a more detailed understanding of kernel APC attacks as they occurred in WanaCrypt0r/WannaCry, two good resources are Microsoft’s MMPC blog “WannaCrypt ransomware worm targets out-of-date systems” and Countercept’s “DOUBLEPULSAR Usermode Analysis: Generic Reflective DLL Loader”.
