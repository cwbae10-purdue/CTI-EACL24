Palo Alto Networks has discovered a previously unknown remote access Trojan (RAT) that has been active for over two years.
It has a very low volume in this two-year period, totaling roughly 27 total samples.
The malware is delivered via an innovative and unique technique: a downloader we are calling Carp uses malicious macros in Microsoft Excel documents to compile embedded C# (C Sharp) Programming Language source code into an executable that in turn is run to deploy the Cardinal RAT malware family.
These malicious Excel files use a number of different lures, providing evidence of what attackers are using to entice victims into executing them.
The malware from start to finish exhibits the following high level operations as shown in Figure 1:
Figure 1 Malware execution flow
As previously mentioned, we have observed Cardinal RAT being delivered using a unique technique involving malicious Excel macros.
We are calling these delivery documents the Carp Downloader, as they make use of a specific technique of compiling and executing embedded C# (CshARP) language source code that acts as a simple downloader.
We observed the following example macro in the most recent sample.
Note that we have prefixed the function names with ‘xx_’ to make it easier for the reader to understand what is going on.
Additionally, we have added comments to explain what is happening, as well as the un-obfuscated strings that are found within the macro.
Figure 2 Portion of malicious macro containing base64-encoded source code
Figure 3 Portion of malicious macro responsible for compiling and executing embedded source code
As a quick recap of what the malicious macro is doing, it begins by generating two paths—a path to a randomly named executable, and randomly named C# file in the %APPDATA%\\Microsoft folder.
It then base64-decodes the embedded C# source code as shown in Figure 2 and writes it to the C# file path previously generated.
Finally, as shown in Figure 3 it will compile and execute this C# source code using the Microsoft Windows built-in csc.exe utility.
The decoded source code in this example looks like the following as shown in Figure 4.
Figure 4 Decoded source code
As we can see, it simply downloads a file from secure.dropinbox.pw using HTTP on port 443 (not HTTPS), and proceeds to decrypt the file using AES-128 prior to executing it.
At this point, Cardinal RAT has been downloaded and executed, and execution is directed to this sample.
Of course, the Carp Downloader is not required to download Cardinal RAT, however, based on our visibility, it has exclusively done so.
A total of 11 unique Carp Downloader samples have been observed to date.
The following figures show lures that we observed in these samples.
Figure 5 Lure with a filename of Top10Binary_Sample_HotLeads_13.9.xls
Figure 6 Lure with a filename of AC_Media_Leads_ReportGenerator_5.2.xls
Figure 7 Lure with an unknown filename
Figure 8 Lure with a filename of Arabic 22.12_Pre qualified.xls
Figure 9 Lure with an unknown filename
