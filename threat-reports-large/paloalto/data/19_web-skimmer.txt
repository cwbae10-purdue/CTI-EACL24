The formjacking attack has been one of the fastest-growing cyberattacks in recent years.
As explained in our previous blog, “Anatomy of Formjacking Attacks,” the formjacking attack is easy to deploy but hard to detect.
It has gained popularity among threat actors, especially against e-commerce websites.
Between May and September 2020, we detected an average of 65,000 malicious HTML pages and 24,000 unique URLs compromised by formjacking attacks.
In this blog, we will take a closer look at the web skimmer attack, which is one of the most widely used formjacking attacks.
We will present several web skimmer samples and provide an in-depth analysis of the attack vectors deployed during the attack.
We hope this blog will help security researchers understand how web skimmer attacks happen in a real-life environment and develop effective detection and defense mechanisms.
Palo Alto Networks Next-Generation Firewall customers are protected from formjacking attacks via the WildFire and URL Filtering security subscriptions.
With WildFire, we detected 351,972 HTML pages that were compromised by skimmer malware from October 2019-October 2020.
These samples belong to 6,684 unique domain names.
We derived the geographical locations for the domain names to generate a heat map as shown in Figure 1.
This heat map indicates that the majority of the domain names are located in the United States.
Also, the domain names have a wide geographic distribution across almost every continent, including Africa and Australia.
Figure 2 shows the top eight countries the domain names belong to.
While the United States has a majority share, it is notable that all of the top countries have a populace with a relatively high socioeconomic status.
This seems sensible since most of the skimmer attacks target e-commerce websites, which attract users with spending power.
In order to understand web skimmer attacks, we analyzed skimmer samples and determined that, although the skimmer HTML pages have different layouts and styles, they share similar JavaScript code.
We were able to extract 10,764 unique malicious JavaScript snippets from the 351,972 HTML pages collected from October 2019-October 2020.
With the help of VirusTotal and automation tools, we were able to identify 63 different malware families based on their functionalities and features.
Figure 3 shows the number of HTML samples associated with each skimmer family.
Among all malware families, 19 are relatively popular, with more than 1,000 observed samples each, while the remaining 44 families were seen in only 3,612 pages combined.
From Figure 3, we can see that 27% of malicious web skimmer pages belong to the most popular skimmer family (family1 in Figure 3).
Also, the top three families (family1, family2 and family3) can cover 65% of all web skimmer pages, considering that one page can belong to multiple skimmer families.
We found some pages with more than one malicious JavaScript embedded.
For those pages, no evidence indicated different types of skimmers are intentionally used together.
Rather, it is more likely that the pages were randomly compromised by different campaigns independent of each other.
From October 2019-October 2020, we observed the evolution of skimmer obfuscation techniques and command and control (C2) communication.
Specifically, we determined that family7, shown in Figure 3 with a total number of 34,004 samples, is typical and representative of skimming attacks.
In this section, we will do a deep dive into family7 to better understand how a skimmer operates.
Multiple variants of web skimmer samples from family7 will be presented.
We hope this can help security researchers understand the complexity and polymorphism of web skimmer attacks, especially in terms of the code structure and usage of obfuscation techniques.
Let’s start with the JavaScript code extracted from one of the most commonly seen skimmer samples in family7, as shown below in Example 1.
From the code, we can see that the payment information is stolen by the attackers, and then the data is sent to the C2 server (https://informaer.net/js/info_jquery.js) via a POST request.
The related function is shown below.
