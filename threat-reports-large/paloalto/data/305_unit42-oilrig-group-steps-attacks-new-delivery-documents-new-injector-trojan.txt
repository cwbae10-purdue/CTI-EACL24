Unit 42’s ongoing research into the OilRig campaign shows that the threat actors involved in the original attack campaign continue to add new Trojans to their toolset and continue their persistent attacks in the Middle East.
When we first discovered the OilRig attack campaign in May 2016, we believed at the time it was a unique attack campaign likely operated by a known, existing threat group.
As we have progressed in our research and uncovered additional attack phases, tooling, and infrastructure as discussed in our recent posting “Striking Oil: A Closer Look at Adversary Infrastructure”, it has become apparent that the threat group responsible for the OilRig attack campaign is likely to be a unique, previously unknown adversary.
Additionally, others have been referring to the group responsible for the OilRig campaign itself as the OilRig group as well.
To that end, we are elevating the OilRig attack campaign to be known as the OilRig group.
In July 2017, we observed the OilRig group using a tool they developed called ISMAgent in a new set of targeted attacks.
The OilRig group developed ISMAgent as a variant of the ISMDoor Trojan.
In August 2017, we found this threat group has developed yet another Trojan that they call ‘Agent Injector’ with the specific purpose of installing the ISMAgent backdoor.
We are tracking this tool as ISMInjector.
It has a sophisticated architecture and contains anti-analysis techniques that we have not seen in previous tools developed by this threat group.
The complex structure and inclusion of new anti-analysis techniques may suggest that this group is increasing their development efforts in order to evade detection and gain higher efficacy in their attacks.
On August 23, 2017, we observed OilRig targeting an organization within the United Arab Emirates government.
The attack involved a spear-phishing email that had a subject of “Importan Issue” and two Zip archives attached, as seen in Figure 1.
Note that “Important” is misspelled in the sample as shown below.
Figure 1 Delivery email that contains two Zip archives that contain the malicious delivery documents
The message body in the attack email contains an image that is hosted on a remote server.
As shown in Figure 2, hovering over the image shows that the URL link is to an image hosted at “www.cdnakamaiplanet.com” which we have reason to believe is an adversary owned domain.
It is likely that the image was embedded to track if the recipient opened the email or not.
Figure 2 URL associated with image included in delivery email
Another interesting facet of this attack is that the email addresses in the “To” and “From” fields are from addresses from the same domain.
Our initial assumption was that the email address in the “From” field was likely spoofed.
Additional analysis of the email headers revealed that it did not contain a list of external email servers used to deliver the message as expected from a spoofed email; instead, we discovered the following string within the email headers:
Client=OWA;Mozilla/5.0 (Windows NT 6.3; rv:36.0) Gecko/20100101 Firefox/36.04;
This string in the header suggests that the OilRig actor is likely to have used the targeted organization’s Outlook Web Access (OWA) to send the phishing email using Firefox 36.
Using information from our research in the Striking Oil blog, we know the OilRig group has conducted credential harvesting campaigns specifically by emulating OWA login sites.
Based on that research and this observation, we postulate that the OilRig group gathered credentials to a legitimate user’s OWA account and logged into the user’s account to send phishing attacks to other individuals within the same, targeted organization.
Also, Firefox 36 was released in February 2015; since this email was sent August 2017, we believe it suggests the actors are using an outdated version of Firefox to log into the target organization’s OWA.
The August 23, 2017 phishing attack contained two Zip archives to the email, “Issue-doc.zip” and “Issue-doc1.zip”.
Each Zip attachment contains one file, with “Issue.doc” within “Issue-doc.zip” and “Issue.dot” within “Issue-doc1.zip”.
The “Issue.doc” and “Issue.dot” files are both malicious documents that will attempt to run in Microsoft Word.
Issue.doc is a Word document that contains a malicious macro that the actors attempt to trick the victim into executing by instructing the user to click the Enable Content button as shown in Figure 3.
We track this malicious delivery document as ThreeDollars.
Figure 3 Malicious “ThreeDollars” Microsoft Word Document
Once enabled, the macro reads in the initial document, searches the data for a delimiter of “###$$$” to find the base64 encoded payload then writes the encoded payload to the file %APPDATA%\Base.txt.
The following shows a hexdump of the delimiter followed by the encoded payload:
The macro runs a PowerShell command that will decode the contents of the %APPDATA%\Base.txt file and save it to the file %PUBLIC%\Libraries\servicereset.exe, which it will then execute.
The “servicereset.exe” file is a new tool in OilRig’s arsenal that we call ISMInjector, which we will discuss in detail in the next section.
Issue.dot is a file that attempts to exploit CVE-2017-0199 Microsoft Word Office/WordPad Remote Code Execution Vulnerability using the following code:
As displayed by the code example above, Index.dot file attempts to load a malicious exploit document hosted at “msoffice-cdn.com”, which is the same URL that hosted the exploit document used in an attack that ClearSky published on August 28, 2017.
By correlating artifacts found in Index.dot, we discovered another sample attempting to exploit CVE-2017-0199 used in a separate attack, this time using “office365-management.com” as the C2 domain.
The resulting payload from this related delivery document is an ISMAgent Trojan that is configured to use “msoffice365update.com” as its C2 server.
Please reference our previous blog on ISMAgent for more information on this Trojan.
Ultimately, the payload delivered by ThreeDollars is a new tool that we track as ISMInjector.
As its name suggests, ISMInjector is a Trojan that is responsible for injecting a Trojan into another process.
The payload embedded within the ISMInjector sample delivered in this attack is a variant of the ISMAgent backdoor that we had discussed in detail in our blog discussing a targeted attack on a Saudi Arabian technology company.
At face value, ISMInjector is obfuscated with the off-the-shelf SmartAssembly .NET obfuscator created by red-gate.com.
The first execution of ISMInjector starts by copying itself to %localappdata%\srvBS.txt and enables persistent access to the system.
The code achieves persistence by referencing two resources that contain commands the code will execute by running them within a command prompt process, as seen in the following screenshot:
The two resources that contain commands that ISMInjector uses for persistence are named “Tsk1” and “Tsk2”.
The specific commands within each of these resources are within Table 1.
At a high level, the“Tsk1” command creates a scheduled task named “ReportHealth” that is meant to run a payload saved to “%localappdata%\srvHealth.exe” every 4 minutes.
The “Tsk2” command creates a scheduled task that runs every 2 minutes that is responsible for saving the payload to srvHealth.exe.
This task saves the payload to this location using the “certutil” command to decode the original payload saved to “srvBS.txt”.
Table 1 Resources in ISMInjector containing commands for persistence
Subsequent executions of the ISMInjector sample from srvHealth.exe will execute its functional code.
ISMInjector’s functional code is split into two different embedded modules named Inner.dll and Joiner.dll that work in conjunction to inject an embedded ISMAgent payload into another process.
The two modules, which we will refer to as Joiner and Inner, have the following debug paths, which suggest the author of these modules refer to this Trojan as “Agent Injector”:
C:\Users\J-Win-10\Desktop\Agent Injector\PolicyConverter\Inner\obj\Release\Inner.pdb
C:\Users\J-Win-10\Desktop\Agent Injector\PolicyConverter\Joiner\obj\Release\Joiner.pdb
The main function within the ISMInjector assembly uses the Joiner module to construct the final payload and the Inner module to inject the final payload into a process.
Figure 4 shows the ISMInjector’s main function that uses the two modules to carry out its injection process before exiting.
Figure 4 ISMInjector’s main function uses methods within the Joiner and Inner modules
The Joiner module contains four resources named P11, P12, P21 and P22, which are all 35840 bytes of binary data.
It reads the P11 and P12 resources and saves them to a variable, effectively concatenating them together.
The module uses the same logic to concatenate the P21 and P22 resources together, and finally concatenates the P11+P12 variable with the P21+P22 variable, which results in the construction of a binary executable.
The ISMInjector code then calls the “LoadDll” method within the Inner module, providing the string “Run”, the payload constructed by the Joiner module, and a path to the “RegAsm.exe” executable as arguments, as seen in Figure 4.
The LoadDLL method constructs an embedded assembly, using the same method as the Joiner module used to construct the final payload.
However, the Inner module creates another module that is used to actually perform the code injection.
To create this embedded module, the Inner module references two resources named D1 and D2 and concatenates them together.
The resulting .NET assembly has a class called “ClsV2” that has a method named “Run”, which is called in the LoadDll function call shown in Figure 4.
The “Run” method within the “ClsV2” class is invoked to execute the payload.
The “Run” method calls functions that has a state machine that dictates the actions taken.
At a high level, these state machines attempt to create a process and inject the constructed payload into the newly created process.
The use of state machines complicates analysis efforts because it makes the flow of execution jump around in a non-sequential fashion.
Table 2 contains the path through the state machines that ISMInjector uses to create a remote process, inject its embedded payload then run the payload.
Each row of the table contains the current state, a description of the activities performed within that state, as well as the next state that will be set and run.
The state values jump around dramatically, which requires an analyst to also jump around the code to determine its functionality.
This is an interesting anti-analysis technique we have not seen the OilRig actors use in their other tools.
