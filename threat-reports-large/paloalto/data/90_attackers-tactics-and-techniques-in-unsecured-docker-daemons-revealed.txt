Between September and December 2019, Unit 42 researchers periodically scanned and collected metadata from Docker hosts exposed to the internet (largely due to inadvertent user errors) and this research reveals some of the tactics and techniques used by attackers in the compromised Docker engines.
In total, 1,400 unsecured Docker hosts, 8,673 active containers, and 17,927 Docker images were discovered in our research.
The Docker team worked quickly in tandem with Unit 42 to remove the malicious images once our team alerted them to this operation.
Container technology has gained enormous popularity in the past few years and is becoming the de facto way for packaging, delivering, and deploying modern applications.
While the technology is quickly evolving and being adopted, it also becomes a valuable target for adversaries.
While the majority of the malicious activities involved cryptojacking (mostly mining for Monero), some compromised Docker engines were used for launching other attacks or installing rootkits on the hosts.
Sensitive information, such as application credentials and infrastructure configuration were also found from the exposed logs.
One interesting tactic we frequently saw was attackers mounted the entire host file system to a container and accessed the host operating system (OS) from the container to read/write from it.
We organized the observed malicious activities into the four categories below and provided an overview of each category with real samples.
Deploy Container Images with Malicious Code.
Malicious images are first pushed to a public registry.
The images are then pulled and deployed on the unsecured Docker hosts.
Deploy Benign Container Images and Download Malicious Payloads at Run Time.
Benign images are deployed on the Docker hosts.
Malicious payloads are then downloaded and executed inside the benign containers.
Deploy Malicious Payloads on the Host.
Adversaries mount the entire host file system to a container and access the host file system from the container.
Obtain Sensitive Information from the Docker Log.
Adversaries scrape the Docker logs to find sensitive information such as credentials and configurations.
Docker daemon is a persistent background process that manages the containers on a single host.
It is a self-sufficient runtime that manages Docker objects such as images, containers, network, and storage.
Docker daemon listens for REST API requests and performs a series of container operations accordingly.
Applications or users typically use Docker clients to authenticate and interact with Docker daemons.
A Docker daemon can also communicate with other Docker daemons if multiple hosts are managed as a service or a cluster.
By default, Docker daemon creates a non-networked Unix domain socket at /var/run/docker.sock and only processes with root permission or Docker group membership can access it.
If a client needs to access a Docker daemon remotely, Docker daemon can open a TCP socket and listens on port 2375 for REST API requests.
The default TCP socket provides unencrypted and unauthenticated access to the Docker daemon.
Mutual authentication with TLS can also be configured to secure the communication between the client and the remote daemon.
Docker management tools such as Portainer, Kitematic, and Rancher typically require users to enable the TCP socket so that a cluster of Docker hosts can be managed remotely.
However, as TLS configuration can be complicated, users sometimes made mistakes and inadvertently exposed unauthenticated daemons to the entire internet.
Due to the complexity of setting up TLS, we found many misconfigured and unsecured Docker daemons on the internet.
There are Docker daemons that have no encryption or authentication.
There are also Docker daemons with TLS configured, but the daemons fail to verify the client certificates.
Without verifying the client certificates, anyone can still establish an encrypted but unauthenticated connection to the daemon.
Malicious actors who find these unsecured Docker daemons can gain full control of the Docker platform and perform actions such as deploying new containers, logging into any active container, and downloading the container images.
Since the Docker daemon runs as a root process on the host, attackers may also gain full control of the host.
To understand the tactics and techniques that the malicious actors exploit on these unsecured Docker hosts, we periodically scanned for the exposed Docker daemons on the internet and collected their metadata between September and December 2019.
We are interested in seeing the malicious images, containers, and processes deployed on the compromised hosts.
Using the Internet of Things search engines Shodan and Censys, we found around 5,000 Docker daemons exposed to the internet and 10-15% of these daemons can be accessed without authentication.
Using the standard Docker Daemon APIs, we collected metadata from the unsecured hosts by making a few read-only requests, as shown in Table 1.
Table 1.
Docker Daemon APIs used for collecting metadata.
Overall, we identified more than 1,400 unique unsecured Docker hosts, 8,673 active containers, 17,927 Docker images, and 15,229 volumes.
Figure 2 shows the location distribution of the Docker daemons.
Figure 3 shows their Docker versions and OS types.
In the next section, we will summarize the malicious activities observed on these compromised Docker hosts.
Malicious Activities in the Exposed Docker Daemons
Once malicious actors discover an unsecured Docker daemon, they can gain full control of the Docker platform and potentially compromise the entire host.
Our research shows that the majority of the compromised platforms were involved in cryptojacking (mostly mining for Monero), and some were also used as stepping stones for launching other attacks.
We see adversaries compete for the “free resources” by eliminating each other from the systems, and some more aggressive adversaries further compromise the host and install malware directly on the host OS.
The observed malicious activities are organized into four categories and are detailed in each subsection.
Deploy Container Images with Malicious Code
Each Docker image packages all the dependencies necessary for running the application.
The application can thus run identically on any platform, operating system, and infrastructure.
Malicious applications can also be delivered the same way with high reliability.
Adversaries use public container registries such as Docker Hub and Quay to store and deliver malicious container images.
As Docker Hub is the default registry trusted by most Docker hosts, it is frequently used to store and serve malicious images.
These types of malware are pulled and run as containers directly on the compromised hosts.
They typically just steal the CPU, memory, or networking resources without harming other containers or processes on the same host.
Because the malicious code is built into the container images, composition analysis tools such as Prisma Cloud can usually identify the malicious files before the images get deployed.
Our research found numerous images on Docker Hub containing malicious code, as shown in Table 2.
Note that Docker Hub has deactivated these images after we reported them.
