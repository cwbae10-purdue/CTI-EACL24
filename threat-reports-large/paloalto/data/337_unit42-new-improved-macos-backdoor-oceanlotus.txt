Recently, we discovered a new version of the OceanLotus backdoor in our WildFire cloud analysis platform which may be one of the more advanced backdoors we have seen on macOS to date.
This iteration is targeted towards victims in Vietnam and still maintains extremely low AV detection almost a year after it was first discovered.
Despite having been in the wild for an extended period of time, the operation appears to still be active.
During our analysis, we were able communicate directly with the command and control server as recently as early June 2017.
While there seem to be similarities to an OceanLotus sample discovered in May 2015, a variety of improvements have been made since then.
Some of the improvements include the use of a decoy document, elimination of the use of command line utilities, a robust string encoding mechanism, custom binary protocol traffic with encryption, and a modularized backdoor.
The new OceanLotus backdoor is distributed in a zip file.
While we don’t have direct evidence for the initial infection vector we presume it’s most likely via an email attachment.
Once the user has extracted the zip file, they see a directory containing a file with a Microsoft Word document icon.
The file is actually an application bundle, which contains executable code.
(see Figure 1).
Once the user double clicks on the purported Word document, the Trojan executes and then launches Word to display a decoy document.
The malware uses the decoy document to help mask the execution of the malware.
This technique is a common one for Windows-based malware, but rare on macOS.
In order to achieve this layer of obfuscation, the malware author had to trick the operating system into believing the folder is an application bundle despite the .docx extension.
Traditionally, macOS malware have emulated legitimate application installers such as Adobe Flash, which was how the previous version of OceanLotus was packaged.
Figure 1.
Context menu and file listing
Once the application bundle is launched, it opens a hidden file in the bundle’s Resources folder named .CFUserEncoding which is a password-protected Word document (see Figure 2).
It also copies this file to the executable path and essentially replaces the application bundle after persistence has been set up.
This would lead the victim to believe that nothing was amiss, as they thought they were opening a Word document and a Word document opened.
In this case, the Word file has the name “Noi dung chi tiet.docx”, which is Vietnamese for “Details.”
Figure 2.
Decoy document prompts for a password to open the file
Compared to the previous version of this backdoor, the persistence mechanism for this remained largely the same.
This version creates a Launch Agent that runs when the victim host starts up, where as in the previous version execution was upon when a user logs in.
It also copies itself to a different location and filename based on the UID of the user who ran the application.
For a user other than root, it takes the MD5 hash of the structure returned by getpwuid() and breaks the hash down into segments <first 8 chars of hash>-<next 16 chars of hash>-<last 8 chars of hash>.
This segmented MD5 hash is prepended with “0000-“ then used as a directory in ~/Library/OpenSSL/ to store the executable file (see Figure 3).
If the user is root, the executable is stored in the system wide library directory at /Library/TimeMachine/bin/mtmfs.
It is interesting to note that the executable and plist locations look like legitimate applications.
Figure 3. plist and executable names and locations based on UID
Once the malware has set up persistence, it deletes the application bundle from the executable path leaving the decoy document in its place and launches itself as a service from the new location.
One of the first things we noticed about this backdoor is the lack of suspicious strings which often times provides context as to what the malware might do on a victim host.
In most macOS malware, calls to the system() or exec() functions to run additional scripts are in place.
In this case, these were not present nor were there command line utility strings that may easily convey the malicious intention of the application.
This shows a deep level of understanding of the macOS platform by the author of this backdoor compared to other threat actors that will commonly copy and paste scripts from the Internet.
The lack of these strings may also double as an anti-analysis technique to make the malware seem less suspicious, especially to basic static analysis.
Since there appear to be no obvious suspicious strings in plaintext, we move onto the possibility of use of encoded, or obfuscated strings.
The string decode routine for this backdoor is an upgrade from previous versions in which strings were XOR encoded with the word “Variable” as a key.
The string decode routine now consists of a combination of bit shifting and XOR operations with a variable key that depends on the length of the string that was encoded.
If the computation for the variable XOR key turns out to be 0, the default XOR key of 0x1B is used.
Figure 4 shows a Python implementation of the decode function.
Figure 4.
Python implementation of the malware’s string decode function
After decoding the strings (see Figure 5), we can glean that the malware sets up persistence, surveys the victim’s computer, and sends this information back to a server.
At this point, it is still not obvious that this malware contains backdoor functionality.
Figure 5.
List of decoded strings
The threat actors responsible for this malware appear to have spent some amount of effort to develop their own custom communication protocol.
They did not simply use an off-the-shelf web server for their command and control server, as is commonly done.
Instead, they created their own command and control mechanism.
The backdoor uses a custom binary protocol on TCP port 443, a well-known port that is unlikely to be blocked by traditional firewalls due to its use in HTTPS connections.
The packet seen in Figure 6 is encoded with a combination of bit shifting (see Figure 7) and XOR with a key of 0x1B before it is sent.
The bits are always rotated to the left 3 times before doing the XOR operation.
This is an improvement from the previous version where the packet was only XOR encoded with a key of 0x1B.
Figure 6.
Initial packet sent by the client to the server
Figure 7.
Bit shifting function used in the encode/decode routine for network packets
After decoding the packet, we can see a breakdown of different fields.
Figure 8 shows the initial packet sent by the client to the server.
It is relatively empty aside from the “magic” bytes, length of data and type of communication.
Figure 8.
Initial packet sent by the client to the server (decoded)
Depending on the command response sent from the server, a packet may be bigger than 0x52 bytes.
Data beyond 0x52 bytes is zlib compressed then encrypted with AES in CBC mode with a null initialization vector (IV) and a key sent from the server that is padded to 32 bytes.
We captured live traffic from the server, and observed that the encryption keys sent from the server are ephemeral.
This means that each new session with the server is given a different key used to encrypt data sent back and forth within that session.
This is a marked improvement compared to the previous version, where only XOR encoding with a one-byte key was used for encryption.
After decoding the packet it receives from the server, the backdoor validates certain fields like the “magic” bytes and makes sure the length of the data being received is not over a certain amount.
Throughout the program execution, it also checks and handles any errors that may have been generated.
The command and control server communication sequence is as follows:
The client initiates a session with the server by sending a packet with 0x2170272 in the command field.
The server then responds with an ephemeral encryption key and a command.
The client checks if the received packet from the server is valid.
The client executes the command sent by the server and responds with a zlib compressed and AES encrypted blob of the result then sends this back to the server.
Unlike the previous versions of OceanLotus where the commands can be easily gathered from its strings, the author has obfuscated the functions with constant values.
We decoded the following available commands as seen in Figure 9.
Figure 9.
List of commands available
When the backdoor is launched, a file is created in /Library/Preferences/.files or ~/Library/Preferences/.files depending on the victim’s user ID.
This file (see Figure 10) contains a timestamp and the victim’s name concatenated with the machine’s serial number which is then hashed twice with MD5.
This is then copied to a buffer that is 0x110 bytes long and AES encrypted in CBC mode with a null IV and a key of “pth”.
It is then saved into the file.
Timestamp + MD5(MD5(<victim’s name + machine serial number>))
After this file is created, the client sends its first packet to the server with 0x2170272 in the command field.
The server acknowledges and responds with the same command and the client verifies that the file has been created.
