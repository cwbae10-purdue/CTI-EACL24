First discovered in 2013, Upatre is primarily a downloader tool responsible for delivering additional trojans onto the victim host.
It is most well-known for being tied with the Dyre banking trojan, with a peak of over 250,000 Upatre infections per month delivering Dyre back in July 2015.
In November 2015 however, an organization thought to be associated with the Dyre operation was raided, and subsequently the usage of Upatre delivering Dyre dropped dramatically, to less than 600 per month by January 2016.
Today, the Upatre downloader tool is effectively no longer in use by criminal organizations.
However, one of the many interesting aspects of the Upatre tool had always been its constant adaptive nature where the developers continuously added features and capabilities to the tool to increase its efficacy.
In March 2018, Unit 42 researchers collected a sample of Upatre which was compiled in December 2016 but at the time was largely undetectable by most automated detection systems .
Because of this, we analyzed the sample to afford awareness to those interested in this malware and its evolution.
This previously undocumented variant features significant code flow obscuration, a pro re nata means of decryption for network communications, and of particular interest, the method in which this variant evades virtual machine detection.
In this post we highlight these techniques identified during our analysis.
Malware Overview Upatre is a stage-0 malware, which basically means it’s a downloader.
The malware is used to download and install a payload onto the affected system.
The payload is retrieved from hardcoded domain(s) and is typically another piece of malware.
Historically, Upatre has acted as a downloader for malware families such as Dyre, GameOver Zeus, Kegotip, Locky, and Dridex to name a few.
However, in this case no payload was delivered.
Additionally, variants such as this one collect information from the target and transmit the data via an HTTP POST request.
This newly observed variant comes packed with several characteristics and capabilities that stood out to us during analysis.
Attributes in the PE header suggest that the malware is written in Visual C++ and several of the PE sections have high entropy classification, which indicates that the binary is packed.
The PE resource section also contains images of Google Chrome, so when the binary is placed on the target machine, it appears to be that of the Google Chrome web browser.
One of the key features about this variant that stood out during our analysis is how it detects whether or not it is running within a virtual machine.
Although virtual machine detection is anything but new, in this variant, it is handled a bit differently than other samples previously analyzed by Unit 42.
To, evade detection, the newly observed variant enumerates the running processes on the host, generates a CRC32 hash of the process name, performs an XOR with a hard-coded key of 0x0F27DC411, and finally compares the newly computed value against a list of values stored in an array within the code.
We observed the following values:
This version of Upatre will not transmit any data via HTTP POST to any of the target domains if one of these values is found.
In the event one of the values are found, the malware will sleep for six seconds and then will restart the entire check again.
We were unable to determine every corresponding process name from the CRC32 list above, however, we were able to decipher the following process names:
Other notable functionality of this new version of the Upatre malware includes:
In-memory loading of code
Disables the following Windows services: Windows Security Center Internet Connection Sharing Windows Firewall Windows Defender Windows Update Windows Defender Network Inspection Service
Windows Security Center
Internet Connection Sharing
Windows Firewall
Windows Defender
Windows Update
Windows Defender Network Inspection Service
Disables Windows security notification balloons on Windows 7 and up
Disables Internet Explorer Phishing Filter
Disables Windows User Access Control Notifications
Launches a trusted Windows application msiexec.exe and injects code into its memory space using an undocumented technique
Heavy use of obfuscated and optimized code to thwart code analysis
Use of non-essential Windows API’s for stack pivoting to mask intended API
Multiple layers of custom encoding used for individual strings decoding.
Does not share encoding routine with other encoded values
Network Communication Another feature of this sample is the use of top level domains (TLD) of.
bit.
The intended domains are encrypted and only decrypted when the malware is ready to use them.
This new sample attempts to resolve two domains, bookreader.bit and doghunter.bit via the following hardcoded DNS Servers:
31.3.135.232
193.183.98.154
5.135.183.146
84.201.32.108
185.133.72.100
96.90.175.167
104.238.186.189
DNS resolution for .bit domains use hardcoded DNS servers and is handled via TCP versus traditional UDP.
This is because .bit domains are based on Namecoin and aren’t regulated by ICANN.
Additionally, the hardcoded DNS server IPs we identified in this sample are all associated with OpenNIC Public DNS servers.
According to OpenNIC, when using OpenNIC DNS servers .bit domains are resolved through centralized servers that generate a DNS zone from the Namecoin blockchain; therefore, the secure nature of using Namecoin as a decentralized means of DNS is not actually being utilized here.
If domain resolution is successful, the malware will then perform an HTTP POST request similar to the following:
