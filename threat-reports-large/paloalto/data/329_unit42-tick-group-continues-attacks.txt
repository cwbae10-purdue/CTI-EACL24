The “Tick” group has conducted cyber espionage attacks against organizations in the Republic of Korea and Japan for several years.
The group focuses on companies that have intellectual property or sensitive information like those in the Defense and High-Tech industries.
The group is known to use custom malware called Daserf, but also employs multiple commodity and custom tools, exploit vulnerabilities, and use social engineering techniques.
Regarding the command and control (C2) infrastructure, Tick previously used domains registered through privacy protection services to keep their anonymity, but have moved to compromised websites in recent attacks.
With multiple tools and anonymous infrastructure, they are running longstanding and persistent attack campaigns.
We have observed that the adversary has repeatedly attacked a high-profile target in Japan using multiple malware families for the last three years.
Symantec was first to publicly report on Tick, followed by LAC in 2016.
These reports discussed the group’s malware, Daserf (a.k.a Muirim or Nioupale) and some additional downloader programs.
Though Daserf wasn’t a popular attack tool at the time of publishing the two reports, it dates back to at least 2011.
Using AutoFocus, we were able to identify the link among Daserf and two other threats, 9002 and Invader.
These threats shared infrastructure between July 2012 and April 2013.
Figure 1 Sharing C2 servers among threats
Invader (a.k.a Kickesgo) is a backdoor that injects its main code into a legitimate process, such as explorer.exe, and has following functions:
Logs keystrokes and mouse movement
Captures screenshots
Opens cmd.exe shell
Enumerates processes
Executes programs
Removes itself
Enumerates all opening TCP and UDP ports
9002 is the infamous RAT frequently seen in targeted attacks reported by various security vendors, including Palo Alto Networks.
Interestingly, the C2 servers linking 9002 to Daserf were described in the report of an Adobe Flash Zero-day attack from FireEye in 2013.
These domains were registered through the privacy protection services in 2008 and 2011.
krjregh.sacreeflame.com
lywja.healthsvsolu.com
Though we don’t know the targets of these malware samples at the time of writing this article, we suspect the same group is behind these threats for a number of reasons.
The samples of Daserf that shared infrastructure were submitted to VirusTotal only from Japan multiple times in 2013.
As noted in a later section, another Invader sample shared different C2 servers with Daserf.
Symantec reported that Tick exploited additional Adobe Flash and Microsoft Office vulnerabilities.
SecureWorks said the adversary group is abusing a previously undisclosed vulnerability in Japanese Software Asset Management system on endpoints.
Therefore, Tick or their digital quartermaster is capable of deploying new and unique exploits.
In July 2016, we identified a compromised website in Japan that was hosting a Daserf variant.
The web server was also a C2 server for another threat, Minzen (a.k.a, XXMM, Wali, or ShadowWali).
The threat often uses compromised web servers in Japan and the Republic of Korea.
As Kaspersky and Cybereason recently posted, Minzen is a modular malware that has both 32-bit and 64-bit components in its resource section or configuration data in its body.
One of the Minzen samples (SHA256: 9374040a9e2f47f7037edaac19f21ff1ef6a999ff98c306504f89a37196074a2) found in the Republic of Korea in December 2016 installs simple backdoor module as a final payload on a compromised computer.
It opens a TCP port and receives commands from a remote attacker.
According to the debug path in the body, the author of the tool called it “NamelessHdoor,” and its internal version is identified as “V1.5.”
Figure 2 Debug path left in the backdoor module in Minzen
The payload is based on “Nameless Backdoor” which has been publicly available for more than ten years.
The oldest code we could identify was hosted on a famous Chinese source code sharing site since 2005.
The author of the NamelessHdoor appears to have created additional versions of the Nameless Backdoor by removing unnecessary functions, and added open-source DLL injection code from ReflectiveDLLLoader.
Figure 3 Nameless Backdoor posted on Chinese Source File Sharing Site
There is minimal public information regarding the Nameless Backdoor, except for the interesting report from Cyphort in 2015.
The researcher of the company analyzed multiple threats, including Invader, Nioupale(Daserf) and Hdoor found in an attack against an Asian financial institution.
We examined the sample described in the report as Hdoor and found it’s a previous version of the NamelessHdoor we discovered in the Minzen sample, but without support for DLL injection.
Figure 4 Strings in NamelessHdoor sample found in 2015
Other interesting samples in the report are dllhost.exe and Shell64.dll.
We don’t have the same files but found possible variants close to their description in the article.
These include the following:
Executable files that connect to the same remote server, blog.softfix.co.kr:80, download a DLL file and execute the ‘lowmain’ export function.
DLL files have ‘lowmain’ and ‘main’ exports.
It turned out that the DLL files we found are a custom variant of Gh0st RAT, and the EXE files download the RAT.
Since the source code is publicly available, Gh0st RAT has been used by multiple actors for years.
The domain, softfix.co.kr was registered in 2014.
One of subdomains, news.softfix.co.kr was the C2 server of Daserf (SHA256: 9c7a34390e92d4551c26a3feb5b181757b3309995acd1f92e0f63f888aa89423).
Another subdomain, bbs.softfix.co.kr was hosted on same IP address as bbs.gokickes.com, which was reported as the C2 server of Invader by Cyphort.
We also identified www.gokickes.com was the C2 of another Invader variant (SHA256: 57e1d3122e6dc88d9eb2989f081de88a0e6864e767281d509ff58834928895fb).
In addition to the infrastructure, the attacker also shared code.
The Gh0st downloaders employ simple substitution ciphers for hiding strings.
Figure 5 Decryption code in Gh0st Downloader
The cipher converts one character to another based on a substitution table, which can be seen below.
As an example, the character ‘K’ in plain text is changed to ‘5’ in cipher text, ‘h’ is converted to ‘j’ and so on.
The string ‘connect’ was encoded to ‘zF((0za’ using this table.
