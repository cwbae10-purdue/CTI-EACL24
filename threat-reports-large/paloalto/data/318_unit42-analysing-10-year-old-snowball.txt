Much has been written about the malware toolkit dubbed Animal Farm which is made up of several implants known as Babar, Bunny, NBot, Dino, Casper and Tafacalou.
Some of these tools have been used in past attacks against organizations, companies and individuals.
One of the first tools believed to be used by this adversary to target a potential victim is Babar, also known as SNOWBALL.
Previous samples of SNOWBALL date back to 2011.
However, Palo Alto Networks Unit 42 has identified a much older version.
This version of the malware dates back to 2007 according to its compilation time stamp which we believe is valid.
We discovered this sample by coincidence while searching for another unrelated malware in a large malware repository.
While looking at the strings and the structure, we could make a connection to previously published documents and decided to do a deeper analysis.
Analysing historical malware samples helps us learn about its set of features and technical capabilities.
This helps us compare a tool used by one adversary to that used by similarly adversaries at that time.
This earlier sample of Babar uses many features not present in later versions.
The sample also uses a compromised third party website as a C2 server like later versions.
We also found a simple bug and a design flaw in the code you wouldn’t expect from malware developed by mature actors.
The Loader
The PE sample comes in form of a loader which has a compilation time stamp of 11/09/2007 11:37:36 PM.
The loader contains a resource named MYRES (Figure 1) where the payload DLL is stored.
Figure 1.
PE resource named MYRES with main payload DLL
The version info resource language ID is 1036 which stands for French.
The following clear text strings can be found in the loader:
At the beginning, it changes the error mode of the process to handle the following errors:
SEM_NOOPENFILEERRORBOX
SEM_NOGPFAULTERRORBOX
SEM_FAILCRITICALERRORS
For this, it sets up an exception handler with the address to ExitProcess().
Thus, if any of the errors occur the malware just exits.
Next, it tries to gain debug privileges and checks if the major OS version is >= Windows Vista and the platform ID is VER_PLATFORM_WIN32_NT.
If so, if tries to create a file named event.log in the %ALLUSERSPROFILE% folder.
However, the authors forget to append the character “\” before appending the hardcoded string “event.log”.
This results in the creation of the following file:
If the call to CreateFile() fails, it tries to delete this file.
Next, it tries to get the local AppData folder path first by querying the %APPDATA% environment variable and if that fails, it looks in the shell folders in the registry.
This data is then used to create the following file paths with the hardcoded file names:
The malware also tries to delete any traces it was executed by deleting the corresponding entries in the following registry keys:
After this, the malware checks if its main module is already present on a victim’s system by trying to open the file:
If the file is present, the malware checks if the module file name of the process is as follows and exits otherwise:
If it matches the malware creates a temporary file in the local user’s temp folder and copies the resource named MYRES into it.
This file is the payload DLL which then gets moved as wmimgnt.dll to the AppData folder.
The file attributes are changed to hidden and the file time is changed to make it look like an old file.
The same procedure is done with the initial file which gets copied as wmimngt.exe into the AppData folder.
Thereafter, the malware checks again the major OS version and platform ID like previously and opens the following registry key to get the default internet browser:
The malware authors assumed the browser string always ends with a “.exe” extension and calculate the string in the following manner:
The calculation of the string length in v4 only works if the default browser is for example Internet Explorer or Firefox, as these browsers have an .exe extension in the registry key:
While a browser like Chrome uses the following string:
In this case, the string length gets wrongly calculated and the subsequent call to memcpy() fails with an error so the exception handler kicks in to terminate the process.
However, as Chrome was first released in 2008 and the malware was coded earlier, this can’t be considered as a bug.
After retrieving the string of the default browser from registry, it builds the following string to get the application path of it:
If this was successful it searches for the string “iexplore.exe” in the path and appends the string ” -embedding” to it.
If it failed, the malware retrieves the ProgramFiles path via the environment variable “%ProgramFiles%” and appends the string “\Internet Explorer\iexplore.exe -embedding”.
The command line argument “-embedding” does the following according to Microsoft:
At last, it creates a suspended process of Internet Explorer and injects the payload DLL via the infamous CreateRemoteThread() method.
The Payload DLL
This sample has a compilation time stamp of 11/09/2007 11:37:46 PM (10 seconds after the loader.)
It contains an encrypted resource named XML which contains configuration data.
The encryption algorithm RC4 is used with the key +37:*$pK#s.
Both the version info and the XML resource language IDs have again the value 1036 (French).
Decrypted configuration data:
As can be seen, a third-party website was compromised as C2 server to host a script named outbase.php.
The domain (cpcc-rdc.org) is the official site of Permanent Council of Accounting of the Democratic Republic of the Congo.
The script is not online anymore as the attack was most likely carried many years ago.
The following clear text strings can be found in the DLL:
The sample only executes if the reason code why the DLL entry-point function was being called is DLL_PROCESS_ATTACH.
At first, the malware decrypts the XML configuration data to memory, searches for the XML tags <RUN_KEY> and <CONFIG_KEY> and extracts their content.
With this data, it checks if the malware’s persistency is already present in the registry Run key and creates it if it’s not the case:
Thereafter, it decrypts the data of the following XML tags and stores them in memory:
The implementation of this part of the code is somewhat flawed, since the malware contains the encrypted configuration data, but the same data (except for the C2 domain) is also present as clear text strings.
If the decryption didn’t work it uses the clear text strings.
Figure 2.
Clear text configuration data
It also creates the following new XML tags based on the old ones:
All the XML tags are then RC4 encrypted with key +37:*$pK#s and stored in the following registry key:
Then, it tries to get system information from the following registry keys:
The malware also retrieves the current system time, encrypts it with RC4 and the same key and stores it in the following registry key:
Then, it creates a string with the previously retrieved system information, the configuration data and the following string template:
Next, the MD5 hash of this string is calculated and encrypted with RC4 and the same key again.
This encrypted string gets then stored in the following registry key:
To send victim information to the C2 server, it prepares a URL query string by entering the “INFO” branch.
The other query branch named “CMD” is entered to send back the result of a command sent by the C2 server.
Figure 3.
URL query string creation branches
At first, the checks if the <ENCODE> XML tag is set to 0x1 and if so it encrypts the previously created string with the victim’s information with the password contained in the <PASSWORD> XML tag.
It does this by bytewise adding 0x80 to the password string and then using an encoded byte to bytewise XOR the information string.
The encrypted string gets then Base64 encoded and the characters “+”, “/” and “=” URL encoded (“%2B”, “%2F”, “%3D”).
The following string template is then used together with the encrypted data to form the final URL query string:
The first string is the previously calculated MD5 hash, the decimal number is made of a random number between 3000/3600 ( XML tag) and 4000/4800 ( XML tag).
The last string is made of the hardcoded “INFO” string along with the Base64 encoded victim data.
For example:
To test if the computer is connected to the internet it uses InternetGetConnectedState() API function.
Next, it enters either the “main” or the “safe” branch referring to the XML tags.
The main branch is the usual execution path, while the safe branch only gets used for a specific malware command.
If there is no internet connection it sleeps for a certain time, otherwise it contacts the C2 server present in the <HOST> XML tag together with the URL query string.
The malware has the ability to send data with both HTTP request methods, GET and POST.
However, this sample only uses the POST request method along with the following content type field:
After contacting the C2 server, the malware copies the response into memory and scans for the marker =#-+ApAcHe_ToMcAt+-#= taken from the <PREFIX> XML tag.
If successful, the response gets Base64 decoded and decrypted with the same algorithm used to encrypt the victim information string.
The PHP script outbase.php can respond with one of the commands listed below, which the malware then executes.
To process some commands, the malware creates an anonymous pipe and a hidden instance of cmd.exe or command.com, depending on the platform ID.
The command line output gets redirected to the pipe, read into memory and later send back encrypted and encoded via the “CMD” URL query branch.
Possible malware commands:
1. pwd Get current working directory
2. cd change directory to delivered string
3. part Get list and type of partitions
4. reboot Reboot system
5. shutdown Shutdown system
6. download Download file < 512,000 bytes delivered in form of a URL (“500 Ko”) to disk
7. big Download file > 512,000 bytes delivered in form of a URL (“500 Ko”) to disk
8. wget Download file with predefined HTTP query string
9. fetch Download file via URLDownloadToFile()
10. wput Download data from internet via download command and sent data back via “data=” query
11. info Send back victim system information (see above)
12. showconfig Send back current config data with following string template:
13. timeout Change current timeout interval variables
14. timeout_main Change timeout intervals in main XML configuration
15. timeout_safe Change timeout intervals in safe XML configuration
16. newurl_main Change host URL in main XML configuration
17. newurl_safe Change host URL in safe XML configuration
18. movetosite Change current host URL variable
19. listprocess Get list of current processes with PID
20. killprocess Terminate process delivered via string
21. kitkit Terminate itself
22. uninstall Delete malware files on disk and registry entries
This malware has a small set of features ranging from retrieving system information, to downloading files or killing processes on a victim’s system.
Technically, it is not outstanding and can be considered only average compared to alleged state sponsored malware written at that time (e.g.
Careto or Regin).
The code and structure is similar to the Casper implant which is most likely based on this implant.
The malware contains an obvious design flaw leaving the main part of the configuration data visible in clear text.
AutoFocus customers can identify this, and other samples related to it using the Snowball
WildFire and Traps properly classify Snowball samples as malicious.
Thanks to Esmid Idrizovic for his assistance in this analysis.
Hashes (SHA-256)
Loader: c71b1a31bdf3a08fa99ed1f6a1c5ded61e66f3d41e4ed88a12430d1c14ed10ca Payload DLL: a9220590d3c35fe22df9d38a066ca8d112b83764b39fea98b38761daa64c77b8
