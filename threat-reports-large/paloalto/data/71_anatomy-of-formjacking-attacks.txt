The rise of the Internet has contributed positively in many ways to people’s lives and you can find almost any service on the internet now.
However, the convenience of the internet also opens a gate to use malware to steal people’s confidential information, and unfortunately, more and more malware authors are taking advantage of this.
Formjacking, where cybercriminals inject malicious JavaScript code to hack a website and take over the functionality of the site’s form page to collect sensitive user information, is one of the fastest growing forms of cyber attack.
It is designed to steal credit card details and other personal information from payment forms that are captured on the “checkout” pages of e-commerce websites.
When a user unknowingly visits a compromised shopping website which has been hacked, they put items in their cart and go to checkout, inputting their credit card information (e.g.
Name, address, email, credit card number, CVV, expiration date, etc.)
on the checkout page.
When they click the “checkout” or “submit” button, a malicious code collects the users’ input information and sends it to an attacker’s Command & Control (C2) server.
The original purchase request is unaffected by this and the user receives their products as expected.
Many large websites have been compromised using this technique, such as British Airways, Ticketmaster, Delta, Newegg and Topps.com Sports Collectibles.
The process flow is in Figure 1, below:
Writing formjacking code and deploying it to a compromised site is not very difficult for an attacker to do and allows them to steal credit card information quickly and easily without needing to deploy malware or compromise a system.
This makes it very attractive for attackers, especially considering e-commerce service is very popular today.
This blog provides a deep-dive into how formjacking code works.
Palo Alto Networks customers are protected from this type of attack: WildFire detects and correctly identifies formjacking attacks as malicious and PANDB also identifies the URLs as malicious.
Below is a typical formjacking sample, which as of April 8, 2020 was only detected as malicious by three entities in VirusTotal.
(SHA256:a79da1f007cfc88e4f8ae13623e2b752d2da03bcf9d51a74ea1fca2e6e6fca14)
The code is very long and highly obfuscated; we had to deobfuscate it before we were able to read it.
Below is part of the original code.
At first, we can see the basic construct is:
Taking var1 as an example, we break it down into three parts:
[“W*![EnTa/mKelU*R=R'3/ngu8mpe/rqxo7N_EcglaDrvtla5qoK‘!
]” is the first part and is an encrypted string.
[(785034646 * “kNL7xIvgS.\x85j}_K=” [“charCodeAt”](2) + 22.0)[“toString”]((“Y^8ZH/D:0$or5<+\x8aqU” [“charCodeAt”](3) * 0 +36.0))] is the second part.
We can calculate (785034646 * “kNL7xIvgS.\x85j}_K=” [“charCodeAt”](2) + 22.0) to get 59662633118.
We can also calculate (“Y^8ZH/D:0$or5<+\x8aqU” [“charCodeAt”](3) * 0 +36.0)) to get 36.
So the second part is the same as (59662633118).toString(36), which means the result is “replace” string, refer to toString function documentation.
We can calculate (785034646 * “kNL7xIvgS.\x85j}_K=” [“charCodeAt”](2) + 22.0) to get 59662633118.
We can also calculate (“Y^8ZH/D:0$or5<+\x8aqU” [“charCodeAt”](3) * 0 +36.0)) to get 36.
So the second part is the same as (59662633118).toString(36), which means the result is “replace” string, refer to toString function documentation.
(/[\!8ET\/WNl5vRDpgUqKx37]/g, "") is the third part, which is a regex pattern.
Since var1 is the same as "xxxxx".replace(/[\!8ET\/W
