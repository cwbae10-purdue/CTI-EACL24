So, here's an interesting trick I've been using, that I've never seen anyone mention before.
One of the new features that AMD added to the x86 instruction set when they did the AMD64/x86-64, was that in "long mode" (64-bit mode), the encoding for the old 32-bit immediate offset addressing mode, is now a 32-bit offset from the current RIP, not from 0x00000000 like before.
In English, this means that you don't have to know the absolute address of something you want to reference, you only need to know how far away it is from the currently executing instruction [technically the next instruction].
So, let's say you're writing a fairly generic execve() shellcode.
I'm going to assume that everyone here has read Aleph One's paper on this, so I'm not going to repeat that here.
(Gripe: What is it with all these shellcode tutorials, that are just slightly rewritten copies of "Smashing the Stackâ€¦"?)
This is what we want to do:
execve() example in C
int main() {
name[0] = "/bin/sh";
name[1] = NULL;
execve(name[0], name, NULL);
