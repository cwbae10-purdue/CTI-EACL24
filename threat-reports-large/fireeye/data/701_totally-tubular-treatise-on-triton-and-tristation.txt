In December 2017, FireEye's Mandiant discussed an incident response involving the TRITON framework.
The TRITON attack and many of the publicly discussed ICS intrusions involved routine techniques where the threat actors used only what is necessary to succeed in their mission.
For both INDUSTROYER and TRITON, the attackers moved from the IT network to the OT (operational technology) network through systems that were accessible to both environments.
Traditional malware backdoors, Mimikatz distillates, remote desktop sessions, and other well-documented, easily-detected attack methods were used throughout these intrusions.
Despite the routine techniques employed to gain access to an OT environment, the threat actors behind the TRITON malware framework invested significant time learning about the Triconex Safety Instrumented System (SIS) controllers and TriStation, a proprietary network communications protocol.
The investment and purpose of the Triconex SIS controllers leads Mandiant to assess the attacker's objective was likely to build the capability to cause physical consequences.
TriStation remains closed source and there is no official public information detailing the structure of the protocol, raising several questions about how the TRITON framework was developed.
Did the actor have access to a Triconex controller and TriStation 1131 software suite?
When did development first start?
How did the threat actor reverse engineer the protocol, and to what extent?
What is the protocol structure?
FireEye’s Advanced Practices Team was born to investigate adversary methodologies, and to answer these types of questions, so we started with a deeper look at the TRITON’s own Python scripts.
TRITON – Malware framework designed to operate Triconex SIS controllers via the TriStation protocol.
TriStation – UDP network protocol specific to Triconex controllers.
TRITON threat actor – The human beings who developed, deployed and/or operated TRITON.
TriStation is a proprietary network protocol and there is no public documentation detailing its structure or how to create software applications that use TriStation.
The current TriStation UDP/IP protocol is little understood, but natively implemented through the TriStation 1131 software suite.
TriStation operates by UDP over port 1502 and allows for communications between designated masters (PCs with the software that are “engineering workstations”) and slaves (Triconex controllers with special communications modules) over a network.
To us, the Triconex systems, software and associated terminology sound foreign and complicated, and the TriStation protocol is no different.
Attempting to understand the protocol from ground zero would take a considerable amount of time and reverse engineering effort – so why not learn from TRITON itself?
With the TRITON framework containing TriStation communication functionality, we pursued studying the framework to better understand this mysterious protocol.
Work smarter, not harder, amirite?
The TRITON framework has a multitude of functionalities, but we started with the basic components:
TS_cnames.pyc # Compiled at: 2017-08-03 10:52:33
TsBase.pyc # Compiled at: 2017-08-03 10:52:33
TsHi.pyc # Compiled at: 2017-08-04 02:04:01
TsLow.pyc # Compiled at: 2017-08-03 10:46:51
TsLow.pyc (Figure 1) contains several pieces of code for error handling, but these also present some cues to the protocol structure.
Figure 1: TsLow.pyc function print_last_error()
In the TsLow.pyc’s function for print_last_error we see error handling for “TCM Error”.
This compares the TriStation packet value at offset 0 with a value in a corresponding array from TS_cnames.pyc (Figure 2), which is largely used as a “dictionary” for the protocol.
Figure 2: TS_cnames.pyc TS_cst array
From this we can infer that offset 0 of the TriStation protocol contains message types.
This is supported by an additional function, tcm_result, which declares type, size = struct.unpack('<HH', data_received[0:4]), stating that the first two bytes should be handled as integer type and the second two bytes are integer size of the TriStation message.
This is our first glimpse into what the threat actor(s) understood about the TriStation protocol.
Since there are only 11 defined message types, it really doesn't matter much if the type is one byte or two because the second byte will always be 0x00.
We also have indications that message type 5 is for all Execution Command Requests and Responses, so it is curious to observe that the TRITON developers called this “Command Reply.” (We won’t understand this naming convention until later.)
Next we examine TsLow.pyc’s print_last_error function (Figure 3) to look at “TS Error” and “TS_names.” We begin by looking at the ts_err variable and see that it references ts_result.
Figure 3: TsLow.pyc function print_last_error() with ts_err highlighted
We follow that thread to ts_result, which defines a few variables in the next 10 bytes (Figure 4): dir, cid, cmd, cnt, unk, cks, siz = struct.unpack('<, ts_packet[0:10]).
Now things are heating up.
What fun.
There’s a lot to unpack here, but the most interesting thing is how this piece script breaks down 10 bytes from ts_packet into different variables.
Figure 4: ts_result with ts_packet header variables highlighted
Figure 5: tcm_result
Referencing tcm_result (Figure 5) we see that it defines type and size as the first four bytes (offset 0 – 3) and tcm_result returns the packet bytes 4:-2 (offset 4 to the end minus 2, because the last two bytes are the CRC-16 checksum).
Now that we know where tcm_result leaves off, we know that the ts_reply “cmd” is a single byte at offset 6, and corresponds to the values in the TS_cnames.pyc array and TS_names (Figure 6).
The TRITON script also tells us that any integer value over 100 is a likely “command reply.” Sweet.
When looking back at the ts_result packet header definitions, we begin to see some gaps in the TRITON developer's knowledge: dir, cid, cmd, cnt, unk, cks, siz = struct.unpack('<, ts_packet[0:10]).
We're clearly speculating based on naming conventions, but we get an impression that offsets 4, 5 and 6 could be "direction", "controller ID" and "command", respectively.
Values such as "unk" show that the developer either did not know or did not care to identify this value.
We suspect it is a constant, but this value is still unknown to us.
Figure 6: Excerpt TS_cnames.pyc TS_names array, which contain TRITON actor’s notes for execution command function codes
The TRITON threat actor’s knowledge and reverse engineering effort provides us a better understanding of the protocol.
From here we can start to form a more complete picture and document the basic functionality of TriStation.
We are primarily interested in message type 5, Execution Command, which best illustrates the overall structure of the protocol.
Other, smaller message types will have varying structure.
Figure 7: Sample TriStation "Allocate Program" Execution Command, with color annotation and protocol legend
Minute discrepancies aside, the TriStation structure detailed in Figure 7 is supported by other public analyses.
Foremost, researchers from the Coordinated Science Laboratory (CSL) at University of Illinois at Urbana-Champaign published a 2017 paper titled "Attack Induced Common-Mode Failures on PLC-based Safety System in a Nuclear Power Plant".
The CSL team mentions that they used the Triconex System Access Application (TSAA) protocol to reverse engineer elements of the TriStation protocol.
TSAA is a protocol developed by the same company as TriStation.
Unlike TriStation, the TSAA protocol structure is described within official documentation.
CSL assessed similarities between the two protocols would exist and they leveraged TSAA to better understand TriStation.
The team's overall research and analysis of the general packet structure aligns with our TRITON-sourced packet structure.
There are some awesome blog posts and whitepapers out there that support our findings in one way or another.
Writeups by Midnight Blue Labs, Accenture, and US-CERT each explain how the TRITON framework relates to the TriStation protocol in superb detail.
When TRITON was discovered, we began to wonder how the TRITON actor reverse engineered TriStation and implemented it into the framework.
We have a lot of theories, all of which seemed plausible: Did they build, buy, borrow, or steal?
Or some combination thereof?
Our initial theory was that the threat actor purchased a Triconex controller and software for their own testing and reverse engineering from the "ground up", although if this was the case we do not believe they had a controller with the exact vulnerable firmware version, else they would have had fewer problems with TRITON in practice at the victim site.
They may have bought or used a demo version of the TriStation 1131 software, allowing them to reverse engineer enough of TriStation for the framework.
They may have stolen TriStation Python libraries from ICS companies, subsidiaries or system integrators and used the stolen material as a base for TriStation and TRITON development.
But then again, it is possible that they borrowed TriStation software, Triconex hardware and Python connectors from government-owned utility that was using them legitimately.
Looking at the raw TRITON code, some of the comments may appear oddly phrased, but we do get a sense that the developer is clearly using many of the right vernacular and acronyms, showing smarts on PLC programming.
The TS_cnames.pyc script contains interesting typos such as 'Set lable', 'Alocate network accepted', 'Symbol table ccepted' and 'Set program information reponse'.
These appear to be normal human error and reflect neither poor written English nor laziness in coding.
The significant amount of annotation, cascading logic, and robust error handling throughout the code suggests thoughtful development and testing of the framework.
This complicates the theory of "ground up" development, so did they base their code on something else?
While learning from the TriStation functionality within TRITON, we continued to explore legitimate TriStation software.
We began our search for "TS1131.exe" and hit dead ends sorting through TriStation DLLs until we came across a variety of TriStation utilities in MSI form.
We ultimately stumbled across a juicy archive containing "Trilog v4."
Upon further inspection, this file installed "TriLog.exe," which the original TRITON executable mimicked, and a couple of supporting DLLs, all of which were timestamped around August 2006.
When we saw the DLL file description "Tricon Communications Interface" and original file name "TricCom.DLL", we knew we were in the right place.
With a simple look at the file strings, "BAZINGA!"
We struck gold.
Tricon Communications Interface
TricCom Dynamic Link Library
Copyright © 1993-2006 Triconex Corporation
The tr1com40.DLL is exactly what you would expect to see in a custom application package.
It is a library that helps support the communications for a Triconex controller.
If you've pored over TRITON as much as we have, the moment you look at strings you can see the obvious overlaps between the legitimate DLL and TRITON's own TS_cnames.pyc.
Figure 8: Strings excerpt from tr1com40.DLL
Each of the execution command "error codes" from TS_cnames.pyc are in the strings of tr1com40.DLL (Figure 8).
We see "An MP has re-educated" and "Invalid Tristation I command".
Even misspelled command strings verbatim such as "Non-existant data item" and "Alocate network accepted".
We also see many of the same unknown values.
What is obvious from this discovery is that some of the strings in TRITON are likely based on code used in communications libraries for Trident and Tricon controllers.
In our brief survey of the legitimate Triconex Corporation binaries, we observed a few samples with related string tables.
$Workfile: LAGSTRS.CPP $ $Modtime: Jul 21 1999 17:17:26 $ $Revision: 1.0
$Workfile: TR1STRS.CPP $ $Modtime: May 16 2006 09:55:20 $ $Revision: 1.4
$Workfile: LAGSTRS.CPP $ $Modtime: Jul 21 1999 17:17:26 $ $Revision: 1.0
$Workfile: TR1STRS.CPP $ $Modtime: May 16 2006 09:55:20 $ $Revision: 1.4
$Workfile: LAGSTRS.CPP $ $Modtime: Jul 21 1999 17:17:26 $ $Revision: 1.0
$Workfile: TR1STRS.CPP $ $Modtime: May 16 2006 09:55:20 $ $Revision: 1.4
$Workfile: LAGSTRS.CPP $ $Modtime: Jul 21 1999 17:17:26 $ $Revision: 1.0
$Workfile: TR1STRS.CPP $ $Modtime: May 16 2006 09:55:20 $ $Revision: 1.4
We extracted the CPP string tables in TR1STRS and LAGSTRS and the TS_cnames.pyc TS_names array from TRITON, and compared the 210, 204, and 212 relevant strings from each respective file.
TS_cnames.pyc TS_names and tr1com40.dll share 202 of 220 combined table strings.
The remaining strings are unique to each, as seen here:
Go to DOWNLOAD mode
Bad message from module
Bad message type
Bad TMI version number
Module did not respond
Open Connection: Invalid SAP %d
Unsupported message for this TMI version
TS_cnames.pyc TS_names and Tridcom.dll (1999 CPP) shared only 151 of 268 combined table strings, showing a much smaller overlap with the seemingly older CPP library.
This makes sense based on the context that Tridcom.dll is meant for a Trident controller, not a Tricon controller.
It does seem as though Tr1com40.dll and TR1STRS.CPP code was based on older work.
We are not shocked to find that the threat actor reversed legitimate code to bolster development of the TRITON framework.
They want to work smarter, not harder, too.
But after reverse engineering legitimate software and implementing the basics of the TriStation, the threat actors still had an incomplete understanding of the protocol.
In TRITON's TS_cnames.pyc we saw "Unk75", "Unk76", "Unk83" and other values that were not present in the tr1com40.DLL strings, indicating that the TRITON threat actor may have explored the protocol and annotated their findings beyond what they reverse engineered from the DLL.
The gaps in TriStation implementation show us why the actors encountered problems interacting with the Triconex controllers when using TRITON in the wild.
You can see more of the Trilog and Triconex DLL files on VirusTotal.
Tricom Communcations DLL
Parent of Tr1com40.dll
RAR Archive of TriLog
Trident Communications DLL
Seeing Triconex systems targeted with malicious intent was new to the world six months ago.
Moving forward it would be reasonable to anticipate additional frameworks, such as TRITON, designed for usage against other SIS controllers and associated technologies.
If Triconex was within scope, we may see similar attacker methodologies affecting the dominant industrial safety technologies.
Basic security measures do little to thwart truly persistent threat actors and monitoring only IT networks is not an ideal situation.
Visibility into both the IT and OT environments is critical for detecting the various stages of an ICS intrusion.
Simple detection concepts such as baseline deviation can provide insight into abnormal activity.
While the TRITON framework was actively in use, how many traditional ICS “alarms” were set off while the actors tested their exploits and backdoors on the Triconex controller?
How many times did the TriStation protocol, as implemented in their Python scripts, fail or cause errors because of non-standard traffic?
How many TriStation UDP pings were sent and how many Connection Requests?
How did these statistics compare to the baseline for TriStation traffic?
There are no answers to these questions for now.
We believe that we can identify these anomalies in the long run if we strive for increased visibility into ICS technologies.
We hope that by holding public discussions about ICS technologies, the Infosec community can cultivate closer relationships with ICS vendors and give the world better insight into how attackers move from the IT to the OT space.
We want to foster more conversations like this and generally share good techniques for finding evil.
Since most of all ICS attacks involve standard IT intrusions, we should probably come together to invent and improve any guidelines for how to monitor PCs and engineering workstations that bridge the IT and OT networks.
We envision a world where attacking or disrupting ICS operations costs the threat actor their cover, their toolkits, their time, and their freedom.
It's an ideal world, but something nice to shoot for.
There is still much to do for TRITON and TriStation.
There are many more sub-message types and nuances for parsing out the nitty gritty details, which is hard to do without a controller of our own.
And although we’ve published much of what we learned about the TriStation here on the blog, our work will continue as we continue our study of the protocol.
Thanks to everyone who did so much public research on TRITON and TriStation.
We have cited a few individuals in this blog post, but there is a lot more community-sourced information that gave us clues and leads for our research and testing of the framework and protocol.
We also have to acknowledge the research performed by the TRITON attackers.
We borrowed a lot of your knowledge about TriStation from the TRITON framework itself.
Finally, remember that we're here to collaborate.
We think most of our research is right, but if you notice any errors or omissions, or have ideas for improvements, please spear phish contact: [email protected]
Attackers Deploy New ICS Attack Framework “TRITON” and Cause Operational Disruption to Critical Infrastructure
Attack Induced Common-Mode Failures on PLC-Based Safety System in a Nuclear Power Plant: Practical Experience Report
Analyzing the TRITON industrial malware
Repository containting original and decompiled files of TRISIS/TRITON/HATMAN malware
TRISIS Malware Analysis of Safety System Targeted Malware
The following table consists of hex values at offset 0 in the TriStation UDP packets and the associated dictionary definitions, extracted verbatim from the TRITON framework in library TS_cnames.pyc.
Connection Limit Reached
MPS Are Dead
The following table consists of hex values at offset 6 in the TriStation UDP packets and the associated dictionary definitions, extracted verbatim from the TRITON framework in library TS_cnames.pyc.
0: 'Start download all',
1: 'Start download change',
2: 'Update configuration',
3: 'Upload configuration',
4: 'Set I/O addresses',
5: 'Allocate network',
6: 'Load vector table',
7: 'Set calendar',
8: 'Get calendar',
9: 'Set scan time',
10: 'End download all',
11: 'End download change',
12: 'Cancel download change',
13: 'Attach TRICON',
14: 'Set I/O address limits',
15: 'Configure module',
16: 'Set multiple point values',
17: 'Enable all points',
18: 'Upload vector table',
19: 'Get CP status ',
20: 'Run program',
21: 'Halt program',
22: 'Pause program',
23: 'Do single scan',
24: 'Get chassis status',
25: 'Get minimum scan time',
26: 'Set node number',
27: 'Set I/O point values',
28: 'Get I/O point values',
29: 'Get MP status',
30: 'Set retentive values',
31: 'Adjust clock calendar',
32: 'Clear module alarms',
33: 'Get event log',
34: 'Set SOE block',
35: 'Record event log',
36: 'Get SOE data',
37: 'Enable OVD',
38: 'Disable OVD',
39: 'Enable all OVDs',
40: 'Disable all OVDs',
41: 'Process MODBUS',
42: 'Upload network',
43: 'Set lable',
44: 'Configure system variables',
45: 'Deconfigure module',
46: 'Get system variables',
47: 'Get module types',
48: 'Begin conversion table download',
49: 'Continue conversion table download',
50: 'End conversion table download',
51: 'Get conversion table',
52: 'Set ICM status',
53: 'Broadcast SOE data available',
54: 'Get module versions',
55: 'Allocate program',
56: 'Allocate function',
57: 'Clear retentives',
58: 'Set initial values',
59: 'Start TS2 program download',
60: 'Set TS2 data area',
61: 'Get TS2 data',
62: 'Set TS2 data',
63: 'Set program information',
64: 'Get program information',
65: 'Upload program',
66: 'Upload function',
67: 'Get point groups',
68: 'Allocate symbol table',
69: 'Get I/O address',
70: 'Resend I/O address',
71: 'Get program timing',
72: 'Allocate multiple functions',
73: 'Get node number',
74: 'Get symbol table',
80: 'Go to DOWNLOAD mode',
100: 'Command rejected',
101: 'Download all permitted',
102: 'Download change permitted',
103: 'Modification accepted',
104: 'Download cancelled',
105: 'Program accepted',
106: 'TRICON attached',
107: 'I/O addresses set',
108: 'Get CP status response',
109: 'Program is running',
110: 'Program is halted',
111: 'Program is paused',
112: 'End of single scan',
113: 'Get chassis configuration response',
114: 'Scan period modified',
117: 'Module configured',
119: 'Get chassis status response',
120: 'Vectors response',
121: 'Get I/O point values response',
122: 'Calendar changed',
123: 'Configuration updated',
124: 'Get minimum scan time response',
126: 'Node number set',
127: 'Get MP status response',
128: 'Retentive values set',
129: 'SOE block set',
130: 'Module alarms cleared',
131: 'Get event log response',
132: 'Symbol table ccepted',
133: 'OVD enable accepted',
134: 'OVD disable accepted',
135: 'Record event log response',
136: 'Upload network response',
137: 'Get SOE data response',
138: 'Alocate network accepted',
139: 'Load vector table accepted',
140: 'Get calendar response',
141: 'Label set',
142: 'Get module types response',
143: 'System variables configured',
144: 'Module deconfigured',
147: 'Get conversion table response',
148: 'ICM print data sent',
149: 'Set ICM status response',
150: 'Get system variables response',
151: 'Get module versions response',
152: 'Process MODBUS response',
153: 'Allocate program response',
154: 'Allocate function response',
155: 'Clear retentives response',
156: 'Set initial values response',
157: 'Set TS2 data area response',
158: 'Get TS2 data response',
159: 'Set TS2 data response',
160: 'Set program information reponse',
161: 'Get program information response',
162: 'Upload program response',
163: 'Upload function response',
164: 'Get point groups response',
165: 'Allocate symbol table response',
166: 'Program timing response',
167: 'Disable points full',
168: 'Allocate multiple functions response',
169: 'Get node number response',
170: 'Symbol table response',
200: 'Wrong command',
201: 'Load is in progress',
202: 'Bad clock calendar data',
203: 'Control program not halted',
204: 'Control program checksum error',
205: 'No memory available',
206: 'Control program not valid',
207: 'Not loading a control program',
208: 'Network is out of range',
209: 'Not enough arguments',
210: 'A Network is missing',
211: 'The download time mismatches',
212: 'Key setting prohibits this operation',
213: 'Bad control program version',
214: 'Command not in correct sequence',
216: 'Bad Index for a module',
217: 'Module address is invalid',
220: 'Bad offset for an I/O point',
221: 'Invalid point type',
222: 'Invalid Point Location',
223: 'Program name is invalid',
227: 'Invalid module type',
229: 'Invalid table type',
231: 'Invalid network continuation',
232: 'Invalid scan time',
233: 'Load is busy',
234: 'An MP has re-educated',
235: 'Invalid chassis or slot',
236: 'Invalid SOE number',
237: 'Invalid SOE type',
238: 'Invalid SOE state',
239: 'The variable is write protected',
240: 'Node number mismatch',
241: 'Command not allowed',
242: 'Invalid sequence number',
243: 'Time change on non-master TRICON',
244: 'No free Tristation ports',
245: 'Invalid Tristation I command',
246: 'Invalid TriStation 1131 command',
247: 'Only one chassis allowed',
248: 'Bad variable address',
249: 'Response overflow',
250: 'Invalid bus',
251: 'Disable is not allowed',
252: 'Invalid length',
253: 'Point cannot be disabled',
254: 'Too many retentive variables',
256: 'Unknown reject code'
