From January 2018 to March 2018, through FireEye’s Dynamic Threat Intelligence, we observed attackers leveraging the latest code execution and persistence techniques to distribute malicious macro-based documents to individuals in Asia and the Middle East.
We attribute this activity to TEMP.Zagros (reported by Palo Alto Networks and Trend Micro as MuddyWater), an Iran-nexus actor that has been active since at least May 2017.
This actor has engaged in prolific spear phishing of government and defense entities in Central and Southwest Asia.
The spear phishing emails and attached malicious macro documents typically have geopolitical themes.
When successfully executed, the malicious documents install a backdoor we track as POWERSTATS.
One of the more interesting observations during the analysis of these files was the re-use of the latest AppLocker bypass, and lateral movement techniques for the purpose of indirect code execution.
The IP address in the lateral movement techniques was substituted with the local machine IP address to achieve code execution on the system.
In this campaign, the threat actor’s tactics, techniques and procedures (TTPs) shifted after about a month, as did their targets.
A brief timeline of this activity is shown in Figure 1.
Figure 1: Timeline of this recently observed spear phishing campaign
The first part of the campaign (From Jan. 23, 2018, to Feb. 26, 2018) used a macro-based document that dropped a VBS file and an INI file.
The INI file contains the Base64 encoded PowerShell command, which will be decoded and executed by PowerShell using the command line generated by the VBS file on execution using WScript.exe.
The process chain is shown in Figure 2.
Figure 2: Process chain for the first part of the campaign
Although the actual VBS script changed from sample to sample, with different levels of obfuscation and different ways of invoking the next stage of process tree, its final purpose remained same: invoking PowerShell to decode the Base64 encoded PowerShell command in the INI file that was dropped earlier by the macro, and executing it.
One such example of the VBS invoking PowerShell via MSHTA is shown in Figure 3.
Figure 3: VBS invoking PowerShell via MSHTA
The second part of the campaign (from Feb. 27, 2018, to March 5, 2018) used a new variant of the macro that does not use VBS for PowerShell code execution.
Instead, it uses one of the recently disclosed code execution techniques leveraging INF and SCT files, which we will go on to explain later in the blog.
We believe the infection vector for all of the attacks involved in this campaign are macro-based documents sent as an email attachment.
One such email that we were able to obtain was targeting users in Turkey, as shown in Figure 4:
Figure 4: Sample spear phishing email containing macro-based document attachment
The malicious Microsoft Office attachments that we observed appear to have been specially crafted for individuals in four countries: Turkey, Pakistan, Tajikistan and India.
What follows is four examples, and a complete list is available in the Indicators of Compromise section at the end of the blog.
Figure 5 shows a document purporting to be from the National Assembly of Pakistan.
Figure 5: Document purporting to be from the National Assembly of Pakistan
A document purporting to be from the Turkish Armed Forces, with content written in the Turkish language, is shown in Figure 6.
Figure 6: Document purporting to be from the Turkish Armed Forces
A document purporting to be from the Institute for Development and Research in Banking Technology (established by the Reserve Bank of India) is shown in Figure 7.
Figure 7: Document purporting to be from the Institute for Development and Research in Banking Technology
Figure 8 shows a document written in Tajik that purports to be from the Ministry of Internal Affairs of the Republic of Tajikistan.
Figure 8: Document written in Tajik that purports to be from the Ministry of Internal Affairs of the Republic of Tajikistan
Each of these macro-based documents used similar techniques for code execution, persistence and communication with the command and control (C2) server.
This scriptlet code execution technique leveraging INF and SCT files was recently discovered and documented in February 2018.
The threat group in this recently observed campaign – TEMP.Zagros – weaponized their malware using the following techniques.
The macro in the Word document drops three files in a hard coded path: C:\programdata.
Since the path is hard coded, the execution will only be observed in operating systems, Windows 7 and above.
The following are the three files:
Defender.sct – The malicious JavaScript based scriptlet file.
DefenderService.inf – The INF file that is used to invoke the above scriptlet file.
WindowsDefender.ini – The Base64 encoded and obfuscated PowerShell script.
After dropping the three files, the macro will set the following registry key to achieve persistence:
\REGISTRY\USER\SID\Software\Microsoft\Windows\CurrentVersio n\Run\"WindowsDefenderUpdater" = cmstp.exe /s c:\programdata\DefenderService.inf
Upon system restart, cmstp.exe will be used to execute the SCT file indirectly through the INF file.
This is possible because inside the INF file we have the following section:
That section gets indirectly invoked through the DefaultInstall_SingleUser section of INF, as shown in Figure 9.
Figure 9: Indirectly invoking SCT through the DefaultInstall_SingleUser section of INF
This method of code execution is performed in an attempt to evade security products.
FireEye MVX and HX Endpoint Security technology successfully detect this code execution technique.
The code of the Defender.sct file is an obfuscated JavaScript.
The main function performed by the SCT file is to Base64 decode the contents of WindowsDefender.ini file and execute the decoded PowerShell Script using the following command line:
powershell.exe -exec Bypass -c iex([System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String((get-content C:\\ProgramData\\WindowsDefender.ini)
The rest of the malicious activities are performed by the PowerShell Script.
The PowerShell script employs several layers of obfuscation to hide its actual functionality.
In addition to obfuscation techniques, it also has the ability to detect security tools on the analysis machine, and can also shut down the system if it detects the presence of such tools.
Some of the key obfuscation techniques used are:
Character Replacement: Several instances of character replacement and string reversing techniques (Figure 10) make analysis difficult.
Figure 10: Character replacement and string reversing techniques
PowerShell Environment Variables: Nowadays, malware authors commonly mask critical strings such as “IEX” using environment variables.
Some of the instances used in this script are: $eNv:puBLic[13]+$ENv:pUBLIc[5]+'x' ($ENV:cOMsPEC[4,26,25]-jOin'')
XOR encoding: The biggest section of the PowerShell script is XOR encoded using a single byte key, as shown in Figure 11.
Figure 11: PowerShell script is XOR encoded using a single byte key
After deobfuscating the contents of the PowerShell Script, we can divide it into three sections.
The first section of the PowerShell script is responsible for setting different key variables that are used by the remaining sections of the PowerShell script, especially the following variables:
TEMpPAtH = "C:\ProgramData\" (the path used for storing the temp files)
Get_vAlIdIP = https://api.ipify.org/ (used to get the public IP address of the machine)
FIlENAmePATHP = WindowsDefender.ini (file used to store Powershell code)
PRIVAtE = Private Key exponents
PUbLIc = Public Key exponents
Hklm = "HKLM:\Software\"
Hkcu = "HKCU:\Software\"
ValuE = "kaspersky"
DrAGon_MidDLe = [array of proxy URLs]
Among those variables, there is one variable of particular interest, DrAGon_MidDLe, which stores the list of proxy URLs (detailed at the end of the blog in the Network Indicators portion of the Indicators of Compromise section) that will be used to interact with the C2 server, as shown in Figure 12.
Figure 12: DrAGon_MidDLe stores the list of proxy URLs used to interact with C2 server
The second section of the PowerShell script has the ability to perform encryption and decryption of messages that are exchanged between the system and the C2 server.
The algorithm used for encryption and decryption is RSA, which leverages the public and private key exponents included in Section 1 of the PowerShell script.
The third section of the PowerShell script is the biggest section and has a wide variety of functionalities.
During analysis, we observed a code section where a message written in Chinese and hard coded in the script will be printed in the case of an error while connecting to the C2 server:
The English translation for this message is: “Cannot connect to website, please wait for dragon”.
Other functionalities provided by this section of the PowerShell Script are as follows:
Retrieves the following data from the system by leveraging Windows Management Instrumentation (WMI) queries and environment variables: IP Address from Network Adapter Configuration OS Name OS Architecture Computer Name Computer Domain Name Username
IP Address from Network Adapter Configuration
Computer Domain Name
All of this data is concatenated and formatted as shown in Figure 13:
Figure 13: Concatenated and formatted data retrieved by PowerShell script
Register the victim’s machine to the C2 server by sending the REGISTER command to the server.
In response, if the status is OK, then a TOKEN is received from the C2 server that is used to synchronize the activities between the victim’s machine and the C2 server.
While sending to the C2 server, the data is formatted as follows:
@{SYSINFO = $get.ToString(); ACTION = "REGISTER";}
Ability to take screenshots.
Checks for the presence of security tools (detailed in the Appendix) and if any of these security tools are discovered, then the system will be shut down, as shown in Figure 14.
Figure 14: System shut down upon discovery of security tools
Ability to receive PowerShell script from the C2 server and execute on the machine.
Several techniques are employed for executing the PowerShell code: If command starts with “excel”, then it leverages DDEInitiate Method of Excel.Appilcation to execute the code: If the command starts with “outlook”, then it leverages Outlook.Application and MSHTA to execute the code: If the command starts with “risk”, then execution is performed through DCOM object:
If command starts with “excel”, then it leverages DDEInitiate Method of Excel.Appilcation to execute the code:
If the command starts with “outlook”, then it leverages Outlook.Application and MSHTA to execute the code:
If the command starts with “risk”, then execution is performed through DCOM object:
File upload functionality.
Ability to disable Microsoft Office Protected View (as shown in Figure 15) by setting the following keys in the Windows Registry: DisableAttachmentsInPV DisableInternetFilesInPV DisableUnsafeLocationsInPV
Figure 15: Disabling Microsoft Office Protected View
Ability to remotely reboot or shut down or clean the system based on the command received from the C2 server, as shown in Figure 16.
Figure 16: Reboot, shut down and clean commands
Ability to sleep for a given number of seconds.
The following table summarizes the main C2 commands supported by this PowerShell Script.
Reboot the system using shutdown command
Shut down the system using shutdown command
Wipe the Drives, C:\, D:\, E:\, F:\
Take a screenshot of the System
Encrypt and upload the information from the system
Leverage Excel.Application COM object for code execution
Leverage Outlook.Application COM object for code execution
Leverage DCOM object for code execution
This activity shows us that TEMP.Zagros stays up-to-date with the latest code execution and persistence mechanism techniques, and that they can quickly leverage these techniques to update their malware.
By combining multiple layers of obfuscation, they deter the process of reverse engineering and also attempt to evade security products.
Users can protect themselves from such attacks by disabling Office macros in their settings and also by being more vigilant when enabling macros (especially when prompted) in documents, even if such documents are from seemingly trusted sources.
Invest in Turkey.doc
güvenlik yönergesi.
.doc
Türkiye Cumhuriyeti Kimlik Kartı.doc
Turkish Armed Forces.doc
Anadolu GÃ¼neydoÄŸu Projesinde .doc
