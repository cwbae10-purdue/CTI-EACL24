The biggest vulnerabilities facing the world today are not buffer overruns, but the carbon-based life form sitting between the keyboard and chair.
Kraken has proven that yet again.
Despite the naming and size controversy, we believe Kraken represents a significant malware threat, that if left unchecked, has the potential to cause businesses and consumers damages more severe than simply spamming.
In our research lab at FireEye, we have been monitoring the Kraken Command and Control (C&C;) servers for the past month.
We observed that the C&C; channels (UDP/TCP 447) on the C&C; servers were turned off from April 8th to April 13th, which directly followed the announcement about its existance during the RSA conference.
Kraken was completely silent for that 5 day period leading up to the evening of April 13th.
At that time we observed some of the CnC servers coming online again, but this time with a small twist.
Kraken samples under our observation had stopped using TCP/447 to download their spam templates.
Instead, they began using TCP/447 to update their core binaries.
The new binary was installed on the system during startup and began to produce an altogether different behavior.
It had new C&C; hosts, new ports, and a slightly modified protocol.
The Kraken bot masters also changed their DNS generation algorithm to stop others from hijacking their DNS entries.
The shutdown period of 5 days appears to be related to all the press the Botnet received at RSA.
Those responsible for Kraken simply took the time to update their code base to render any prior research invalid.
From here on out, we will refer to old variants as IM.Kraken.447 and the new variaent as IM.Kraken.443.
We'll begin by first explaining some low level details about the IM.Kraken.447 C&C; structure and then weâ€™ll show how and why IM.Kraken.443 changed its C&C; structure altogether.
Later, we'll delve into other relavent details such as the original Kraken attack vector, rootkit details, and mitigation factors which are shared between both variants.
C&C; channel:Custom obfuscated protocols
Payload:Currently used to send spam
Rootkit:Startup file entry and a Windows service
Attack Vector:IM through social engineering
Commands and Control Structure
1.
Probing for TCP/25 connectivity
The first outbound communications from the malware consist of connection attempts on TCP/25 to a number of well known mail servers on the Internet, including mail, hotmail, and mindspring.
This is an effort to make sure that the zombie machine is able to connect to SMTP servers outside its network to send out spam messages.
2.
Dynamic FQDN discovery
The malware uses a dynamic C&C; based communication structure.
The fully qualified domain name (FQDN) of the C&C; server is constructed from a dynamically generated hostname and one of the following four base domain names:
Examples of runtime FQDNs have been the following:
As long as the bot master and the malware use the same algorithm to generate the list of hostnames to use, the bot master can change the CnC server names, IP addresses, or physical hosts to evade detection without updating the malware code.
In a run of 2 hours in our lab, a single sample went through 170 FQDNs.
While most of these names resolved to 127.0.0.2, some of them were resolving to public IP addresses at the time of analysis:
3.
Obfuscated C&C; Communication
The actual C&C; communication consists of two steps:
Step 1: UDP/447 to the C&C; server resolved from the aforementioned FQDN list.
Step 2: TCP/447 download spam templates from the server IP retrieved from the C&C; server in step 1.
Although the communication payload is obfuscated, our analysis has revealed that the initial UDP based exchange registers the new zombie with the C&C; server along with host information:
* Machine's NetBIOS name
* System uptime
* Total RAM + hard drive space available in MB
* OS version number
* Status of outbound TCP/25 (enabled or disabled)
* Upload speed
* Country code
After analyzing the memory dumps, we discovered that underneath its obfuscated protocol, an XML schema is being used.
The following strings were extracted from Kraken memory dumps.
