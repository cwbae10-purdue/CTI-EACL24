Hopefully everyone has had a few weeks to recover from the M-Trends kickoff party in St. Louis and everyone has also had a chance to read the M-Trends report!
I hope everyone enjoyed the talk I gave at DOD Cyber Crime Conference.
I certainly had fun giving it, sorry to those that got hit with the squishy balls.
I wanted to take a second to address some caveats and undocumented features of MRI that couldn't be discussed in the talk.
A caveat within MRI I that I want to talk about is Process Path Verification.
This rule set is very powerful but there are two ways to define to paths.
Neither is documented because currently there is no documentation on MRI..
The first method of specifying a process path is to specify an absolute path such as this:
MRI interprets this as the only valid path for calc.exe is windowssystem32calc.exe.
However, if I wrote the rule like:
MRI would interpret this as calc.exe can be run from any sub directory as long it's a sub directory within windowssystem32*
The reason this is important is it gives you flexibility in writing definitions.
If I don't want to specify the exact location of iexplore.exe I can say it needs to be launched from program files.
This may prove to be too loose, and I may change this behavior going forward.
For now you have the flexibility to specify absolute paths or sub paths.
The next "undocumented" tidbit that I want to discuss is within two behaviors.
These behaviors actually have the ability to use regex when trying to match up their values.
I did not build the regex option into the UI so it has to be manually added to the AuditViewerConfig.xml.
The two XML lists that can take regex expressions are IgnoreFilesList, and ProcessSuspiciousHandleList.
The regex elements are, IgnoreFileRegex, and HandleRegex.
An example IgnoreFileRegex looks like:
This rule specifies that any file matching this regular expression should be ignored when doing process scoring.
You can get creative just be careful.
An example HandleRegex looks like:
*:.
*-7$:mutant:known conficker mutant
It breaks down like this:
Process: Regular Expressions : handle type: description
It breaks down like this:
Process: Regular Expressions : handle type: description
This allows you to get more out of your suspicious handles definitions.
Finally, I'd like to take a second to reiterate something I stated at DC3.
The "Verify Digital Signatures" option in Memoryze and Audit Viewer wizard can ONLY be run when doing live memory.
It is not possible to enable it when doing dead memory analysis.
Which means the address scoring is not possible on dead memory, behavioral analysis still works on dead memory.
If you are going to acquire memory, please run live analysis jobs as well as acquisition.
This way you get the most information possible off the machine.
The second thing I wanted to reiterate is that verify digital signatures is great, it really helps potentially speed up an analyst's job.
However, we are only verifying the digital signatures exist and are valid on disk.
We are not verifying the module in memory hasn't been modified.
If a userland rootkit exists (again shame on the authors) then we won't report that.
It's important to remember this.
Verifying modules in memory short of doing rootkit detection is not a trivial task.
The windows loader is a beast, a behemoth it does a lot to make verification in memory to disk is very hard (not impossible).
Thanks again for all the interest in M-Trends, Audit Viewer and Memoryze.
As always feedback is always appreciated.
