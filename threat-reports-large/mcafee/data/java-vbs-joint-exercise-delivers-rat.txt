The Adwind remote administration tool (RAT) is a Java-based backdoor Trojan that targets various platforms supporting Java files.
For an infection to occur, the user must typically execute the malware by double-clicking on the .jar file that usually arrives as an email attachment.
Generally, infection begins if the user has the Java Runtime Environment installed.
Once the malicious .jar file runs successfully on the target system, the malware silently installs itself and connects to a remote server through a preconfigured port.
This allows it to receive commands from the remote attacker and perform further malicious activities.
Recently, McAfee labs has seen a surge in a variant which comes as a JAR attachment via a spam email and uses the famous Houdini VBS worm to infect user.
The malware’s spreading mechanism is the same as in previous versions.
It arrives in a spam email with a .jar attachment.
The contents of the email are carefully crafted to lure victims using social engineering techniques.
We can summarise the whole infection chain as shown in the below snippet:
The spam email may look like this:
To keep things simple, we just called the attached .jar file as a parent jar file and named it Sample.jar.
Generally, Adwind comes in an obfuscated form to hide its malicious intent.
Its payload and configuration file (which serves as an installation file) are encrypted with the DES, RC4, or RC6 cipher, depending on the variant.
The Adwind backdoor will decrypt itself on the fly during execution.
In this variant we can see the contents of Manifest.MF.
It has main class bogjbycqdq.Mawbkhvaype.
The main task of this class is to check for a resource file available in the Jar bundle.
Here, resource mzesvhbami is a vbs file.
Mawbkhvaye.class will check for mzesvhbami in the resource section and later drop bymqzbfsrg.vbs in the user’s Home directory before executing it with the help of wscript.
It has a huge chunk of obfuscated base64 encoded data present.
The below snippet shows the partial part of Bymqzbfsrg.vbs script.
Once deobfuscated and decoded, the base64 encoded data converts to ntfsmgr.jar and is dropped in %appdata%/Roaming.
The below snippet shows the conversion of base64 encoded data into Jar file:
Decoded to JAR file (ntfsmgr.jar)
Ntfsmgr.jar
Here, important files present in ntfsmgr.jar are drop.box, mega.download and sky.drive which will be used later for creating the configuration file for the malware.
Ntfsmgr.jar has operational.Jrat as the main class.
The purpose of operational.Jrat is to drop another .jar file into the %TEMP% folder with random file name [underscore] [dot] [random numbers] [dot] class, e.g.
_0.1234567897654265678.class, which will be the actual payload and later will perform malicious activities on the user’s system.
The below snippet shows the routine present in operational.Jrat for creation of the final payload in %TEMP% location.
The contents of Manifest.MF looks somewhat similar to ntfsmgr.jar.
All the other files in the final Java archive will be decrypted on the fly and will infect the system.
After Adwind successfully infects a system, we have seen it log keystrokes, modify and delete files, download and execute further malware, take screenshots, access the system’s camera, take control of the mouse and keyboard, update itself, and more.
We are not going to dig into this threat in this direction now but you can read more about Adwind here and here.
In this blog we will now discuss another part of the story, Bymqzbfsrg.vbs
After successful execution, Bymqzbfsrg.vbs drops ntfsmgr.jar and sKXoevtgAv.vbs in %appdata%/Roaming.
Bymqzbfsrg.vbs dynamically executes a method naira inside the script by using ExecuteGlobal, as seen in the below snippet.
:
Dynamic execution of the script looks like this:
The below snippet shows the script for dropping sKXoevtgAv.vbs in %appdata%Roaming.
Here we see the script for dropping ntfsmgr in %appdata%Roaming.
At the time of execution, sKXoevtgAv.vbs decodes itself to Houdini vbs worm which is the final payload.
The first few lines of the script are as follows:
The attacker may perform many malicious activities on the victim’s machine, including::
Downloading and executing files on the victim’s machine
Running command instructions
Updating or uninstalling a copy of itself
Downloading and uploading files
Deleting a file or folder
Terminating certain process
Enumerating files and folders on the victim’s machine
For persistence it creates a run entry.
When the ntfsmgtr.jar runs, it adds itself into the start-up so that it will be run whenever the system starts.
It checks for installed anti-malware products on the system.
If available, it copies the installed Java Runtime files to a temporary directory within the victim’s home directory, otherwise it downloads from the web and copies in the same directory.
In past, we have seen threat actors using two similar functioning malware families in a single infection.
Usually, threat actors chose this path for higher probability of successful infection.
The hashes used in the analysis:
Sample.jar: 07cb6297b47c007aab43311fcfa9976158b4149961911f42d96783afc517226a
Ntfsmgr.jar: ee868807a4261a418e02b0fb1de7ee7a8900acfb66855ce46628eb5ab9b1d029
McAfee advises users to keep their antimalware signatures up to date at all times.
McAfee products detect the malicious jar files as Adwind-FDVH.jar!
[Partial hash] and Adwind-FDVJ.jar!
[Partial Hash], with DAT Versions 9137 and later.
