The McAfee Mobile Research Team tracks the behavior of Android click-fraud apps.
We have detected multiple implementations, including recent examples on Google Play in 2016 and Clicker.BN last month.
These threats are characterized by a common behavior: They appear innocuous but in the background they perform HTTP requests (simulating clicks) on paid “advertainment” to make money for a specific developer.
This behavior means that a URL is permanently requested via HTTP.
Hypothetically, if the target and frequency of that request were modified, we could classify it as a DDoS attack.
After all, the app uses the same main malware functionality and botnet infrastructure.
From ad fraud to DDoS is only one step—and that is what some variants of Clicker.BN have taken.
We have now seen click-fraud Android Trojans repurposed to perform DDoS attacks.
Most of the control servers of this Android/Clicker botnet—aka WireX—were taken down in late August.
The apps that perform click-fraud and those that launch DDoS attacks have much in common: the technique to configure headers from the control server, the domains axclick.store and ww[56]8.ybosrcqo.us (which have been taken down though others remain active), how they keep control server parameters updated in the local cache, and how the target server performs each HTTP request without loading cache data.
They are share methods of obfuscation, packing strategies, and methodology for publishing on Google Play.
The apps do have differences, however.
The control server subdomain and GET methods vary, as well as the delimiters used to split the received parameters and the order and data of received parameters:
Click-fraud components receive: Target URL JavaScript function (to simulate mouse-over clicks) User agent Google Play package
Target URL
JavaScript function (to simulate mouse-over clicks)
User agent
Google Play package
DDoS components receive: Target URL User agent HTTP referrer (same as target URL in our tests)
Target URL
User agent
HTTP referrer (same as target URL in our tests)
The DDoS variants put the traffic generation in a loop to fully complete each HTTP request many times:
DDoS authors increased the frequency of the HTTP requests to 100 per minute.
(Click-fraud implementations send a request each 55 seconds using same code structure.)
Other DDoS variants perform a UDP flood attack on the target, based on data received from the control server (host and port) and implemented as follows:
The previous thread (C1343a) is executed 50 times by the following method (m7240a), which is invoked after loading the parameters from the control server.
These are refreshed every 50, 55, or 60 seconds (depending on the variant).
All variants of this threat use an uncommon method to receive and parse parameters from the control server: They arrive inside the title tag of an HTML file, and vary based on a key string used to parse the parameters.
We discussed this in our analysis of Clicker.BN.
We mentioned some other curiosities in our Clicker.BN post.
The delimiter strings look a bit like anagrams: “WireX” comes from the string “snewxwri.” Early Clicker.BN variants used the delimiter “eindoejy,” which could represent “I enjoyed” or “die enjoy.” More delimiters are present in other variants of this threat.
Click fraud in 2017 could cost US$16 billion, according to one source.
DDoS attacks have their own underground market.
Moving from one mobile threat to another is not new.
We have seen Android ransomware switch to banking Trojans (in 2016) and premium SMS Trojans move to wireless application protocol billing.
Malware authors pursue profits with different strategies, taking advantage of already developed infrastructure.
In this case, Android/Clicker.BN created a mobile botnet and distributed the infecting vector on Google Play, repackaging the threat to look like a clean app and widely distributing it across the globe.
The authors modified this malware only a little bit to launch the massive DDoS attack known as WireX.
McAfee Mobile Security detects this threat as Android/Clicker.BN!Gen and prevents its execution.
To further protect yourself against malicious apps, use only legitimate app stores, and pay attention to suspicious traits such as nonsense names, missing descriptions, and poor user reviews.
Also, verify that the app’s request for permissions are related to its functionality.
Be wary when apps request device administration API access, which is usually requested only by security apps, antimalware, mobile device management, or corporate email clients.
Most apps and games will never ask for device admin rights.
