We are in the midst of an economic slump [1], with more candidates than there are jobs, something that has been leveraged by malicious actors to lure unwitting victims into opening documents laden with malware.
While the prevalence of attacks during this unprecedented time has been largely carried out by low-level fraudsters, the more capable threat actors have also used this crisis as an opportunity to hide in plain sight.
One such example is a campaign that McAfee Advanced Threat Research (ATR) observed as an increase in malicious cyber activity targeting the Aerospace & Defense industry.
In this 2020 campaign McAfee ATR discovered a series of malicious documents containing job postings taken from leading defense contractors to be used as lures, in a very targeted fashion.
These malicious documents were intended to be sent to victims in order to install a data gathering implant.
The victimology of these campaigns is not clear at this time, however based on the job descriptions, they appear to be targeting people with skills and experience relating to the content in the lure documents.
The campaign appears to be similar to activity reported elsewhere by the industry, however upon further analysis the implants and lure documents in this campaign are distinctly different [2], thus we can conclude this research is part of a different activity set.
This campaign is utilizing compromised infrastructure from multiple European countries to host its command and control infrastructure and distribute implants to the victims it targets.
This type of campaign has appeared before in 2017 and 2019 using similar methods with the goal of gathering intelligence surrounding key military and defense technologies [3].
The 2017 campaign also used lure documents with job postings from leading defense contractors; this operation was targeting individuals employed by defense contractors used in the lures.
Based on some of the insight gained from spear phishing emails, the mission of that campaign was to gather data around certain projects being developed by their employers.
The Techniques, Tactics and Procedures (TTPs) of the 2020 activity are very similar to those previous campaigns operating under the same modus operandi that we observed in 2017 and 2019.
From our analysis, this appears a continuation of the 2019 campaign, given numerous similarities observed.
These similarities are present in both the Visual Basic code used to execute the implant and some of the core functionality that exists between the 2019 and 2020 implants.
Thus, the indicators from the 2020 campaign point to previous activity from 2017 and 2019 that was previously attributed to the threat actor group known as Hidden Cobra [4].
Hidden Cobra is an umbrella term used to refer to threat groups attributed to North Korea by the U.S Government [1].
Hidden Cobra consists of threat activity from groups the industry labels as Lazarus, Kimsuky, KONNI and APT37.
The cyber offensive programs attributed to these groups, targeting organizations around the world, have been documented for years.
Their goals have ranged from gathering data around military technologies to crypto currency theft from leading exchanges.
Our analysis indicates that one of the purposes of the activity in 2020 was to install data gathering implants on victims’ machines.
These DLL implants were intended to gather basic information from the victims’ machines with the purpose of victim identification.
The data collected from the target machine could be useful in classifying the value of the target.
McAfee ATR noticed several different types of implants were used by the adversary in the 2020 campaigns.
These campaigns impact the security of South Korea and foreign nations with malicious cyber campaigns.
In this blog McAfee ATR analyzes multiple campaigns conducted in the first part of 2020.
Finally, we see the adversary expanding the false job recruitment campaign to other sectors outside of defense and aerospace, such as a document masquerading as a finance position for a leading animation studio.
In this blog we will cover:
Target of Interest – Defense & Aerospace Campaign
Technical Analysis Phase One: Malicious Documents Document Templates Visual Basic Macro Code Phase Two: Malicious DLLs DLL Workflow Implant Analysis Phase Three: Network Evasion Techniques Phase Four: Persistence
Phase One: Malicious Documents Document Templates Visual Basic Macro Code
Document Templates
Visual Basic Macro Code
Phase Two: Malicious DLLs DLL Workflow Implant Analysis
DLL Workflow
Implant Analysis
Phase Three: Network Evasion Techniques
Phase Four: Persistence
Additional Lures: Relationship to 2020 Diplomatic & Political Campaign Relationship to Falsified Job Recruitment Campaign
Relationship to Falsified Job Recruitment Campaign
Victimology
Infrastructure Insights
Techniques, Tactics & Procedures (TTPs)
Defensive Architecture Recommendations
IOCs
Conclusion
This is not the first time that we have observed threat actors using the defense and aerospace industry as lures in malicious documents.
In 2017 and 2019, there were efforts to send malicious documents to targets that contained job postings for positions at leading defense contractors3
The objective of these campaigns was to gather information on specific programs and technologies.
Like the 2017 campaign, the 2020 campaign also utilized legitimate job postings from several leading defense and aerospace organizations.
In the 2020 campaign that McAfee ATR observed, some of the same defense contractors from the 2017 operation were again used as lures in malicious documents.
This new activity noted in 2020 uses similar Techniques, Tactics and Procedures (TTPs) to those seen in a 2017 campaign that targeted individuals in the Defense Industrial Base (DIB).
The 2017 activity was included in an indictment by the US government and attributed to the Hidden Cobra threat group4
This recent campaign used malicious documents to install malware on the targeted system using a template injection attack.
This technique allows a weaponized document to download an external Word template containing macros that will be executed.
This is a known trick used to bypass static malicious document analysis, as well as detection, as the macros are embedded in the downloaded template.
Further, these malicious Word documents contained content related to legitimate jobs at these leading defense contractors.
All three organizations have active defense contracts of varying size and scope with the US government.
The timeline for these documents, that were sent to an unknown number of targets, ran between 31 March and 18 May 2020.
Document creation timeline
Malign documents were the main entry point for introducing malicious code into the victim’s environment.
These documents contained job descriptions from defense, aerospace and other sectors as a lure.
The objective would be to send these documents to a victim’s email with the intention they open, view and ultimately execute the payload.
As we mentioned, the adversary used a technique called template injection.
When a document contains the .docx extension, in our case, it means that we are dealing with the Open Office XML standard.
A .docx file is a zip file containing multiple parts.
Using the template injection technique, the adversary puts a link towards the template file in one of the .XML files, for example the link is in settings.xml.rels while the external oleobject load is in document.xml.rels.
The link will load a template file (DOTM) from a remote server.
This is a clever technique we observe being used by multiple adversaries [5] and is intended to make a document appear to be clean initially, only to subsequently load malware.
Some of these template files are renamed as JPEG files when hosted on a remote server to avoid any suspicion and bypass detection.
These template files contain Visual Basic macro code, that will load a DLL implant onto the victim’s system.
Current McAfee technologies currently protect against this threat.
We mentioned earlier that docx files (like xlsx and pptx) are part of the OOXML standard.
The document defining this standard[6], describes the syntax and values that can be used as an example.
An interesting file to look at is the ‘settings.xml’ file that can be discovered in the ‘Word’ container of the docx zip file.
This file contains settings with regards to language, markup and more.
First, we extracted all the data from the settings.xml files and started to compare.
All the documents below contained the same language values:
The XML file ends with a GUID value that starts with the value “w15”.
According to the Microsoft documentation, w15 defines the PersistentDocumentId Class.
When the object is serialized out as xml, its qualified name is w15:docId.
The 128-bit GUID is set as an ST_Guid attribute which, according to the Microsoft documentation, refers to a unique token.
The used class generates a GUID for use as the DocID and generates the associated key.
The client stores the GUID in that structure and persists in the doc file.
If, for example, we would create a document and would “Save As”, the w15:docId GUID would persist across to the newly created document.
What would that mean for our list above?
Documents with the same GUID value need to be placed in chronological order and then we can state the earliest document is the root for the rest, for example:
What we can say from above table is that ‘_IFG_536R.docx” was the first document we observed and that later documents with the same docID value were created from the same base document.
To add to this assertion; in the settings.xml file the value “rsid” (Revision Identifier for Style Definition) can be found.
According to Microsoft’s documentation: “This element specifies a unique four-digit number which shall be used to determine the editing session in which this style definition was last modified.
This value shall follow this following constraint: All document elements which specify the same rsid* values shall correspond to changes made during the same editing session.
An editing session is defined as the period of editing which takes place between any two subsequent save actions.”
Let’s start with the rsid element values from “*_IFG_536R.docx”:
And compare with the rsid element values from “*_PMS.docx”:
The rsid elements are identical for the first four editing sessions for both documents.
This indicates that these documents, although they are now separate, originated from the same document.
Digging into more values and metadata (we are aware they can be manipulated), we created the following overview in chronological order based on the creation date:
When we zoom in on the DocID “932E534d(..) we read the value of a template file in the XML code: “Single spaced (blank).dotx” – this template name seems to be used by multiple “Author” names.
The revision number indicates the possible changes in the document.
Note: the documents in the table with “No DocID” were the “dotm” files containing the macros/payload.
All files were created with Word 2016 and had both the English and Korean languages installed.
This analysis into the metadata indicates that there is a high confidence that the malicious documents were created from a common root document.
There were several documents flagged as non-malicious discovered during our investigation.
At first glance they did not seem important or related at all, but deeper investigation revealed how they were connected.
These documents played a role in building the final malicious documents that ultimately got sent to the victims.
Further analysis of these documents, based on metadata information, indicated that they contained relationships to the primary documents created by the adversary.
Two PDF files (***_SPE_LEOS and ***_HPC_SE) with aerospace & defense industry themed images, created via the Microsoft Print to PDF service, were submitted along with ***_ECS_EPM.docx.
The naming convention of these PDF files was very similar to the malicious documents used.
The name includes abbreviations for positions at the defense contractor much like the malicious documents.
The Microsoft Print to PDF service enables content from a Microsoft Word document be printed to PDF directly.
In this case these two PDF files were generated from an original Microsoft Word document with the author ‘HOME’.
The author ‘HOME’ appeared in multiple malicious documents containing job descriptions related to aerospace, defense and the entertainment industry.
The PDFs were discovered in an archive file indicating that LinkedIn may have been a possible vector utilized by the adversaries to target victims.
This is a similar vector as to what has been observed in a campaign reported by industry[7], however as mentioned earlier the research covered in this blog is part of a different activity set.
Metadata from PDF file submitted with ***_ECS_EPM.docx in archive with context fake LinkedIn
Digging into the remote template files reveals some additional insight concerning the structure of the macro code.
The second stage remote document template files contain Visual Basic macro code designed to extract a double base64 encoded DLL implant.
The content is all encoded in UserForm1 in the remote DOTM file that is extracted by the macro code.
Macro code (17.dotm) for extracting embedded DLL
Further, the code will also extract the embedded decoy document (a clean document containing the job description) to display to the victim.
Code (17.dotm) to extract clean decoy document
Macro code (******_dds_log.jpg) executed upon auto execution
The adversary used malicious DLL files, delivered through stage 2 malicious documents, to spy on targets.
Those malicious documents were designed to drop DLL implants on the victim’s machine to collect initial intelligence.
In this campaign the adversary was utilizing patched SQL Lite DLLs to gather basic information from its targets.
These DLLs were modified to include malicious code to be executed on the victim’s machine when they’re invoked under certain circumstances.
The purpose of these DLLs is/was to gather machine information from infected victims that could be used to further identify more interesting targets.
The first stage document sent to targeted victims contained an embedded link that downloaded the remote document template.
Embedded link contained within Word/_rels/settings.xml.rels
The DOTM (Office template filetype) files are responsible for loading the patched DLLs onto the victim’s machine to collect and gather data.
These DOTM files are created with DLL files encoded directly into the structure of the file.
These DOTM files exist on remote servers compromised by the adversary; the first stage document contains an embedded link that refers to the location of this file.
When the victim opens the document, the remote DOTM file that contains a Visual Basic macro code to load malicious DLLs, is loaded.
Based on our analysis, these DLLs were first seen on 20 April 2020 and, to our knowledge based on age and prevalence data, these implants have been customized for this attack.
The workflow of the attack can be represented by the following image:
To identify the malicious DLLs that will load or download the final implant, we extracted from the Office files found in the triage phase, the following DLL files:
