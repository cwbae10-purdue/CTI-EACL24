Package delivery is just one of those things we take for granted these days.
This is especially true in the age of Coronavirus, where e-commerce and at-home deliveries make up a growing portion of consumer buying habits.
In 2019, McAfee Advanced Threat Research (ATR) conducted a vulnerability research project on a secure home package delivery product, known as BoxLock.
The corresponding blog can be found here and highlights a vulnerability we found in the Bluetooth Low Energy (BLE) configuration used by the device.
Ultimately, the flaw allowed us to unlock any BoxLock in Bluetooth range with a standard app from the Apple or Google store.
Shortly after we released this blog, a similar product company based in the UK reached out to the primary researcher (Sam Quinn) here at McAfee ATR, requesting that the team perform research analysis on his product, called the iParcelBox.
This device is comprised of a secure steel container with a push-button on the outside, allowing for package couriers to request access to the delivery container with a simple button press, notifying the homeowner via the app and allowing remote open/close functions.
iParcelBox – Secure Package Delivery & iParcelBox App
The researcher was able to take a unique spin on this project by performing OSINT (Open Source Intelligence), which is the practice of using publicly available information, often unintentionally publicized, to compromise a device, system or user.
In this case, the primary developer for the product wasn’t practicing secure data hygiene for his online posts, which allowed the researcher to discover information that dramatically shortened what would have been a much more complicated project.
He discovered administrative credentials and corresponding internal design and configurations, effectively providing the team access to any and all iParcelBox devices worldwide, including the ability to unlock any device at a whim.
All test cases were executed on lab devices owned by the team or approved by iParcelBox.
Further details of the entire research process can be found in the full technical version of the research blog here.
The actual internals of the system were well-designed from a security perspective, utilizing concepts like SSL for encryption, disabling hardware debugging, and performing proper authentication checks.
Unfortunately, this level of design and security were all undermined by the simple fact that credentials were not properly protected online.
Armed with these credentials the researcher was able to extract sensitive certificates, keys, device passwords, and WIFI passwords off any iParcelBox.
Secondly, as the researcher prepared the writeup on the OSINT techniques used for this, he made a further discovery.
When analyzing the configuration used by the Android app to interact with the cloud-based IOT framework (AWS-IOT), he found that even without an administrative password, he could leak plaintext temporary credentials to query the AWS database.
These credentials had a permission misconfiguration which allowed the researcher to query all the information about any iParcelBox device and to become the primary owner.
In both cases, to target a device, an attacker would need to know the MAC address of the victim’s iParcelBox; however, the iParcelBox MAC addresses appeared to be generated non-randomly and were simple to guess.
A typical research effort for McAfee ATR involves complex hardware analysis, reverse engineering, exploit development and much more.
While the developer made some high-level mistakes regarding configuration and data hygiene, we want to take a moment to recognize the level of effort put into both physical and digital security.
iParcelBox implemented numerous security concepts that are uncommon for IOT devices and significantly raise the bar for attackers.
It’s much easier to fix issues like leaked passwords or basic configuration issues than to rebuild hardware or reprogram software to bolt on security after the fact.
This may be why the company was able to fix both issues almost immediately after we informed them in March of 2020.
We’re thrilled to see more and more companies of all sizes embracing the security research community and collaborating quickly to improve their products, even from the beginning of the development cycle.
Even developers are subject to the same issues we all have; choosing secure and complex passwords, protecting important credentials, practicing security hygiene, and choosing secure configurations when implementing controls for a device.
As always, we encourage you to evaluate the vendor’s approach to security.
Do they embrace and encourage vulnerability research on their products?
How quick are they to implement fixes and are they done correctly?
Nearly every product on the market will have security flaws if you look hard enough, but the way they are handled is arguably more important than the flaws themselves.
This case study should provide a valuable testament to the power of community.
Don’t be afraid to engage security researchers and embrace the discovery of vulnerabilities.
The more critical the finding, the better!
Work with researchers or research companies that practice responsible disclosure, such as McAfee ATR.
Additionally, it can be easy to overlook the simple things such as the unintentional leak of critical data found during this project.
A security checklist should include both complex and simple steps to ensure the product maintains proper security controls and essential data is protected and periodically audited.
