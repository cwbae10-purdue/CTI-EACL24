Malware is on the rise.
At the beginning of 2008, our malware collection had 10 million samples.
Today we have already surpassed 70 million.
Most of the malicious samples are Trojans (backdoors, downloaders, fake alerts), but there are also a lot of viruses, worms, and bots that in a short time can infect many computers without user interaction.
Usually the malicious code comes in a form of an executable or DLL, but sometimes malware authors opt to use alternate languages such as VBScript (Visual Basic Scripting Edition), a lightweight Active Scripting language that is installed by default in most Microsoft Windows versions since Windows 98.
One example of this kind of malware is Satanbot: a fully functional VBScript botnet that uses the Remote Desktop Connection to connect to infected systems.
VBScript files are usually in clear text because they are interpreted at runtime, rather than being compiled previously by the author.
However, for cases in which the user wants to avoid allowing others to view or modify the source code, Microsoft provides a command-line tool, Script Encoder, which will encode the final script by generating a .vbe file.
This file looks like a normal executable, but it can be decoded to its original form.
Once that file is decoded, we can look at the bot’s source code, which is divided by sections.
Each section specifies a different function of Satanbot, most of which we’ve already seen in AutoRun worms like Xirtem.
Here is a description of these functions:
Enable CMD and REGEDIT: To perform all the changes in the system (modify the registry and execute BAT files), the edition of the registry (regedit) or the use of the command line (cmd) will be enabled by changing the values “DisableRegistryTools” and “DisableCMD” to 0.
In addition, one AutoRun feature is configured by creating the value “Update” in the “Run” key with the path of the script, along with hiding files and file extensions in the system.
Disable UAC: The value “EnableLUA” is checked to verify whether it is necessary to disable the User Account Control in Windows Vista, Windows Server 2008 and Windows 7.
If it is enabled, the script will create on the fly another script and a BAT file to disable UAC.
Another modification in the registry is done to perform operations that require elevation of privileges without consent or credentials.
At the end, all the temporary files used to do the modifications in the system will be deleted.
Take ownership of folders: The command TAKEOWN (in Windows Vista and 7) runs to take ownership and enable the modification of folders including Application Data, Cookies, and Local Settings
Self-Install and spread: Another BAT file in the %TEMP% path is created.
It first changes the icon of .vbe files to the one used by Windows pictures so the user will think that it is a picture and not the malware.
Also the original .vbe, along with a shortcut file, will be copied in several locations, including network shares and peer-to-peer shared folders from popular clients like eMule, LimeWire, and Ares.
Another spreading vector this malware uses is infecting removable drives by creating autorun.inf files along with a copy of the original .vbe and a shortcut (.lnk) file.
Worm test: This may seem a confusing term, but it is another spreading method.
The original .vbe will be copied to other folders such as Startup and %Userprofile%\ Microsoft with the name “System File [Not Delete]” to trick the user to not delete the file.
Worm.s@tan: Contains a loop that will trigger the execution of the code every 60 minutes
Backdoor: Using another temporary BAT file, the malware will enable Remote Desktop Access by making the following changes to the system:
Allow unsolicited remote assistance and full control
Allow the use of blank passwords
Enable multiple concurrent remote desktop connections (with a maximum of five)
Automatically start the Terminal Service
Open port 3389 in the Windows firewall
Add an administrator user to the system
Start the Remote Desktop Services UserMode port redirector service
Create a file in the bot’s path with an “OK” inside
The foregoing commands execute on reboot while the message “Windows repare quelques fichiers, patientez …” (Windows is repairing some files, wait …) appears to the user at the command prompt.
Another interesting part of the code is the section Compt.Bot, from which the malware sends an HTTP POST request with a specific user agent to the URL of the botnet command server.
With that request, the server can get the public IP address of the infected machine, which probably has Remote Desktop Access enabled with the required specifications so the bad guys can connect.
By opening that URL in the browser, we can see the IP address of the machine that is connected to the control panel and the number of compromised machines, which can grow very quickly.
Take a look at this 24-hour comparison:
Other functionalities of the botnet:
Delete browser and user histories of some common software: Internet Explorer, Firefox, Chrome, Thunderbird, and Skype
Terminate processes of security software by downloading and executing a batch file that can be easily updated with more processes
Download an .exe file from another URL (currently offline).
We need to examine this file more thoroughly, but one of its purposes seems to be updating the malware by executing a different embedded .vbe.
Even if VBScript is not the best language to hide malicious activities (using encryption, obfuscation, packers, antidebuggers, or anti-virtual machine features), it is pretty effective when we take into account the rate of infection in just one day.
In addition, those scripts can build a botnet of infected machines that can be controlled by using a Remote Desktop connection, which allows the attacker to perform any action in the system.
The malicious files related to this threat are detected by McAfee products as VBS/Satanbot.
