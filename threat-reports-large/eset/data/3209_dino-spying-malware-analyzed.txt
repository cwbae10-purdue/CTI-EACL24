In this blog we describe a sophisticated backdoor, called Dino by its creators.
We believe this malicious software has been developed by the Animal Farm espionage group, who also created the infamous Casper, Bunny and Babar malware.
In this blog we describe a sophisticated backdoor, called Dino by its creators.
We believe this malicious software has been developed by the Animal Farm espionage group, who also created the infamous Casper, Bunny and Babar malware.
Dino contains interesting technical features, and also a few hints that the developers are French speaking.
Animal Farm is the security industry’s name for a group of attackers first described by Canada’s Communications Security Establishment (CSE) in a set of slides leaked by Edward Snowden in March 2014.
In those slides CSE assess with “moderate certainty” that this group is a French intelligence agency.
Since then, several examples of malware created by Animal Farm have been found and publicly documented, in particular:
Casper, a stealthy first-stage implant, documented by ESET in last March
Bunny, a Lua-based backdoor, documented by Marion Marschalek (Cyphort)
Babar, an espionage platform, also analyzed by Marion Marschalek
The connection between those pieces of malware and the group described in CSE slides has been convincingly established, for example by Paul Rascagnères (G Data).
In this blog post we add a new piece to the puzzle with Dino, another malicious program belonging to Animal Farm’s arsenal.
The sample of Dino documented in this blog post was used in 2013 against targets in Iran.
The original means of infection is unknown, though we believe Dino was installed by another program, as it contains an uninstallation command without the corresponding installation procedure.
Given the set of commands it can receive, Dino’s main goal seems to be the exfiltration of files from its targets.
The binary’s original name, “Dino.exe”, has been left visible by its authors, as was the case with Casper.
Dino – which could be referring to the pet character from The Flintstones cartoon show – was already mentioned in a recent Kaspersky blog as a “full-featured espionage platform,” but no technical analysis has been published yet.
Roughly, Dino can be described as an elaborate backdoor built in a modular fashion.
Among its technical innovations, there is a custom file system to execute commands in a stealthy fashion, and a complex task-scheduling module working in a similar way to the “cron” Unix command.
Interestingly, the binary contains a lot of verbose error messages, allowing us to see Dino’s developers’ choice of wording.
Also, a few technical artefacts suggest that Dino was authored by native French speakers.
Dino has been developed in C++ and presents a well-defined modular architecture.
The following array lists the modules contained in this Dino binary; the module names are those assigned by the developers.
Dino heavily relies on a custom data structure named “DataStore” by the Animal Farm developers.
In particular, all Dino’s modules store their content inside this structure, making its understanding one of the keys to analyzing Dino.
A DataStore is a map from string keys to values of 8 possible types, such as integers or strings.
The implementation of this data structure is based on a hash table.
It means that to retrieve the value associated with a key, one has to calculate the hash of the key to locate a bucket from which the value can be retrieved.
Dino’s hash is a one-byte value calculated with a series of XOR operations on the key, and each bucket starts a linked list containing key/value pairs.
The code responsible for retrieving the value associated with a key is shown in Figure 1.
Figure 1
Finally, DataStore objects can be serialized in a custom format, which begins with the magic word “DxSx”.
This is used in particular by the PSM module to save the content of Dino modules in an encrypted file.
More precisely, when a modification is made to a module’s content in memory, the PSM module saves it as a serialized DataStore.
When Dino restarts, the module is deserialized from the file and loaded into memory.
Funnily enough, the key serving to encrypt the file on disk is “PsmIsANiceM0du1eWith0SugarInside”.
Dino’s configuration is initially stored in a serialized DataStore object contained in a zip archive at the end of the Dino binary.
At runtime this object is deserialized and stored inside the CORE module.
We can list the configuration’s content with Dino’s “conf –l CORE” command – described later – which displays on separate rows each key’s name, its associated value and the type of this value:
While most of the keys have self-explanatory names, we would like to focus on the following keys:
“recID”: Animal Farms binaries contain an ID whose decimal value appears to identify the target, “11173-01-PRS” in this case.
For example Casper used an “ID” value set to “13001”, whereas some Babar samples used “12075-01” and “11162-01”.
We do not know the meaning of the “PRS” suffix added in the case of Dino.
“ComServer”: These keys contain the command and control (C&C) servers’ URLs.
All the URLs were down when we started our analysis.
Those C&Cs were compromised legitimate websites, which is standard operating procedure for Animal Farm.
“Version”: Dino’s code version; here set to “1.2”, which is confirmed by the “din12” folder used in one of the C&C URLs.
For the record, a “d13” folder has been seen on another Animal Farm C&C (see “3.7 Calling home” of Marschalek’s Babar report), indicating that Dino version 1.3 has also likely been deployed at some point.
“BD_Keys” and “CC_Keys” contain cryptographic keys to encrypt the network communications with C&C servers.
Their values start with the word “MAGICBOX”.
The three last keys are displayed with obfuscated names (“xT0rvwz”, “tr4qa589” and “jopcft4T”) and store parameters for the custom file system we will describe later.
The following Table lists the commands accepted by this Dino binary with the names chosen by the developers.
Each of those commands can take one or more arguments.
One command of particular interest is “search”, which allows the operators to look for files very precisely.
For example, it can provide all files with a “.doc” extension, the size of which is bigger than 10 kilobytes, and that were modified in the last 3 days.
We believe this exfiltration of files to be Dino’s end goal.
At startup Dino executes successively the commands stored in the “InitialCommands” field in its configuration; in the sample we analyzed they are:
Those commands serve as a reconnaissance step for the operators.
Their execution is managed by the CMDEXEC module, the commands being stored in a queue inside the CMDEXECQ module.
The result is reported to the C&C server.
After having described Dino’s basics, we are now going to dig into two particularly interesting components; first, a custom file system used by the malware, and then the CRONTAB module in charge of task scheduling.
Dino contains a custom file system named “ramFS” by its developers.
It provides a complex data structure to store files in memory, each of them bearing a name corresponding to filenames used by usual file systems.
RamFS also comes with a set of custom commands that can be stored in files and executed.
It should be noticed that ramFS is also present in other Animal Farm binaries (see attribution paragraph below), but since we are unaware of previous analysis of ramFS, we are describing our findings here.
RamFS content is initially stored encrypted in Dino’s configuration under the key “xT0rvwz”, whereas the corresponding RC4 key is stored under the key “tr4qa589”.
Once the file system has been decrypted, it is stored in memory as a linked list of 512-byte memory chunks, each one of them being individually RC4-encrypted.
When looking for a file in ramFS, each chunk is decrypted, processed and then re-encrypted.
Hence there are very few noticeable traces of ramFS during its use.
Here are some high-level characteristics of this file system:
File names and file content are encoded in Unicode
File names length is limited to 260 characters
Once decrypted, file content is manipulated as chunks of 540 bytes
There is no metadata associated with the files
We could not find an existing file system matching the memory structures and the characteristics of ramFS, and therefore we believe this file system to be an original creation of the Animal Farm group.
Several commands can be executed in the context of ramFS, as listed in the following Table.
In the case of Dino, ramFS serves as protected storage for one specific file containing the instructions to remove the malware from the machine.
The developers named this file the “cleaner” and it is executed when Dino receives the command “killBD” (the “BD” acronym is the developers’ designation of the malware).
Figure 2 shows the code responsible for executing this cleaner file.
First, it retrieves the name of the file from Dino’s configuration (“a.ini”), then it retrieves the key to decrypt ramFS, and it finally mounts the file system in memory in order to execute the cleaner file stored inside.
The verbosity of the error messages makes it particularly easy to understand the purpose of the code.
Figure 2
The cleaner file contains the string “INSTALL -A “wusvcd” -U” which, once executed, will uninstall the malware from the machine – “wusvcd” being the name used to register Dino on the machine.
Hence, ramFS serves as a protected container for files to be executed on the machine, offering a disposable execution environment to the operators and leaving very few traces on the system.
The commands “cronadd”, “cronlist” and “crondel” serve respectively to add, list, and remove scheduled tasks registered in the CRONTAB module.
Those tasks are Dino’s commands.
The syntax to define scheduled tasks is similar to the one used by the cron Unix command.
In particular the time at which to run a command is given by a string following the format “minute hour day month year dayofweek”.
Alternatively, this string can be replaced by “@boot” for a command to run at each startup – whereas some Unix cron implementations accept “@reboot”.
As an example, here is the output of the “cronlist” command after a “wakeup” command has been scheduled to run on 7th April 2015 at 15:44:
As we can see, each entry is identified by an “Id”, an incrementing hexadecimal number starting at 0xC0.
The purpose of the “Local” field remains unclear (the other possible value being “-l”).
The “Count” parameter counts the number of times a command has been executed, “-1” indicating the command will be executed only once.
Finally, the “Visibility” field defines whether the command execution will be reported to the C&C (the other possible value being “Silent”).
The amount of shared code between Dino and known Animal Farm malware leaves very little doubt that Dino belongs to Animal Farm’s arsenal.
Among these shared features, we can cite the following:
At the very beginning of Dino execution, the current process name is checked against process names used by some sandboxes:
Figure 3
A very similar check (against “klavme”, “myapp”, “TESTAPP” and “afyjevmv.exe”) is present in Bunny samples, and in some first-stage implants deployed by Animal Farm.
To hide its calls to certain API functions, Dino employs a classic Animal Farm ploy: a hash is calculated from the function’s name and used to look for the address of the API function.
The actual hashing algorithm used in Dino is the same that was used in Casper, namely a combination of rotate-left (ROL) of 7 bits and exclusive-or (XOR) operations.
The Dino’s custom file system – the so-called ramFS – is present in several droppers used by Animal Farm.
In those binaries the file system serves to set the persistence of the payload.
For example, here is the command executed by some NBOT droppers in the context of ramFS:
As a final indication that Dino belongs to Animal Farm menagerie, it is noticeable that the output of Dino’s sysinfo command looks like an updated version of the “beacon” from the SNOWBALL implant described in the leaked CSE slides – part of operation SNOWGLOBE, which led to the discovery of Babar:
All these indicators together make us very confident that Dino was developed by the Animal Farm group.
Dino adds at least two more indicators to those already documented suggesting that Animal Farm developers are French speaking:
Dino’s binary contains a resource whose language code value is 1036.
The original purpose of this language code is to allow developers to provide resources (menus, icons, version information…) for different locations in the world in the corresponding language.
Interestingly, when a developer does not manually specify the language code, the compiler sets it to the language of the developer’s machine.
So, which language corresponds to the value 1036, or 0x40c in hexadecimal?
French (France).
Of course a non-French speaking developer could have deliberately set this value to mislead attribution efforts.
But in more recent Animal Farm binaries (for example Casper), this language code has been set to the classical English (USA) language code.
Therefore, it seems that Animal Farm developers forgot to set this value in their first creations, realized their mistake at some point, and decided to set a standard value.
Someone using the language code as a false flag would have likely kept the strategy going.
For the record, this Dino sample is not the only Animal Farm binary with 1036 as language code.
Dino’s binary is statically linked with the GnuMP library, which is used to manipulate big numbers in cryptography algorithms.
The GnuMP code in Dino contains file paths coming from the developer’s machine:
As the attentive reader has probably guessed, “arithmetique” is the French translation of “arithmetic”.
Dino’s binary shows an intense development effort, from custom data structures to a homemade file system.
As with other Animal Farm binaries, it bears the mark of professional and experienced developers.
But Dino also shows a poor knowledge, or interest, from these developers in anti-analysis techniques – contrary to what was seen in Casper – as demonstrated, for example, by the verbosity of some Dino’s log messages:
All those messages provide substantial help in understanding Dino’s internal workings.
One will also appreciate the numerous misspellings contained in the messages.
Regarding Dino’s victims, we know very little except that they were located in Iran in 2013.
This is in accordance with the victimology described by Canada’s CSE in its presentation:
