ESET researchers analyze new TTPs attributed to the Turla group that leverage PowerShell to run malware in-memory only
Turla, also known as Snake, is an infamous espionage group recognized for its complex malware.
To confound detection, its operators recently started using PowerShell scripts that provide direct, in-memory loading and execution of malware executables and libraries.
This allows them to bypass detection that can trigger when a malicious executable is dropped on disk.
Turla is believed to have been operating since at least 2008, when it successfully breached the US military.
More recently, it was involved in major attacks against the German Foreign Office and the French military.
This is not the first time Turla has used PowerShell in-memory loaders to increase its chances of bypassing security products.
In 2018, Kaspersky Labs published a report that analyzed a Turla PowerShell loader that was based on the open-source project Posh-SecMod.
However, it was quite buggy and often led to crashes.
After a few months, Turla has improved these scripts and is now using them to load a wide range of custom malware from its traditional arsenal.
The victims are quite usual for Turla.
We identified several diplomatic entities in Eastern Europe that were compromised using these scripts.
However, it is likely the same scripts are used more globally against many traditional Turla targets in Western Europe and the Middle East.
Thus, this blogpost aims to help defenders counter these PowerShell scripts.
We will also present various payloads, including an RPC-based backdoor and a backdoor leveraging OneDrive as its Command and Control (C&C) server.
The PowerShell loader has three main steps: persistence, decryption and loading into memory of the embedded executable or library.
The PowerShell scripts are not simple droppers; they persist on the system as they regularly load into memory only the embedded executables.
We have seen Turla operators use two persistence methods:
A Windows Management Instrumentation (WMI) event subscription
Alteration of the PowerShell profile (profile.ps1 file).
In the first case, attackers create two WMI event filters and two WMI event consumers.
The consumers are simply command lines launching base64-encoded PowerShell commands that load a large PowerShell script stored in the Windows registry.
Figure 1 shows how the persistence is established.
Figure 1.
Persistence using WMI
These events will run respectively at 15:30:40 and when the system uptime is between 300 and 400 seconds.
The variable $HL39fjh contains the base64-encoded PowerShell command shown in Figure 2.
It reads the Windows Registry key where the encrypted payload is stored, and contains the password and the salt needed to decrypt the payload.
Figure 2.
WMI consumer PowerShell command
Finally, the script stores the encrypted payload in the Windows registry.
Note that the attackers seem to use a different registry location per organization.
Thus, it is not a useful indicator to detect similar intrusions.
