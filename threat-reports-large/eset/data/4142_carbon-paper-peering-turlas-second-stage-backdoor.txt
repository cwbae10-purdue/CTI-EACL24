The Turla espionage group has been targeting various institutions for many years.
Recently, ESET found several new versions of Carbon.
The Turla espionage group has been targeting various institutions for many years.
Recently, we found several new versions of Carbon, a second stage backdoor in the Turla group arsenal.
Last year, a technical analysis of this component was made by Swiss GovCERT.ch as part of their report detailing the attack that a defense firm owned by the Swiss government, RUAG, suffered in the past.
This blog post highlights the technical innovations that we found in the latest versions of Carbon we have discovered.
Looking at the different versions numbers of Carbon we have, it is clear that it is still under active development.
Through the internal versions embedded in the code, we see the new versions are pushed out regularly.
The group is also known to change its tools once they are exposed.
As such, we have seen that between two major versions, mutexes and file names are being changed.
The Turla group is known to be painstaking and work in stages, first doing reconnaissance on their victims’ systems before deploying their most sophisticated tools such as Carbon.
A classic Carbon compromise chain starts with a user receiving a spearphishing email or visiting a previously compromised website, typically one that the user visits regularly — a technique known as a watering hole attack.
After a successful attack, a first stage backdoor — such as Tavdig [1] or Skipper [2] — is installed on the user machine.
Once the reconnaissance phase is over, a second stage backdoor, like Carbon, is installed on key systems.
Carbon is a sophisticated backdoor used to steal sensitive information from targets of interest by the Turla group.
This malware shares some similarities with “Uroburos” [3], a rootkit used by the same group.
The most relevant resemblance is the communication framework.
Indeed, both of them provide communication channels between different malware components.
The communication objects are implemented in the same way, the structures and vtables look identical except that there are fewer communication channels provided in Carbon.
Indeed, Carbon might be a “lite” version of Uroburos (without kernel components and without exploits).
For Turla group to decide to install Carbon on a system, a (stage 1) recognition tool is usually delivered first to the target: this tool collects several pieces of information about the victim’s machine and its network (through Tavdig or Skipper for example).
If the target is considered interesting enough, it will receive more sophisticated malware (such as Carbon or Uroburos).
The Carbon framework consists of:
a dropper that installs the carbon components and its configuration file
a component that communicates with the C&C
an orchestrator that handles the tasks, dispatches them to other computers on the network and injects into a legitimate process the DLL that communicates with the C&C
a loader that executes the orchestrator
The orchestrator and the injected library have their own development branch.
Thanks to the compilation dates and the internal versions numbers hardcoded in the PE files, we might have the following timeline:
Table 1 – Carbon development timeline
The files from the Carbon framework can have different names depending on the version but they all keep the same internal name (from the metadata) regardless of the version:
the dropper: “SERVICE.EXE”
the loader: “SERVICE.DLL” or “KmSvc.DLL”
the orchestrator: “MSIMGHLP.DLL”
the injected library: “MSXIML.DLL”
Each of these files exist in 32bit and in 64bit versions.
Several files are created by Carbon to keep logs, tasks to execute and configuration that will modify the malware’s behavior.
The contents of the majority of these files are encrypted with the CAST-128 algorithm [4].
A base working directory will contain the files/folders related to Carbon.
This directory is chosen randomly among the folders in %ProgramFiles% but excluding “WindowsApps”.
The filenames are hardcoded in the orchestrator.
The same names are used in the 3.7x+ branch.
