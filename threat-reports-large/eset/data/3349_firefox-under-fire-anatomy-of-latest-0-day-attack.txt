The recent Firefox attacks are an example of active in-the-wild exploitation of a serious software vulnerability.
On the August 6th, the Mozilla Foundation released a security update for the Firefox web browser that fixes the CVE-2015-4495 vulnerability in Firefox’s embedded PDF viewer, PDF.js.
This vulnerability allows attackers to bypass the same-origin policy and execute JavaScript remotely that will be interpreted in the local file context.
This, in turn, allows attackers to read and write files on local machine as well as upload them to a remote server.
The exploit for this vulnerability is being actively used in the wild, so Firefox users are advised to update to the latest version (39.0.3 at the time of writing) immediately.
In this blog we provide an analysis of two versions of the script and share details about the associated attacks against Windows, Linux and OS X systems.
According to ESET’s LiveGrid® telemetry, the server at the IP address 185.86.77.48, which was hosting the malicious script, has been up since July 27, 2015.
Also we can find corroboration on one of the compromised forums:
Image 1: Forum user is curious about malicious script injected into the page
Operatives from the Department on Combating Cybercrime of the Ministry of Internal Affairs of Ukraine, who responded promptly to our notification, have also confirmed that the malicious exfiltration server, hosted in Ukraine, has been online since July 27, 2015.
According to our monitoring of the threat, the server became inactive on August 8, 2015.
The script used is not obfuscated and easy to analyze.
Nevertheless, the code shows that the attackers had good knowledge of Firefox internals.
The malicious script creates an IFRAME with an empty PDF blob.
When Firefox is about to open the PDF blob with the internal PDF viewer (PDF.js), new code is injected into the IFRAME (Figure 2).
When this code executes, a new sandboxContext property is created within wrappedJSObject.
A JavaScript function is written to the sandboxContext property.
This function will later be invoked by subsequent code.
Together, these steps lead to the successful bypass of the same-origin policy.
Image 2: Code that creates sandboxContext property
The exploit is very reliable and works smoothly.
However, it may display a warning which can catch the attention of tech-savvy users.
Image 3: The warning message showed on compromised site
After successful exploitation of the bug, execution passes to the exfiltration part of code.
The script supports both the Linux and Windows platforms.
On Windows it searches for configuration files belonging to popular FTP clients (such as FileZilla, SmartFTP and others), SVN client, instant messaging clients (Psi+ and Pidgin), and the Amazon S3 client.
Image 4: The list of collected files on Windows at the first stage of attack
These configuration files may contain saved login and password details.
On the Linux systems, the script sends following files to the remote server:
/etc/passwd
/etc/hosts
/etc/hostname
/etc/issue
It also parses the /etc/passwd file in the order to get the home directories (homedir) of users on the system.
The script then searches files by mask in the home directories collected, and it avoids searching in the home directories of standard system users (such as daemon, bin, sys, sync and so forth).
Image 5: The list of collected files on Linux at stage 1 of attack
It collects and uploads such files as:
history (bash, MySQL, PostgreSQL)
SSH related configuration files and authorization keys
Configuration files for remote access software – Remmina
FileZilla configuration files
PSI+ configuration
text files with possible credentials and shell scripts
As is evident here, the purpose of the first version of the malicious script was to gather data used mostly by webmasters and site administrators.
This allowed attackers to move on to compromising more websites.
The day after Mozilla released the patch for Firefox the attackers decided to go “all-in”: they registered two new domains and improved their script.
The two new malicious domains were maxcdnn.com (93.115.38.136) and acintcdn.net (185.86.77.48).
The second IP address is the same one as used in the first version.
Attackers selected these names because the domains look as if they belong to a content delivery network (CDN).
The improved script on the Windows platform not only collects configuration files for applications; it also collects text files containing almost all combinations of words of possible value to attackers (such as password, accounts, bitcoins, credit cards, exploits, certificates, and so on):
Image 6: List of files collected on Windows during the second attack stage
The attackers improved the Linux script by adding new files to collect and also developed code that works on the Mac OS X operating system:
Image 7: List of files collected on Macs during the second stage of an attack
Some Russian-speaking commentators misattributed this code to the Duqu malware, because some variables in the code have the text “dq” in them.
Since the bug is easy to exploit and a working copy of the script is available to cybercriminals, different attackers have started to use it.
We have seen that various groups quickly adopted the exploit and started to serve it, mostly on adult sites from google-user-cache.com (108.61.205.41)
This malicious script does all the same things as the original script, but it collects different files:
Image 8: The list of collected files used in copycat attack
The recent Firefox attacks are an example of active in-the-wild exploitation of a serious software vulnerability.
The exploit shows that the malware-writers had a deep knowledge of Firefox internals.
It is also an interesting one, since in most cases, exploits are used as an infection vector for other data-stealing trojans.
In this instance, however, that was not necessary, because the malicious script alone was able to steal sensitive files from victims’ systems.
Additionally, the exploit started to be reused by other malware operators shortly after its discovery.
This is common practice in the malware world.
ESET detects the malicious scripts as JS/Exploit.CVE-2015-4495.
We also urge Firefox users to update their browser to the patched version (39.0.3).
The internal Firefox PDF reader can also be disabled by changing the pdfjs.disabled setting to true.
hxxp://www.akipress.org/ hxxp://www.tazabek.kg/ hxxp://www.super.kg/ hxxp://www.rusmmg.ru/ hxxp://forum.cs-cart.com/ hxxp://www.searchengines.ru/ hxxp://forum.nag.ru/
