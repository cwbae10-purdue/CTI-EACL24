Back in October 2019 we detected a classic watering-hole attack on a North Korea-related news site that exploited a chain of Google Chrome and Microsoft Windows zero-days.
While we’ve already published blog posts briefly describing this operation (available here and here), in this blog post we’d like to take a deep technical dive into the exploits and vulnerabilities used in this attack.
In the original blog post we described the exploit loader responsible for initial validation of the target and execution of the next stage JavaScript code containing the full browser exploit.
The exploit is huge because, besides code, it contains byte arrays with shellcode, a Portable Executable (PE) file and WebAssembly (WASM) module used in the later stages of exploitation.
The exploit abused a vulnerability in the WebAudio OfflineAudioContext interface and was targeting two release builds of Google Chrome 76.0.3809.87 and 77.0.3865.75.
However, the vulnerability was introduced long before that and much earlier releases with a WebAudio component are also vulnerable.
At the time of our discovery the current version of Google Chrome was 78, and while this version was also affected, the exploit did not support it and had a number of checks to ensure that it would only be executed on affected versions to prevent crashes.
After our report, the vulnerability was assigned CVE-2019-13720 and was fixed in version 78.0.3904.87 with the following commit.
A use-after-free (UAF) vulnerability, it could be triggered due to a race condition between the Render and Audio threads:
As you can see, when the audio buffer is set to null in ConvolverNode and an active buffer already exists within the Reverb object, the function SetBuffer() can destroy reverb_ and shared_buffer_ objects.
These objects might still be in use by the Render thread because there is no proper synchronization between the two threads in the code.
A patch added two missing locks (graph lock and process lock) for when the buffer is nullified.
The exploit code was obfuscated, but we were able to fully reverse engineer it and reveal all the small details.
By looking at the code, we can see the author of the exploit has excellent knowledge of the internals of specific Google Chrome components, especially the PartitionAlloc memory allocator.
This can clearly be seen from the snippets of reverse engineered code below.
These functions are used in the exploit to retrieve useful information from internal structures of the allocator, including: SuperPage address, PartitionPage address by index inside the SuperPage, the index of the used PartitionPage and the address of PartitionPage metadata.
All constants are taken from partition_alloc_constants.h:
It’s interesting that the exploit also uses the relatively new built-in BigInt class to handle 64-bit values; authors usually use their own primitives in exploits.
At first, the code initiates OfflineAudioContext and creates a huge number of IIRFilterNode objects that are initialized via two float arrays.
After that, the exploit begins the initial stage of exploitation and tries to trigger a UAF bug.
For that to work the exploit creates the objects that are needed for the Reverb component.
It creates another huge OfflineAudioContext object and two ConvolverNode objects – ScriptProcessorNode to start audio processing and AudioBuffer for the audio channel.
This function is executed recursively.
It fills the audio channel buffer with zeros, starts rendering offline and at the same time runs a loop that nullifies and resets the channel buffer of the ConvolverNode object and tries to trigger a bug.
The exploit uses the later() function to simulate the Sleep function, suspend the current thread and let the Render and Audio threads finish execution right on time:
During execution the exploit checks if the audio channel buffer contains any data that differs from the previously set zeroes.
The existence of such data would mean the UAF was triggered successfully and at this stage the audio channel buffer should contain a leaked pointer.
The PartitionAlloc memory allocator has a special exploit mitigation that works as follows: when the memory region is freed, it byteswaps the address of the pointer and after that the byteswapped address is added to the FreeList structure.
This complicates exploitation because the attempt to dereference such a pointer will crash the process.
To bypass this technique the exploit uses the following primitive that simply swaps the pointer back:
The exploit uses the leaked pointer to get the address of the SuperPage structure and verifies it.
If everything goes to plan, then it should be a raw pointer to a temporary_buffer_ object of the ReverbConvolverStage class that is passed to the callback function initialUAFCallback.
The exploit uses the leaked pointer to get the address of the raw pointer to the feedforward_ array with the AudioArray<double> type that is present in the IIRProcessor object created with IIRFilterNode.
This array should be located in the same SuperPage, but in different versions of Chrome this object is created in different PartitionPages and there is a special code inside initialUAFCallback to handle that.
The vulnerability is actually triggered not once but twice.
After the address of the right object is acquired, the vulnerability is exploited again.
This time the exploit uses two AudioBuffer objects of different sizes, and the previously retrieved address is sprayed inside the larger AudioBuffer.
This function also executes recursively.
This time the exploit uses the function getFrequencyResponse() to check if exploitation was successful.
The function creates an array of frequencies that is filled with a Nyquist filter and the source array for the operation is filled with zeroes.
If the resulting array contains a value other than π, it means exploitation was successful.
If that’s the case, the exploit stops its recursion and executes the function finalUAFCallback to allocate the audio channel buffer again and reclaim the previously freed memory.
This function also repairs the heap to prevent possible crashes by allocating various objects of different sizes and performing defragmentation of the heap.
The exploit also creates BigUint64Array, which is used later to create an arbitrary read/write primitive.
Heap defragmentation is performed with multiple calls to the improvised collectGarbage function that creates a huge ArrayBuffer in a loop.
After those steps, the exploit executes the function kickPayload() passing the previously created BigUint64Array containing the raw pointer address of the previously freed AudioArray’s data.
The exploit manipulates the PartitionPage metadata of the freed object to achieve the following behavior.
If the address of another object is written in BigUint64Array at index zero and if a new 8-byte object is created and the value located at index 0 is read back, then a value located at the previously set address will be read.
If something is written at index 0 at this stage, then this value will be written to the previously set address instead.
After the building of the arbitrary read/write primitives comes the final stage – executing the code.
The exploit achieves this by using a popular technique that exploits the Web Assembly (WASM) functionality.
Google Chrome currently allocates pages for just-in-time (JIT) compiled code with read/write/execute (RWX) privileges and this can be used to overwrite them with shellcode.
At first, the exploit initiates a “dummy” WASM module and it results in the allocation of memory pages for JIT compiled code.
To execute the exported function wasmFuncA, the exploit creates a FileReader object.
When this object is initiated with data it creates a FileReaderLoader object internally.
If you can parse PartitionAlloc allocator structures and know the size of the next object that will be allocated, you can predict which address it will be allocated to.
The exploit uses the getPartitionPageFreeListHeadEntryBySlotSize() function with the provided size and gets the address of the next free block that will be allocated by FileReaderLoader.
The exploit obtains this address twice to find out if the FileReaderLoader object was created and if the exploit can continue execution.
The exploit sets the exported WASM function to be a callback for a FileReader event (in this case, an onerror callback) and because the FileReader type is derived from EventTargetWithInlineData, it can be used to get the addresses of all its events and the address of the JIT compiled exported WASM function.
The variable stubAddr contains the address of the page with the stub code that jumps to the JIT compiled WASM function.
At this stage it’s sufficient to overwrite it with shellcode.
To do so, the exploit uses the function getPartitionPageFreeListHeadEntryBySlotSize() again to find the next free block of 0x20 bytes, which is the size of the structure for the ArrayBuffer object.
This object is created when the exploit creates a new audio buffer.
The exploit uses arbitrary read/write primitives to get the address of the DataHolder class that contains the raw pointer to the data and size of the audio buffer.
The exploit overwrites this pointer with stubAddr and sets a huge size.
Now all that’s needed is to implant a Uint8Array object into the memory of this audio buffer and place shellcode there along with the Portable Executable that will be executed by the shellcode.
To prevent the possibility of a crash the exploit clears the pointer to the top of the FreeList structure used by the PartitionPage.
Now, in order to execute the shellcode, it’s enough to call the exported WASM function.
Microsoft Windows elevation of privilege exploit The shellcode appeared to be a Reflective PE loader for the Portable Executable module that was also present in the exploit.
This module mostly consisted of the code to escape Google Chrome’s sandbox by exploiting the Windows kernel component win32k for the elevation of privileges and it was also responsible for downloading and executing the actual malware.
On closer analysis, we found that the exploited vulnerability was in fact a zero-day.
We notified Microsoft Security Response Center and they assigned it CVE-2019-1458 and fixed the vulnerability.
The win32k component has something of bad reputation.
It has been present since Windows NT 4.0 and, according to Microsoft, it is responsible for more than 50% of all kernel security bugs.
In the last two years alone Kaspersky has found five zero-days in the wild that exploited win32k vulnerabilities.
That’s quite an interesting statistic considering that since the release of Windows 10, Microsoft has implemented a number of mitigations aimed at complicating exploitation of win32k vulnerabilities and the majority of zero-days that we found exploited versions of Microsoft Windows prior to the release of Windows 10 RS4.
The elevation of privilege exploit used in Operation WizardOpium was built to support Windows 7, Windows 10 build 10240 and Windows 10 build 14393.
It’s also important to note that Google Chrome has a special security feature called Win32k lockdown.
This security feature eliminates the whole win32k attack surface by disabling access to win32k syscalls from inside Chrome processes.
Unfortunately, Win32k lockdown is only supported on machines running Windows 10.
So, it’s fair to assume that Operation WizardOpium targeted users running Windows 7.
CVE-2019-1458 is an Arbitrary Pointer Dereference vulnerability.
In win32k Window objects are represented by a tagWND structure.
There are also a number of classes based on this structure: ScrollBar, Menu, Listbox, Switch and many others.
The FNID field of tagWND structure is used to distinguish the type of class.
Different classes also have various extra data appended to the tagWND structure.
This extra data is basically just different structures that often include kernel pointers.
Besides that, in the win32k component there’s a syscall SetWindowLongPtr that can be used to set this extra data (after validation of course).
It’s worth noting that SetWindowLongPtr was related to a number of vulnerabilities in the past (e.g., CVE-2010-2744, CVE-2016-7255, and CVE-2019-0859).
There’s a common issue when pre-initialized extra data can lead to system procedures incorrectly handling.
In the case of CVE-2019-1458, the validation performed by SetWindowLongPtr was just insufficient.
xxxSetWindowLongPtr(tagWND *pwnd, int index, QWORD data, ...) ... if ( (int)index >= gpsi->mpFnid_serverCBWndProc[(pwnd->fnid & 0x3FFF) - 0x29A] - sizeof(tagWND) ) ... extraData = (BYTE*)tagWND + sizeof(tagWND) + index old = *(QWORD*)extraData; *(QWORD*)extraData = data; return old; 12345678 xxxSetWindowLongPtr(tagWND *pwnd, int index, QWORD data, ...) ... if ( (int)index >= gpsi->mpFnid_serverCBWndProc[(pwnd->fnid & 0x3FFF) - 0x29A] - sizeof(tagWND) ) ... extraData = (BYTE*)tagWND + sizeof(tagWND) + index old = *(QWORD*)extraData; *(QWORD*)extraData = data; return old; A check for the index parameter would have prevented this bug, but prior to the patch the values for FNID_DESKTOP, FNID_SWITCH, FNID_TOOLTIPS inside the mpFnid_serverCBWndProc table were not initialized, rendering this check useless and allowing the kernel pointers inside the extra data to be overwritten.
Triggering the bug is quite simple: at first, you create a Window, then NtUserMessageCall can be used to call any system class window procedure.
gpsi->mpFnidPfn[(dwType + 6) & 0x1F]((tagWND *)wnd, msg, wParam, lParam, resultInfo); 1 gpsi->mpFnidPfn[(dwType + 6) & 0x1F]((tagWND *)wnd, msg, wParam, lParam, resultInfo); It’s important to provide the right message and dwType parameters.
The message needs to be equal to WM_CREATE.
dwType is converted to fnIndex internally with the following calculation: (dwType + 6) & 0x1F.
The exploit uses a dwType equal to 0xE0.
It results in an fnIndex equal to 6 which is the function index of xxxSwitchWndProc and the WM_CREATE message sets the FNID field to be equal to FNID_SWITCH.
LRESULT xxxSwitchWndProc(tagWND *wnd, UINT msg, WPARAM wParam, LPARAM lParam) { ... pti = *(tagTHREADINFO **)&gptiCurrent; if ( wnd->fnid != FNID_SWITCH ) { if ( wnd->fnid || wnd->cbwndExtra + 296 < (unsigned int)gpsi->mpFnid_serverCBWndProc[6] ) return 0i64; if ( msg != 1 ) return xxxDefWindowProc(wnd, msg, wParam, lParam); if ( wnd[1].head.h ) return 0i64; wnd->fnid = FNID_SWITCH; } switch ( msg ) { case WM_CREATE: zzzSetCursor(wnd->pcls->spcur, pti, 0i64); break; case WM_CLOSE: xxxSetWindowPos(wnd, 0, 0); xxxCancelCoolSwitch(); break; case WM_ERASEBKGND: case WM_FULLSCREEN: pti->ptl = (_TL *)&pti->ptl; ++wnd->head.cLockObj; xxxPaintSwitchWindow(wnd, pti, 0i64); ThreadUnlock1(); return 0i64; } return xxxDefWindowProc(wnd, msg, wParam, lParam); } 123456789101112131415161718192021222324252627282930313233 LRESULT xxxSwitchWndProc(tagWND *wnd, UINT msg, WPARAM wParam, LPARAM lParam){... pti = *(tagTHREADINFO **)&gptiCurrent; if ( wnd->fnid != FNID_SWITCH ) { if ( wnd->fnid || wnd->cbwndExtra + 296 < (unsigned int)gpsi->mpFnid_serverCBWndProc[6] ) return 0i64; if ( msg != 1 ) return xxxDefWindowProc(wnd, msg, wParam, lParam); if ( wnd[1].head.h ) return 0i64; wnd->fnid = FNID_SWITCH; } switch ( msg ) { case WM_CREATE: zzzSetCursor(wnd->pcls->spcur, pti, 0i64); break; case WM_CLOSE: xxxSetWindowPos(wnd, 0, 0); xxxCancelCoolSwitch(); break; case WM_ERASEBKGND: case WM_FULLSCREEN: pti->ptl = (_TL *)&pti->ptl; ++wnd->head.cLockObj; xxxPaintSwitchWindow(wnd, pti, 0i64); ThreadUnlock1(); return 0i64; } return xxxDefWindowProc(wnd, msg, wParam, lParam);} The vulnerability in NtUserSetWindowLongPtr can then be used to overwrite the extra data at index zero, which happens to be a pointer to a structure containing information about the Switch Window.
In other words, the vulnerability makes it possible to set some arbitrary kernel pointer that will be treated as this structure.
At this stage it’s enough to call NtUserMessageCall again, but this time with a message equal to WM_ERASEBKGND.
This results in the execution of the function xxxPaintSwitchWindow that increments and decrements a couple of integers located by the pointer that we previously set.
sub [rdi+60h], ebx add [rdi+68h], ebx ... sub [rdi+5Ch], ecx add [rdi+64h], ecx 12345 sub [rdi+60h], ebxadd [rdi+68h], ebx...sub [rdi+5Ch], ecxadd [rdi+64h], ecx An important condition for triggering the exploitable code path is that the ALT key needs to be pressed.
Exploitation is performed by abusing Bitmaps.
For successful exploitation a few Bitmaps need to be allocated next to each other, and their kernel addresses need to be known.
To achieve this, the exploit uses two common kernel ASLR bypass techniques.
For Windows 7 and Windows 10 build 10240 (Threshold 1) the Bitmap kernel addresses are leaked via the GdiSharedHandleTable technique: in older versions of the OS there is a special table available in the user level that holds the kernel addresses of all GDI objects present in the process.
This particular technique was patched in Windows 10 build 14393 (Redstone 1), so for this version the exploit uses another common technique that abuses Accelerator Tables (patched in Redstone 2).
It involves creating a Create Accelerator Table object, leaking its kernel address from the gSharedInfo HandleTable available in the user level, and then freeing the Accelerator Table object and allocating a Bitmap reusing the same memory address.
The whole exploitation process works as follows: the exploit creates three bitmaps located next to each other and their addresses are leaked.
The exploit prepares Switch Window and uses a vulnerability in NtUserSetWindowLongPtr to set an address pointing near the end of the first Bitmap as Switch Window extra data.
Bitmaps are represented by a SURFOBJ structure and the previously set address needs to be calculated in a way that will make the xxxPaintSwitchWindow function increment the sizlBitmap field of the SURFOBJ structure for the Bitmap allocated next to the first one.
The sizlBitmap field indicates the bounds of the pixel data buffer and the incremented value will allow the use of the function SetBitmapBits() to perform an out-of-bounds write and overwrite the SURFOBJ of the third Bitmap object.
The pvScan0 field of the SURFOBJ structure is an address of the pixel data buffer, so the ability to overwrite it with an arbitrary pointer results in arbitrary read/write primitives via the functions GetBitmapBits()/SetBitmapBits().
The exploit uses these primitives to parse the EPROCESS structure and steal the system token.
To get the kernel address of the EPROCESS structure, the exploit uses the function EnumDeviceDrivers.
This function works according to its MSDN description and it provides a list of kernel addresses for currently loaded drivers.
The first address in the list is the address of ntkrnl and to get the offset to the EPROCESS structure the exploit parses an executable in search for the exported PsInitialSystemProcess variable.
It’s worth noting that this technique still works in the latest versions of Windows (tested with Windows 10 19H1 build 18362).
Stealing the system token is the most common post exploitation technique that we see in the majority of elevation of privilege exploits.
After acquiring system privileges the exploit downloads and executes the actual malware.
Conclusions It was particularly interesting for us to examine the Chrome exploit because it was the first Google Chrome in-the-wild zero-day encountered for a while.
It was also interesting that it was used in combination with an elevation of privilege exploit that didn’t allow exploitation on the latest versions of Windows mostly due to the Win32k lockdown security feature of Google Chrome.
With regards to privilege elevation, it was also interesting that we found another 1-day exploit for this vulnerability just one week after the patch, indicating how simple it is to exploit this vulnerability.
We would like to thank the Google Chrome and Microsoft security teams for fixing these vulnerabilities so quickly.
Google was generous enough to offer a bounty for CVE-2019-13720.
The reward was donated to charity and Google matched the donation.
The shellcode appeared to be a Reflective PE loader for the Portable Executable module that was also present in the exploit.
This module mostly consisted of the code to escape Google Chrome’s sandbox by exploiting the Windows kernel component win32k for the elevation of privileges and it was also responsible for downloading and executing the actual malware.
On closer analysis, we found that the exploited vulnerability was in fact a zero-day.
We notified Microsoft Security Response Center and they assigned it CVE-2019-1458 and fixed the vulnerability.
The win32k component has something of bad reputation.
It has been present since Windows NT 4.0 and, according to Microsoft, it is responsible for more than 50% of all kernel security bugs.
In the last two years alone Kaspersky has found five zero-days in the wild that exploited win32k vulnerabilities.
That’s quite an interesting statistic considering that since the release of Windows 10, Microsoft has implemented a number of mitigations aimed at complicating exploitation of win32k vulnerabilities and the majority of zero-days that we found exploited versions of Microsoft Windows prior to the release of Windows 10 RS4.
The elevation of privilege exploit used in Operation WizardOpium was built to support Windows 7, Windows 10 build 10240 and Windows 10 build 14393.
It’s also important to note that Google Chrome has a special security feature called Win32k lockdown.
This security feature eliminates the whole win32k attack surface by disabling access to win32k syscalls from inside Chrome processes.
Unfortunately, Win32k lockdown is only supported on machines running Windows 10.
So, it’s fair to assume that Operation WizardOpium targeted users running Windows 7.
CVE-2019-1458 is an Arbitrary Pointer Dereference vulnerability.
In win32k Window objects are represented by a tagWND structure.
There are also a number of classes based on this structure: ScrollBar, Menu, Listbox, Switch and many others.
The FNID field of tagWND structure is used to distinguish the type of class.
Different classes also have various extra data appended to the tagWND structure.
This extra data is basically just different structures that often include kernel pointers.
Besides that, in the win32k component there’s a syscall SetWindowLongPtr that can be used to set this extra data (after validation of course).
It’s worth noting that SetWindowLongPtr was related to a number of vulnerabilities in the past (e.g., CVE-2010-2744, CVE-2016-7255, and CVE-2019-0859).
There’s a common issue when pre-initialized extra data can lead to system procedures incorrectly handling.
In the case of CVE-2019-1458, the validation performed by SetWindowLongPtr was just insufficient.
A check for the index parameter would have prevented this bug, but prior to the patch the values for FNID_DESKTOP, FNID_SWITCH, FNID_TOOLTIPS inside the mpFnid_serverCBWndProc table were not initialized, rendering this check useless and allowing the kernel pointers inside the extra data to be overwritten.
Triggering the bug is quite simple: at first, you create a Window, then NtUserMessageCall can be used to call any system class window procedure.
It’s important to provide the right message and dwType parameters.
The message needs to be equal to WM_CREATE.
dwType is converted to fnIndex internally with the following calculation: (dwType + 6) & 0x1F.
The exploit uses a dwType equal to 0xE0.
It results in an fnIndex equal to 6 which is the function index of xxxSwitchWndProc and the WM_CREATE message sets the FNID field to be equal to FNID_SWITCH.
The vulnerability in NtUserSetWindowLongPtr can then be used to overwrite the extra data at index zero, which happens to be a pointer to a structure containing information about the Switch Window.
In other words, the vulnerability makes it possible to set some arbitrary kernel pointer that will be treated as this structure.
At this stage it’s enough to call NtUserMessageCall again, but this time with a message equal to WM_ERASEBKGND.
This results in the execution of the function xxxPaintSwitchWindow that increments and decrements a couple of integers located by the pointer that we previously set.
An important condition for triggering the exploitable code path is that the ALT key needs to be pressed.
Exploitation is performed by abusing Bitmaps.
For successful exploitation a few Bitmaps need to be allocated next to each other, and their kernel addresses need to be known.
To achieve this, the exploit uses two common kernel ASLR bypass techniques.
For Windows 7 and Windows 10 build 10240 (Threshold 1) the Bitmap kernel addresses are leaked via the GdiSharedHandleTable technique: in older versions of the OS there is a special table available in the user level that holds the kernel addresses of all GDI objects present in the process.
This particular technique was patched in Windows 10 build 14393 (Redstone 1), so for this version the exploit uses another common technique that abuses Accelerator Tables (patched in Redstone 2).
It involves creating a Create Accelerator Table object, leaking its kernel address from the gSharedInfo HandleTable available in the user level, and then freeing the Accelerator Table object and allocating a Bitmap reusing the same memory address.
The whole exploitation process works as follows: the exploit creates three bitmaps located next to each other and their addresses are leaked.
The exploit prepares Switch Window and uses a vulnerability in NtUserSetWindowLongPtr to set an address pointing near the end of the first Bitmap as Switch Window extra data.
Bitmaps are represented by a SURFOBJ structure and the previously set address needs to be calculated in a way that will make the xxxPaintSwitchWindow function increment the sizlBitmap field of the SURFOBJ structure for the Bitmap allocated next to the first one.
The sizlBitmap field indicates the bounds of the pixel data buffer and the incremented value will allow the use of the function SetBitmapBits() to perform an out-of-bounds write and overwrite the SURFOBJ of the third Bitmap object.
The pvScan0 field of the SURFOBJ structure is an address of the pixel data buffer, so the ability to overwrite it with an arbitrary pointer results in arbitrary read/write primitives via the functions GetBitmapBits()/SetBitmapBits().
The exploit uses these primitives to parse the EPROCESS structure and steal the system token.
To get the kernel address of the EPROCESS structure, the exploit uses the function EnumDeviceDrivers.
This function works according to its MSDN description and it provides a list of kernel addresses for currently loaded drivers.
The first address in the list is the address of ntkrnl and to get the offset to the EPROCESS structure the exploit parses an executable in search for the exported PsInitialSystemProcess variable.
It’s worth noting that this technique still works in the latest versions of Windows (tested with Windows 10 19H1 build 18362).
Stealing the system token is the most common post exploitation technique that we see in the majority of elevation of privilege exploits.
After acquiring system privileges the exploit downloads and executes the actual malware.
It was particularly interesting for us to examine the Chrome exploit because it was the first Google Chrome in-the-wild zero-day encountered for a while.
It was also interesting that it was used in combination with an elevation of privilege exploit that didn’t allow exploitation on the latest versions of Windows mostly due to the Win32k lockdown security feature of Google Chrome.
With regards to privilege elevation, it was also interesting that we found another 1-day exploit for this vulnerability just one week after the patch, indicating how simple it is to exploit this vulnerability.
We would like to thank the Google Chrome and Microsoft security teams for fixing these vulnerabilities so quickly.
Google was generous enough to offer a bounty for CVE-2019-13720.
The reward was donated to charity and Google matched the donation.
