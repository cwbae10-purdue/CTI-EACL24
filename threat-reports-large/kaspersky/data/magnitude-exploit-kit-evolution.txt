Exploit kits are not as widespread as they used to be.
In the past, they relied on the use of already patched vulnerabilities.
Newer and more secure web browsers with automatic updates simply do not allow known vulnerabilities to be exploited.
It was very different back in the heyday of Adobe Flash because it’s just a plugin for a web browser, meaning that even if the user has an up-to-date browser, there’s a non-zero chance that Adobe Flash may still be vulnerable to 1-day exploits.
Now that Adobe Flash is about to reach its end-of-life date at the end of this year, it is disabled by default in all web browser and has pretty much been replaced with open standards such as HTML5, WebGL, WebAssembly.
The decline of exploit kits can be linked to the decline of Adobe Flash, but exploit kits have not disappeared completely.
They have adapted and switched to target users of Internet Explorer without the latest security updates installed.
Microsoft Edge replaced Internet Explorer as a default web browser with the release of Windows 10 in 2015, but Internet Explorer is still installed for backward compatibility on machines running Windows 10 and it has remained a default web browser for Windows 7/8/8.1.
The switch to Microsoft Edge development also meant that Internet Explorer would no longer be actively developed and would only receive vulnerability patches without general security improvements.
Still, somehow, Internet Explorer remains a relatively popular web browser.
According to NetMarketShare, as of April 2020 Internet Explorer is used on 5.45% of desktop computers (for comparison, Firefox accounts for 7.25%, Safari 3.94%, Edge 7.76%).
Despite the security of Internet Explorer being five years behind that of its modern counterparts, it supports a number of legacy script engines.
CVE-2018-8174 is a vulnerability in a legacy VBScript engine that was originally discovered in the wild as an exploited zero-day.
The majority of exploit kits quickly adopted it as their primary exploit.
Since the discovery of CVE-2018-8174 a few more vulnerabilities for Internet Explorer have been discovered as in-the-wild zero-days: CVE-2018-8653, CVE-2019-1367, CVE-2019-1429, and CVE-2020-0674.
All of them exploited another legacy component of Internet Explorer – a JScript engine.
It felt like it was just a matter of time until exploit kits adopted these new exploits.
Exploit kits still play a role in today’s threat landscape and continue to evolve.
For this blogpost I studied and analyzed the evolution of one of the most sophisticated exploit kits out there – Magnitude EK – for a whole year.
This blogpost in a nutshell:
Magnitude EK continues to deliver ransomware to Asia Pacific (APAC) countries via malvertising
Study of the exploit kit’s activity over a period of 12 months shows that Magnitude EK is actively maintained and undergoes continuous development
In February this year Magnitude EK switched to an exploit for the more recent vulnerability CVE-2019-1367 in Internet Explorer (originally discovered as an exploited zero-day in the wild)
Magnitude EK uses a previously unknown elevation of privilege exploit for CVE-2018-8641 developed by a prolific exploit writer
Magnitude EK is one of the longest-standing exploit kits.
It was on offer in underground forums from 2013 and later became a private exploit kit.
As well as a change of actors, the exploit kit has switched its focus to deliver ransomware to users from specific Asia Pacific (APAC) countries via malvertising.
!function(e,i,n,s){var t="InfogramEmbeds",d=e.getElementsByTagName("script")[0];if(window[t]&&window[t].initialized)window[t].process&&window[t].process();else if(!e.getElementById(n)){var o=e.createElement("script");o.async=1,o.id=n,o.src="https://e.infogram.com/js/dist/embed-loader-min.js",d.parentNode.insertBefore(o,d)}}(document,0,"infogram-async");
Active attacks by Magnitude EK in 2019 according to Kaspersky Security Network (KSN) (download)
!function(e,i,n,s){var t="InfogramEmbeds",d=e.getElementsByTagName("script")[0];if(window[t]&&window[t].initialized)window[t].process&&window[t].process();else if(!e.getElementById(n)){var o=e.createElement("script");o.async=1,o.id=n,o.src="https://e.infogram.com/js/dist/embed-loader-min.js",d.parentNode.insertBefore(o,d)}}(document,0,"infogram-async");
Active attacks by Magnitude EK in 2020 according to Kaspersky Security Network (KSN) (download)
Our statistic shows that this campaign continues to target APAC countries to this day and during the year in question Magnitude EK always used its own ransomware as a final payload.
Like the majority of exploit kits out there, in 2019 Magnitude EK used CVE-2018-8174.
However, the attackers behind Magnitude EK were one of the first to adopt the much newer vulnerability CVE-2019-1367 and they have been using it as their primary exploit since February 11, 2020.
As was the case with CVE-2018-8174, they didn’t develop their own exploit for CVE-2019-1367, instead reusing the original zero-day and modifying it with their own shellcode and obfuscation.
CVE-2019-1367 is a Use-After-Free vulnerability due to a garbage collector not tracking a value that was not rooted in the legacy JavaScript engine jscript.dll.
By default, Internet Explorer 11 uses Jscript9.dll, but it’s still possible to execute the script using the legacy engine by enabling compatibility mode with Internet Explorer 7/8.
This can be done with the following script attributes:
The original exploit uses JScript.Compact, a special profile defined for embedded devices.
But JScript.Encode is much more interesting because it was developed by Microsoft to protect scripts and prevent source code from being copied.
This script attribute can execute scripts encoded with Microsoft Script Encoder (screnc.exe) and it also disables script debugging.
Basically, it’s a DRM for JavaScript.
Magnitude EK changed from its original exploit to take advantage of this feature.
Exploit packed with JScript.Encode technique
Unpacked exploit.
Shellcode, names and some strings are obfuscated
Their shellcodes piqued my interest.
They use a huge number of different shellcode encoders, from the classical Metasploit shikata_ga_nai encoder and DotNetToJScript to a variety of custom encoders and stagers.
It was also impossible not to notice the changes happening to their main shellcode responsible for launching the ransomware payload.
The attackers are fine-tuning their arsenal on a regular basis.
Magnitude EK has existed since at least 2013, but below you can see just the changes to payload/shellcode that occurred over the period of one year (June 2019 to June 2020).
During this period we observed attacks happening almost every day.
Timeline of shellcode/payload changes
