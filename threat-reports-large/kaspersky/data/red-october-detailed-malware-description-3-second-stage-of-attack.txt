Exploits
Dropper
Loader Module
Main component
Modules, general overview
Recon group
Password group
Email group
USB drive group
Keyboard group
Persistence group
Spreading group
Mobile group
Exfiltration group
Known variants:
The files are all PE exe files between 232 KB and 264 KB, compiled with Microsoft Visual Studio 2005.
It is written in C/C++.
Related binaries are heavily packed with a custom packer.
The packer disrupts basic software breakpoints and some api hooking techniques, because it decrypts the original exe’s section contents onto heaps in-memory and then writes the decrypted code and .data, .rdata contents back over the original sections, hopping back into the decrypted code and executing from there.
At its OEP, the module further retrieves environment information, and then creates a mutex with the string “SUPER MUTEX”.
Then the module steals authentication credentials from mail.ru agent software and attempts to steal open and saved attachments on the system from the Outlook Secure Temp Folder.
The executable then fails to write its own contents to another executable file in tmp and maintain persistence on the system.
Network functionality is absent from this module.
The module steals Mail.Ru Mail Agent account credentials by reading relevant registry in order to extract the passwords or decrypt them depending of the version.
The two locations this data is accessed are
Registry key/value pair for Mail.Ru Agent version < 5.2 Registry key: HKCUSoftwareMail.RuAgentmagent_logins, binary value: ####password
Registry key/value pair for Mail.Ru Agent version 5.2 to 5.6 Registry key: HKCUSoftwareMail.RuAgentmagent_logins2 binary value: ####password
Registry key/value pair for Mail.Ru Agent version >= 5.7 (Last version 6 is also supported) Registry key: HKCUSoftwareMail.RuAgentmagent_logins3 binary value: ####password
Text file used by Mail.Ru Agent to store Blowfish encryption key %APPDATA%MraUpdatever.txtThe contents of this registry keys are read and the blowfish key stored inside “ver.txt” is used to decrypt the passwords, in version 5.7 and above.All actions are logged with time stamp, and then encrypted and written to %temp%~avp2.log.The module will attempt to access “ver.txt” which is protected on the system.
If it can read it using standard API functions, it uses NTFS low level access.In order to do so, it uses the DeviceIoControl API function with the “FSCTL_GET_NTFS_VOLUME_DATA” and “FSCTL_GET_NTFS_FILE_RECORD” IOCTLs.The data of this file will also be written to %temp%~mslog.tmp, which is a backup of “ver.txt”After the module will build a new string with the current timestamp followed by delimiting dashes and indication that the module has finished running, like “2012:11:10:10:22:34——-PROGA END“.
This string will be written to the ~avp2.log file.Here is an example of a decrypted ~avp2.log file: “2012:11:22:17:21:44”——-PROGA START—– “2012:11:22:17:21:44″ERROR ACCESS file ver.txt “2012:11:22:17:21:44″FILE SYSTEM NTFS “2012:11:22:17:21:44″PROBING GET FILE LOW LIVEL “2012:11:22:17:21:44″ACCESS LOW LIVEL OK!!!!
“2012:11:22:17:21:44″REG OPEN KEY[SoftwareMail.RuAgentmagent_logins3] “2012:11:22:17:21:44″SUB KEY[000#victim@mail.ru] “2012:11:22:17:21:44″uin(0)[000#victim@mail.ru] passwd(0)[%removed%] “2012:11:22:17:21:44”——-PROGA END—– The string between “[” and “]” is binary value of MD5 Hash of the Mail.ru Agent password.All restored credentials are also stored encrypted in the “~pass2.pwl” file without the time stamp information and how they were accessed.Meanwhile “PROGA” word used in here might refer to transliteration of Russian slang “ПРО”which literally means an application or a program.
