Cryptolockers have become more and more sophisticated, bypassing system protections and terrifying anyone in their path.
TeslaCrypt, CryptoWall, TorrentLocker, Locky and CTB-Locker are only some of the malware we have protected from for the past two years.
We have seen many shapes and colors of cryptolockers, but the new CTB-Locker variant says it all.
The world of cybercriminals is investing in how to reinvent cryptolockers.
Before, CTB-Locker, or Onion Ransomware, differed from other ransomware in the usage of the Tor Project’s anonymity network to shield itself from takedown efforts that rely largely on static malware command and control servers.
Its use of Tor also helped evading detection and blocking.
Another thing that protected CTB-Locker controllers was accepting as payment only Bitcoins, the decentralized and largely anonymous crypto-currency known.
A new variant of the CTB-Locker targets web servers only, and to our knowledge it has already successfully encrypted web-root files in more than 70 servers located in 10 countries.
In this blogpost I will take you into the “lion’s den”, after victims were kind enough to share the cryptors that had been deployed into their web servers.
This new variant aims to encrypt web servers and demand less than half a bitcoin as a ransom (~150 USD).
If payment isn’t sent on time the ransom is doubled to approximately 300 USD.
When paid, the decryption key is generated and is used to decrypt the web server’s files.
It has become clear that the web servers infected with this variant were targeted due to a security hole in their web server.
Once exploited, the website is defaced.
Defacement is a well-known method for hacking groups to show their victims they mean business.
The most recent cases we’ve witnessed are not random, but mostly about political affiliations and cultural perspectives.
In this case, the defacement, which contains a replacement of the main php/html page, is used as the message carrier and contains all the means necessary for the attack to leave the right impression on the victim.
We will deep-dive into it in the next steps.
It is important to mention that the original code is not deleted.
It is stored safely in the web root with a different name in an encrypted state.
As variants of malware of this kind are based on the simple fact that a victim cares more about his content than about paying a ransom, the authors usually leave a very detailed message for everyone to see.
The following quote is a part of the information that is left on the main page:
The decryption key is stored on a remote server, but the attackers were “kind enough” to allow the victim to decrypt two files free, as a sign of authenticity.
The other function that exists on the attacked website allows the victim to communicate with the attacker via chat: it requires a personal signature/code which is available for victims only.
At the moment, no decryption tool exists in the wild, thus there is no way to decrypt the files encrypted by the new CTB-Locker.
The only way to remove this threat in a matter of seconds is to keep file backups in a separate location.
Although this seems like a big concern, we tend to believe that it is not.
Large websites tend to have multiple versions of their content, spreading over a number of webservers.
In many other cases, they are supervised and tested by professional security penetration testing firms and so are constantly under the magnifier.
We still don’t know how the CTB-Locker is being deployed on web servers, but there is one common thing among many of the attacked servers – they use the WordPress platform as a content management tool.
WordPress contains many vulnerabilities in its non-updated versions and we already seen critical vulnerabilities presented last year.
In addition, WordPress also has another weak spot – plugins.
Those tiny enhancement features helps WordPress become what it is – a leader in the world of CMS.
However, having third party plugins also makes the server more vulnerable to attacks, as plugin authors are not committed to any type of security measurements.
Once the malware author is inside WordPress system, he is able to replace the main website file and execute the encryption routine.
The main file is renamed and saved in an encrypted state.
Two different AES-256 keys are deployed to the victim server:
create_aes_cipher($keytest) – encrypts the two files which can be decrypted free.
create_aes_cipher($keypass) – encrypts the rest of the files hosted on the server web root.
The two files are chosen by the authors and their names are saved in a text file.
The create_aes_cipher() accepts one parameter as the key and sends it to the standard Crypt_AES() function:
