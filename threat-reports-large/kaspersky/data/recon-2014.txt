Today was the last day of the REcon 2014 conference where reverse engineers from all over the world meet and share their research.
The event started with trainings, where I (Nicolas) gave a 4 days training on malware reverse engineering.
During those 4 days, we covered various kind of topics such as how to unpack/decrypt malware, identify cryptography algorithms, deal with obfuscated code, analyze shellcode etc.
My colleague Marta Janus did a talk explaining the various techniques used by malwares to evade detection and sandboxing, and covered a lot of obfuscations tricks used in current malware.
The presentations this year were quite interesting and a few of them directly related to what we do in the labs, including graph representation of binaries , tools to help speed up analysis and handle code obfuscation.
You can find the full schedule of the conference here
The slides and the videos of every talks will be uploaded in the future on the REcon website.
Meanwhile, you can already download some of the research tools:
PANDA is the Platform for Architecture-Neutral Dynamic Analysis.
It is a platform based on QEMU 1.0.1 and LLVM 3.3 for performing dynamic software analysis, abstracting architecture-level details away with a clean plugin interface.
It is currently being developed in collaboration with MIT Lincoln Laboratory, Georgia Tech, and Northeastern University.
FUNCAP is a script to record function calls (and returns) across an executable using IDA debugger API, along with all the arguments passed.
It dumps the info to a text file, and also inserts it into IDA’s inline comments.
This way, static analysis that usually follows the behavioral runtime analysis when analyzing malware, can be directly fed with runtime info such as decrypted strings returned in function’s arguments
One presentation mentioned a framework for Reverse Engineering which i consider worthy to list here.
MIASM 2 is a a free and open source (GPLv2) reverse engineering framework.
Miasm aims at analyzing/modifying/generating binary programs.
Abilities to represent assembly semantic using intermediate language, emulating using jit (dynamic code analysis, unpacking) and expression simplification for automatic de-obfuscation.
See you next year at RECON 2015
Twitter: @nicolasbrulez
