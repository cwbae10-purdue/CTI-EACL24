Today the great majority of malware is created with the aim of enrichment.
One of the tactics often used by evildoers is to encrypt files and demand a ransom for their decryption.
Kaspersky Lab classes such programs as Trojan-Ransom malware, although there is another widely used and resonant name – encrypters.
Encrypters have become a serious problem for users, especially corporate users.
And related topics attract the most posts and readers on our forum.
Despite all the efforts of the anti-virus companies we don’t expect an easy victory over encrypters in the short term.
There are at least two good reasons for this:
Encrypters are constantly evolving.
It is a battle of arms and armour: the defence gets better – the weapons get better.
The attack is not carried out on the user’s computer but on the system of computer + user.
That is, one of the attack vectors is human.
A person is subject to emotions and irrational acts.
A person is capable of ignoring the warnings of the defence systems or turning it off altogether.
This is precisely what the evildoers are counting on.
In this article we look at the evolution of complication of the encryption schemes used by virus writers and the methods they adopt to put pressure on their victims.
At the end of the article there is some advice for users which might help them protect important files.
Serious antivirus companies devote special attention to protection against encrypters.
To counter the improved systems of defence virus writers need to change their programs regularly.
And they change almost everything: the encryption schemes, means of obfuscation and even the formats of executable files.
Virus writers change the encryption schemes, means of obfuscation and even the formats of executable files
We will consider the evolution of encrypters in terms of the methods of encryption and cypher schemes employed.
Depending on the cypher scheme used and the method of obtaining the key, in some cases it is possible to easily decypher the encrypted data and in others it is impossilbe to do so within a reasonable time.
We begin with programs that use the most primitive encryption.
A typical example of such malware is the Trojan-Ransom.Win32.Xorist family.
It has the following characteristics:
Xorist is one of the few encrypters that carries out its threat and damages the users files when several incorrect attempts are made to enter the password.
An XOR operation is used to perform the encryption.
The vulnerability of this encryption scheme is that it is possible to easily decrypt files because of the well-known standard file headers.
To counter this attack Xorist encrypts files not from the very beginning but after an interval.
By default this interval is 104h bytes but this can be changed at compilation.
To complicate the encryption algorithm the key is randomised with the help of the first letter of the file name.
Fragment of a file encrypted by an encrypter of the Xorist family: the eight byte key is clearly visible
On the whole, despite all the cunning of the creators of Xorist the files encrypted by it can be entirely decrypted relatively easily.
Maybe for that reason at the moment the Xorist family of malware is hardly ever encountered in the wild.
To combat Trojan-Ransom.Win32.Xorist the specialists of Kaspersky Lab created the utility XoristDecryptor.
A symmetrical encrytion scheme is a scheme that uses a pair of keys for encrytion and decryption that are symmetrical to each other (this is why this scheme is called symmetrical).
In the great majority of cases in such schemes one and the same key is used for encryption and decryption.
If the key is embedded in the body of the encrypter, if one has access to the body of the malware it is possible to extract the key and create an effective utility to decrypt the files.
Such malware usually tries to delete itself after encrypting the files.
An example of this type of program could be one of the modifications of the Rakhni family.
Keys that were detected were added to the utility RakhniDecryptor.
If the key is recieved from the attacker’s server or generated and sent to it then having an example of the malware yields little — an example of the key is necessary, and it is on the attacker’s server.
If it is possible to recover the key (for obvious reasons the malware tries to delete such key after use) then it is possible to create a utility for decryption.
In this case a system that caches the internet traffic of the user may be useful.
An example of this type of malware is Trojan-Ransom.Win32.Cryakl.
Assymetric encryption is the name given to those schemes in which the encryption and decryption keys are not related in an obvious symmetrical way.
The encrytion key is called the open or public key and the decryption key is the secret or private key.
Calculating the private key from a known public key is a very complicated mathematical task which is not possible in a reasonable time using modern computing capabilities.
At the heart of assymetrical cypher schemes is the so-called trapdoor one-way function.
Put simply this is a mathematical function that depends on a parameter (secret).
Without knowing the secret parameter the value of the function is calculated comparatively easily going one way (for a given value argument we can calculate the value of the function) and extremely difficult in the reverse direction (knowing the value of the function to calculate the value of the argument).
However everything changes knowing the secret parameter — with its help it is possible to reverse the function without particular difficulty.
If the public key is embeded in the body of the malware the presence of the malware without the private key is almost no help in decyphering the files (but does help in detecting the program and others like it in the future).
However if the private key becomes known (and it should at least be contained in the decrypter which the evildoer is offering for sale), then it becomes possible to decrypt the data for all users affected by the modification of the program using that public key.
An example of malware of this type is Trojan-Ransom.Win32.Rector.
The characteristics of this family are as follows:
Uses assymetric encryption and the public key is hidden in the body of the encrypter.
To speed up the encryption of files it doesn’t encrypt them all at once but in small sections.
The encrypted sections are added on to the end of the file and their space is filled in with sequences with a frequency of one byte.
Because of this the encrypted file gains a typical ‘scratched’ appearance.
File fragment encrpted by a program from the Rector family
One defect of this scheme for the evildoer is that for the decryption of the files it is necessary to hand over the private key, which can be used to decypher all files encrypted by this modification of the malware.
Thus, although direct decryption of the files is impossible, several users suffering from one and the same modification of the malware can unite and buy one decoder for all of them.
Also users and other interested persons send decoders to us.
The private codes received are added to the RectorDecryptor.
If the public key is obtained from the evildoer’s server (which allows the use of a unique public key for each user) then the presence of the body of the malware doesn’t help in the decryption of the data — it is necessary to have the private key.
However the body of the program helps identify and block the malware server and this helps protect other users.
To ensure a unique decoder for each user schemes with several keys are used.
For this the key for encryption of data is generated on the victim’s computer.
It might be a symmetric key or an assymetric key pair.
The algorithm for key generation is chosen so that the resulting key is unique for each affected user.
In other words the chances of these keys being the same in any two cases should be extremely small.
However sometimes the malware creators make a mistake and the key is generated from a relatively small range of possible values.
In this case the user’s data can be decyphered by trying all possible values of the key.
However such cases have been rare lately.
The user’s data is encrypted using the generated key.
Then the key that is necessary to decypher the data is encrypted itself using another public key.
This public key is generated earlier and the accompanying private key is not in the body of the encrypter but instead that private key is known to the evildoer.
Then the original key necessary for decyphering the data is deleted and only the encrypted version remains on the user’s computer.
Now, having received the encrypted copy of the key the evildoer can extract the key from it that is needed to decypher the user’s data and include it in the decoder.
And this decoder will be useless for other affected users.
Which, from the point of view of the evildoers, is a great improvement over the two-key schemes described above.
There is no algorithm to decrypt files encrypted with the RSA with a key length of 1024 bits in an acceptable time
An example of malware using a scheme with several keys is the Trojan-Ransom.BAT.Scatter family.
The Scatter family has several significant features:
A more advanced encryption scheme is used with two pairs of assymetric keys, which allows the evildoers to encrypt the files of the victim without revealing their private key.
Samples of this family are written in scripting languages, which allows the malicious functions to be easily changed.
Scripts are easier to obfuscate and this process is easier to automate.
The samples have a modular structure.
The modules are downloaded from the wrongdoers’ website during the running of the script.
Renamed legitimate utilities are used for the encryption of files and deletion of the keys.
A high level of automation of the process has been achieved.
Almost everything is automated, the malware objects are automatically generated, letters are sent out automatically.
Furthermore, according to the malefactors the process of handling letters from victims and further contact with the victims has been automated.
The decyphering of test files of the victim, evaluation of the cost of the information, the provision of bills, checking payment and sending out decoders all happen automatically.
It is difficult for us to check the truth of this information but taking into account data obtained from studying the modules of Trojan-Downloader.BAT.Scatter there is no reason not to believe these claims.
The Scatter family appeared quite recently: the first samples were detected by Kaspersky Lab specialists at the end of July 2014.
In a short time it significantly evolved, providing itself with the functionality of Email-Worm and Trojan-PSW.
From 25 July 2014 to 25 January 2015 we detected 5989 attacks with the use of Trojan-Downloader.JS.Scatter on 3092 users.
Number of detected downloadings of Trojan-Downloader.JS.Scatter.
The spike in the middle of November is the result of a new modification spreading in the USA
The geography of distribution of Trojan-Downloader.JS.Scatter downloads 25 July 2014 — 25 January 2015
This family is worth discussing in more detail as we can say with certainty that the Trojan-Downloader.
*.Scatter family is a new step in the evolution of encrypters.
The Scatter program family is multimodule script multifunction malware.
As an example we chose the modification of the encryption module which is detected as Trojan-Ransom.BAT.Scatter.ab which started to appear with regularity in the middle of October.
The malware download module is spread in email attachments.
The filenames are specially chosen by the attackers to make the letter seem legitimate and end up with the accounting staff.
The most popular names of the Scatter download modification appearing in the first half of October
If a user attempts to open the attachment they start the downloader, which is an obfuscated JavaScript and is detected by Kaspersky Lab as Trojan-Downloader.JS.Scatter.i
Fragment of the obfuscated code of the downloader Trojan-Downloader.JS.Scatter.i
After being started by the user the downloader downloads five other objects from the malefactor’s site.
These files are saved in a directory defined by the variable %TEMP%.
Not all of these five objects are harmful:
fake.keybtc – is a renamed version of the legitimate program gnupg gpg.exe intended for carrying out cryptographic operations.
night.keybtc – is a renamed version of the library iconv.dll necessary for gpg.exe to work properly
trash.keybtc – is a renamed version of the utility sdelete.exe from Microsoft designed to reliably delete files.
key.block – is a malicious command script that uses the utilities above to encrypt files.
This object is detected by Kaspersky Lab as Trojan-Ransom.BAT.Scatter.ab
doc.keybtc – this file is in the Microsoft Word format.
The downloader renames this file as word.doc and then tries to run it.
If there is a program for looking at .doc files on the user’s computer the user sees the following picture:
The beginning of the Microsoft Word document shown to the user by the downloader Trojan-Downloader.JS.Scatter.i
This document doesn’t contain any malicious code.
Its task is too reduce the alertness of the user and distract his attention from the processes taking place on his/her computer.
In the meantime the downloader renames the file key.block to key.cmd and runs it.
At that the work of the downloader is finished and Trojan-Ransom.BAT.Scatter begins.
