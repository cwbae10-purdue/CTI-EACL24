Exploits
Dropper
Loader Module
Main component
Modules, general overview
Recon group
Password group
Email group
USB drive group
Keyboard group
Persistence group
Spreading group
Mobile group
Exfiltration group
Known file location: %PROGRAMFILES%Windows NTiTunesNotifSrv.exe
Known variants:
The file is a PE EXE file, compiled with Microsoft Visual Studio 2010.
Creates event named “sdjvkbasyfvbalvjklas”.
Writes encrypted log files:
%TMP%iTunes_notification_%p.dat %TMP%iTunes_ddsa_%p.tmp
where %p is derives from the result of GetTickCount() API function.
Log files are encrypted with a custom encryption algorithm based on AMPRNG.
When started, the module writes the following registry value to be executed each time Windows starts:
HKCUSOFTWAREMicrosoftWindowsCurrentVersionRuniTunes Notification Service=%path to self% Then, it locates the ITunes mobile device DLL and “CoreFoundation.dll” and resolves the following API functions:
AMDeviceNotificationSubscribe AMRestoreRegisterForDeviceNotifications AMDeviceConnect AMDeviceIsPaired AMDeviceValidatePairing AMDeviceStartSession AMDeviceStartService AFCConnectionOpen AFCConnectionClose AMDeviceCopyValue AFCDirectoryOpen AFCDirectoryRead AFCDirectoryClose AFCFileInfoOpen AFCKeyValueRead AFCKeyValueClose AFCFileRefOpen AFCFileRefRead AFCFileRefWrite AFCFileRefClose AMDeviceDisconnect __CFStringMakeConstantString
If succeeded, the module calls AMDeviceNotificationSubscribe to set up own callback for the iOS device connection/disconnection events.
In the Device notification callback function, the module logs each connection and disconnection event.
When a device is connected, it starts a new thread that manipulates this device.
The module establishes a connection to the device using AMDeviceConnect, AMDeviceIsPaired, AMDeviceValidatePairing and finally, AMDeviceStartSession.
Then, it starts the following services on the device: “com.apple.afc2”, “com.apple.afc”.
The service “com.apple.afc2” is usually created when the device was jailbroken, so the module sets up a special flag if the service was started successfully.
Then, it opens an Apple File Connection via the started service using AFCConnectionOpen.
The module reads device settings using AMDeviceCopyValue.
The following settings are referenced by name:
UniqueDeviceID DeviceClass DeviceName ModelNumber ProductType ProductVersion BuildVersion SerialNumber ActivationState SIMStatus InternationalMobileEquipmentIdentity InternationalMobileSubscriberIdentity IntegratedCircuitCardIdentity PhoneNumber WiFiAddress BluetoothAddress TimeZone FirmwareVersion BasebandVersion BasebandBootloaderVersion
Also, it traverses the whole directory tree and stores the complete file listing in the log.
Then, it checks if device is jailbroken by
accessing the directory “/Applications” using AFCFileInfoOpen
checking if the service “com.apple.afc2” was started
The results are written in the log file.
Then, it builds a complete directory listing, starting from the root directory or “/private/var” (sample ee2e21a45a018c6faa68332a32c65ddd only).
It also searches and retrieves all files with following extensions:
.jpg .jpeg.txt .doc .docx .xls .xlsx .ppt .pptx .dot .dotx .odt .djvu .odts .reg .rtf .zip .rar .pdf .7z .wab .pab .vcf .ost .wav .mp4 .m4a .amr .log .cer .em .msg .arc .key .pgp .gpg
Also, it tries to retrieve the contents of the following files:
/private/var/mobile/Library/AddressBook/AddressBook.sqlitedb /private/var/mobile/Library/SMS/sms.db /private/var/mobile/Library/CallHistory/call_history.db /private/var/mobile/Library/Notes/notes.db /private/var/mobile/Library/Caches/locationd/consolidated.db /private/var/mobile/Library/Calendar/Calendar.sqlitedb /private/var/mobile/Library/Voicemail/voicemail.db /private/var/mobile/Library/Safari/History.plist /private/var/mobile/Library/WebKit/Databases/https_m.mg.mail.yahoo.com_0/0000000000000001.db /private/var/mobile/Library/WebKit/Databases/https_m.mg.mail.yahoo.com_0/0000000000000002.db /private/var/mobile/Library/WebKit/Databases/https_m.mg.mail.yahoo.com_0/0000000000000003.db /private/var/mobile/Library/WebKit/Databases/https_m.mg.mail.yahoo.com_0/0000000000000004.db /private/var/mobile/Library/WebKit/Databases/https_m.mg.mail.yahoo.com_0/0000000000000005.db /private/var/mobile/Library/WebKit/Databases/https_m.mg.mail.yahoo.com_0/0000000000000006.db /private/var/mobile/Library/WebKit/Databases/https_m.mg.mail.yahoo.com_0/0000000000000007.db /private/var/mobile/Library/WebKit/Databases/https_m.mg.mail.yahoo.com_0/0000000000000008.db /private/var/mobile/Library/WebKit/Databases/https_m.mg.mail.yahoo.com_0/0000000000000009.db /private/var/mobile/Library/WebKit/Databases/https_mail.google.com_0/0000000000000001.db /private/var/mobile/Library/WebKit/Databases/https_mail.google.com_0/0000000000000002.db /private/var/mobile/Library/WebKit/Databases/https_mail.google.com_0/0000000000000003.db /private/var/mobile/Library/WebKit/Databases/https_mail.google.com_0/0000000000000004.db /private/var/mobile/Library/WebKit/Databases/https_mail.google.com_0/0000000000000005.db /private/var/mobile/Library/WebKit/Databases/https_mail.google.com_0/0000000000000006.db /private/var/mobile/Library/WebKit/Databases/https_mail.google.com_0/0000000000000007.db /private/var/mobile/Library/WebKit/Databases/https_mail.google.com_0/0000000000000008.db /private/var/mobile/Library/WebKit/Databases/https_mail.google.com_0/0000000000000009.db
Collected information including iOS device configuration variables, file listings and file contents is written to the file “%TMP%iTunes_ddsa_%p.tmp”.
This file is encrypted and compressed with Zlib.
The log starts with a MAGIC number 0x5C63F935, then 0x14 bytes of 0xFF, DWORD length of header, header data, then log data.
The data consists of tagged records.
The following tag values are known to us:
0x8002 Time/date 0x8004 SHA1 of MAC address, System Volume Serial Number, IE Product ID, the same is written in HKCU,HKLMSOFTWAREMicrosoftADOSoftware32, “ProductID” 0x8005 Log ID / header 0x8006 Log data
Compressed directory log starts with magic 0x5C63F934.
Known variants
PE Exe file compiled with Microsoft Visual C++ 2008.
Creates log file with “%TMP%adobe_upd_imhbfex_%p_%p.dat” file name where %p depends on a result of GetTickCount() function.
It locates (SOFTWAREPC Connectivity SolutionAPI) and loads ‘ConnAPI.dll’ and ‘DAAPI.dll’ libraries (exits if unsuccessful and writes to log “ERROR LOADING ConnAPI.dll: ‘%d'” and “EXITING…”) followed by “SUCCESS LOADING ConnAPI.dll: ‘%d’n'” string written to log file and time stamp.
Note: Each event which is written to a log file is followed up with time stamp which is written in a log file prepended by a string in the following format: [%04d-%02d-%02d %02d:%02d:%02d] (year-month-day hour-minute-second).
Writes to log “===========PROGRAM_STARTED_V_0.1=======” followed by time stamp.
Creates mutex with “sysvolumecheckasdfg” name and checks if program is already running.
If yes, then it writes to log “PROGRAM IS ALREADY RUNNING – EXITING &” and exits.
Creates registry key SOFTWAREMicrosoftWindowsCurrentVersionRunStartup%path_to_file%
It resolves the following API functions from ConnAPI.dll:
CONAAllocString
CONAAllocStringMB
CONAFreeString
CONAAllocMemory
CONAFreeMemory
CONAOpenDM
CONACloseDM
CONASetDeviceListOption
CONAGetDeviceCount
CONAGetDevices
CONAGetDevice
CONAFreeDeviceStructure
CONARefreshDeviceList
CONARenameFriendlyName
CONARegisterNotifyCallback
CONARegisterDMNotifyIF
CONASearchDevices
CONAFreeConnectionInfoStructures
CONAChangeDeviceTrustedState
CONAGetDeviceInfo
CONAFreeDeviceInfoStructure
CONAModemConfig
CONAFreeModemConfigData
CONAOpenFS
CONACloseFS
CONARegisterFSNotifyCallback
CONARegisterFSNotifyIF
CONARefreshDeviceMemoryValues
CONAGetMemoryTypes
CONAGetMemoryValues
CONASetCurrentFolder
CONAGetCurrentFolder
CONAFindBegin
CONAFindNextFolder
CONAFindNextFile
CONAFindEnd
CONACreateFolder
CONADeleteFolder
CONARenameFolder
CONAGetFolderInfo
CONAMoveFolder
CONACopyFolder
CONAGetFileInfo
CONADeleteFile
CONAMoveFile
CONACopyFile
CONARenameFile
CONAReadFile
CONAWriteFile
CONAReadFileInBlocks
CONAWriteFileInBlocks
CONACancel
CONAFreeFileInfoStructure
CONAFreeFolderInfoStructure
CONAFreeFolderContentStructure
CONAAllocFileDataMemory
CONAFreeFileDataMemory
CONAInstallApplication
CONAListApplications
CONAUninstallApplication
CONAFreeApplicationInfoStructures
CONAConvertFile
CONAGetConvertFileTypes
CONAFreeConvertFileTypes
It resolves the following API functions from DAAPI.dll:
CAGetAPIVersion
DAOpenCA
DACloseCA
CAGetFolderInfo
CAFreeFolderInfoStructure
CAGetIDList
CAFreeIdListStructure
CABeginOperation
CAReadItem
CAWriteItem
CADeleteItem
CAWriteField
CADeleteField
CACommitOperations
CAEndOperation
CAFreeItemData
CARegisterNotifyCallback
CARegisterOperationCallback
If succeeded the module calls CONAOpenDM function which opens the device management connection and returns a handle to the device management context.
If succeeded a module calls CONARegisterNotifyCallback and to register a callback function for the device list notifications and writes to log “I AM WORKING…”.
If device was connected it starts a new thread to get information from the device.
The module uses CONARefreshDeviceList, CONASetDeviceListOption, CONAGetDeviceCount, CONAGetDevices and CONAGetDevice API functions to obtain a device which will be manipulated.
If a device was connected the module writes to log “!!
!————– DEVICE ATTACHED: ‘%s’————— !!
!”.
It calls GetDeviceInfo function to get the following information about the connected device: type, name, software version, used language, synchronization support.
A module also gets information about device memory, device model, IMEI number, device file system.
Obtained information is written to the log file.
Extracts inbox, outbox, sent, archive messages, drafts, templates, SMS/MMS messages from user’s folders with statuses ‘SENT’, ‘UNREAD’, ‘READ’, ‘DRAFT’, ‘PENDING’, ‘DELIVERED’, ‘SENDING’, or with undefined status ‘UNDEFINED MESSAGE_STATUS’ or ‘UNDEFINED FOLDER ID’.
SMS and MMS messages are written separately to a log file.
Extracts meetings, birthdays, memos, reminders, notes, ‘To Do’ lists with repetition attributes ‘NONE’, ‘ILY’ (I suppose it means ‘DAILY’ but authors must have mistyped), ‘WEEKLY’, ‘MONTHLY’, ‘YEARLY’ or ‘Unknown’; with priority attributes ‘HIGH’, ‘NORMAL’, ‘LOW’ or ‘Unknown’; with action attributes ‘NEEDS_ACTION’, ‘COMPLETED’ or ‘Unknown’; with alarm attributes ‘NOT_SET’, ‘SILENT’, ‘WITH_TONE’ or ‘UNKNOWN’; with starting/ending time, subject, location and status.
The module writes everything to a log file.
Extracts all contacts with the following fields: ME, FROMAL_NAME, MIDDLE_NAME, ST_NAME, TITLE, SUFFIX, COMPANY, JOB_TITLE, BIRTHDAY, NICKNAME, GENERAL_NUMBER, HOME_NUMBER, WORK_NUMBER, PREF_NUMBER, R_NUMBER, GER_NUMBER, MOBILE_NUMBER, MOBILE_HOME_NUMBER, MOBILE_WORK_NUMBER, X_NUMBER, X_HOME_NUMBER, X_WORK_NUMBER, VIDEO_CALL_NUMBER, VOIP_NUMBER, VOIP_HOME_NUMBER, VOIP_WORK_NUMBER, POSTAL_ADRESS, BUSINESS_POSTAL_ADRESS, HOME_POSTAL_ADRESS, EMAIL_ADRESS, HOME_EMAIL_ADRESS, WORK_EMAIL_ADRESS, WEB_ADRESS, HOME_WEB_ADRESS, WORK_WEB_ADRESS, PTT_ADRESS, VIDEO_ADRESS, SWISS_ADRESS.
The module writes everything to a log file.
Retrieve information about applications which have already been installed on a device.
Also monitors if user installs/uninstalls any SIS/SISX/J2ME application.
The module writes everything to a log file.
Looks for files from root directory (txt, cdb, doc, docx, xls, xlsx, ppt, pptx, dot, dotx, odt, djvu, odts, reg, rtf, zip, rar, pdf, 7z, wab, pab, vcf, ost, jpg, waw, mp4, m4a, amr, exe, log, cer, eml, msg, arc, key, pgp, gpg) and tries to retrieve them.
Known files
MD5 Compilation date (encrypted) 70bee4d4141e6d963aa72a0da08b6683 11:14:22, July 8, 2011 09b4f1e0c03d7dbdac402df4c0625167 15:52:36, October 19, 2010
70bee4d4141e6d963aa72a0da08b6683 (724992 bytes)
PE Exe file compiled with Microsoft Visual C++ 2005.
Creates log file in the following path ‘%%TMP%%tmp_m.%p.%p.dat’ where all information about the module’s work will be written and writes ‘Application starting, version 2.0.0.2, obj: %s’.
Module uses the same time/date format as in the Nokia module (‘year-month-date hours-minutes-seconds’) after every new log entry.
Creates mutex “dfgber7t8234ytfndfugh5vndfuvh4”.
Initialize RAPI.dll and following API functions:
CeSHCreateShortcut
CeGetSpecialFolderPath CeFindClose
CeFindFirstFile
CeRegEnumKeyEx
CeRegEnumValue
CeWriteFile
CeCreateFile
CeReadFile
CeCreateProcess
CeCloseHandle
CeDeleteFile
CeGetLastError
CeRegQueryValueEx
CeRegCloseKey
CeRegCreateKeyEx
CeRegSetValueEx
CeRegOpenKeyEx
CeRapiUninit
CeRapiInitEx
CeRapiInit
After that it checks the ActiveSync version and writes information to a log file.
Creates event ‘dfjsbnegisfgsafgdsgcxrte’.
Deletes ‘ActiveSync Connection Service’ value in ‘SOFTWAREMicrosoftWindowsCurrentVersionRun’.
If the module wasn’t able to delete this value it creates ‘delex.bat’ file in TMP folder:
:Repeat del ‘path_to_itself’ if exist ‘path_to_itself’ goto Repeat del “C:DOCUME~1’USER_NAME’LOCALS~1Tempdelex.bat”
And after that launches it.
Module uses WaitForSingleObject API function and waits for a device to be connected.
If device is connected then it writes ‘Device connected’ to a log file and calls a subroutine which initializes a connection and gets information like devices’ name, OS version, CLSID which is written to a log file.
The module also checks the associations (in a registry of a device) between certain file types and applications for these file types on a device and writes this information to a log file:
PDF (PDF viewer): pdf
WCELOAD (CAB file installer): cab
WMPLAYER (Windows Media Player): mp4, 3gp, amr, avi, wav, wma, wmv, asf, midi, aac, mp3d, mp3
IEXPLORE1 (Internet Explorer): res, wsp, file, https, ftp, http, url, ico, html, xml, xhtml, xsl
PPT (Pocket PowerPoint): ppt, pps, pptx, pptm, ppsx, ppsm
PIMG (Pocket image viewer): jfif, gif, png, bmp, jpg
PXL (Pocket Excel): pxl, pxt, xls, xlt, xlsx, xltx, xlsm, xltm
PWORD (Pocket Word): rtf, psw, dot, dotx, docx, docm, dotm, pwt, doc, txt
XML Provisioning
First the module tries to inject an XML provisioning document on a device.
Loads the provisioning doc on a device:
