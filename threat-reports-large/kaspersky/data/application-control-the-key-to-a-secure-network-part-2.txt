Part 1
The idea behind Default Deny is very simple and logical.
However, until now this approach was focused exclusively on a very narrow target audience.
This was primarily because of the technical challenges arising on the road toward developing a solution that would be appropriate for broad use, and without a number of critical limitations.
Using Default Deny mode entails a shift in priorities when selecting security policies — moving away from user freedom and convenience toward accomplishing the main goal of any data security system: minimizing the risk of data leakages and/or the loss of any critical business data.
However, the early forms of strict application control system caused major function limitations that made the use of this arrangement nearly impossible.
Maintaining a quality Default Deny mode requires additional functions, or else a corporate network may not be able to operate as needed.
When transitioning to the Default Deny mode, a sysadmin will need to tackle a number of tasks.
In order to make the process easier, Application Control — as the main component that will be managing a corporate network’s applications — must first undergo some substantial changes.
So, the use of Default Deny mode is possible and practical only after the following functions are put into place:
Inventory – collecting information about all of the software programs installed on the corporate network, all computers, and all network resources.
Categorization – dividing up the inventoried software into functional groups: OS components, browsers, multimedia, games, etc.
Configuration, or Application Management – introducing Application Control restrictions for certain users or groups of users for certain application categories (basically defining security policies).
Dynamic Allowlist – a knowledge base about all of the varieties of software around the world.
Current and regularly updated information about applications, their reputations, categories, and popular or recommended analogues.
This is expert-level data that is supplied by security solution developers.
Software security update mechanisms – autonomous means of maintaining regular updates for commonly used software, thus relieving administrators of the need to repeatedly go through the lengthy procedures of identifying and legalizing applications that are updated on the network.
Maintaining a list of trusted users and software sources – tools provided to network administrators, security engineers for simple, convenient ways to legalize software.
In particular, this involves creating lists of trusted network resources on the Internet and the local corporate network (HTTP/FTP/Shared Folders/etc.)
– sources of clean apps that are permitted for installation and use.
Testing and supporting a beta mode – a means of static or dynamic detection of systemic collisions arising during the introduction of security policies (incompatibility / inoperativeness of various applications) that could lead to interference in business processes.
User feedback and support – tools for managing incidents to ease the user-support process as much as possible.
Monitoring and audit – various tools for collecting, aggregating, and standardizing reports.
We will now address the Allowlist Security Approach component in more detail.
WSA is a dynamic database of clean files (a Dynamic Allolist).
Interest in Dynamic Allowlists stems from both technical and organizational aspects, without which it would not be possible to achieve the Allowlist’s maximum effect.
So, what is a Dynamic Allowlist?
It is essentially a knowledge base about all of the different types of legitimate software programs.
From a technical point of view, a Dynamic Allowlist is an enormous database of “clean” software that can be continuously updated with different types of files, including new installation files, and – most importantly – information about these objects.
The quality and completeness of the data in these types of expert-level data resources depends on their suppliers.
Leading security software developers are the ones compiling Dynamic Allowlists.
A Dynamic Allowlist is a necessary component for three of the seven tasks that need to be accomplished to make Default Deny work (see the table above).
Clearly, the quality of the solution provided by a vendor will have a direct correlation to the quality of the database in that solution.
To accomplish the tasks above, the Allowlist should contain:
A software database: the developer, product name, latest version, other information primarily derived from the attributes of each program.
Additional information (expert-level data): information about the risk level – software classification, its reputation: trusted, untrusted, potential threat, etc.
software category: OS component, browser, games, office apps, etc.
the software’s business purpose: accounting and finance, marketing, HR, CRM, logistics, etc.
software alternatives – data about similar programs statistics – prevalence, regional distribution, etc.
information about the risk level – software classification, its reputation: trusted, untrusted, potential threat, etc.
software category: OS component, browser, games, office apps, etc.
the software’s business purpose: accounting and finance, marketing, HR, CRM, logistics, etc.
software alternatives – data about similar programs
statistics – prevalence, regional distribution, etc.
What other requirements are there for Dynamic Allowlists aside from data?
First and foremost, a Dynamic Allowlist should be dynamic, as its name implies.
Each day, multiple new legitimate applications and updates for existing applications are released.
That means that security software developers have to respond immediately to any changes in the software world, and promptly update their knowledge bases.
In order to do that, they must also regularly and promptly add entries to their databases of clean software programs from the many sources from different parts of the world.
These updates must take place automatically, since the volumes of data are enormous (terabytes of data every day).
For this purpose, suppliers of Dynamic Allowlists send so-called ‘crawlers’ out onto the Internet — crawlers act as search agents that monitor new software and, when needed, download new applications.
To keep databases up to date, it is also important to develop technological partnerships among vendors and major manufacturers and distributors, i.e., independent software vendors.
The goal of these partnerships is to obtain, process, and analyze (classify and categorize) new software before it is publicly released in order to minimize any false positives or instances where a security solution and a partner’s software are incompatible.
Another possible source of data for keeping databases up to date is a global data network created by a vendor based on user communities.
This type of data network offers a major competitive edge — it helps track metadata about the software launched on user computers, and it adds data on the emergence of new apps and different software updates to the knowledge base.
