Identifying a botnet is not an easy task sometimes, especially when one gets lost in different components like droppers, infectors and other bad stuff.
Some two weeks ago, Jose Nazario from Arbor Networks pointed me to a new varmint that appears to be another peer-to-peer bot.
When executed, the program installs tons of stuff that holds a number of goodies, for example
an executable hidden in an Alternate Data Stream,
three Bitcoin miners: the Ufasoft miner, the RCP miner and the Phoenix miner,
a file with geo-location information for IP address ranges.
However, we leave these aside for now and focus on the botnetâ€™s architecture instead, which is really just a channel for pushing software to infected machines.
Scrabbling about in the installed programs finally brought up the actual bot, which we detect as Trojan.Win32.Miner.h.
The binary has some layers of obfuscation to make analysis harder but eventually writes a UPX packed executable into a memory section from where to original binary can be restored.
One of the first things that come to attention is a list of 1953 hard-coded IP address strings that are contained in the binary.
These addresses are contacted by the bot during its bootstrapping phase in order to join the peer-to-peer network.
IP address list in the deobfuscated binary
To verify if a remote host is really part of the botnet, it is first probed on port 62999/tcp.
Afer that, all subsequent communication with that host takes place over HTTP connections on port 8080/tcp.
If a bot wants to receive a piece of information from the botnet, it sends a GET request for the URL /search=[resource] to another peer (see red part below).
The response (shown in blue) contains the requested data.
In the example below the bot asks if a file named ip_list_2 exists.
GET /search=ip_list_2.txt HTTP/1.1 Connection: close Host: 67.230.63.171
