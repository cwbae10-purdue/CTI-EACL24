Market share!
It’s an easy answer, but not the only one.
In 2011, Apple was estimated to account for over 5% of worldwide desktop/laptop market share.
This barrier was a significant one to break – Linux maintains under 2% market share and Google ChromeOS even less.
This 15 year peak coincided with the first exploration by the aggressive FakeAv/Rogueware market targeting Apple computers, which we discovered and posted in April 2011 and later in May 2011, which no longer seem to be such an odd coincidence.
Also, the delay in Apple malware until now most likely was not because Apple exploits were unavailable, or because the Mac OS X system is especially hardened.
The 2007 “Month of Apple Bugs” demonstrated that the Mac OS X and supporting code is full of exploitable flaws.
Safari, Quicktime, and other software on Apple devices is regularly exploited during pwnage contests, but widespread cybercrime attention hadn’t caught on until this past year.
At this point, we still don’t know who is behind Flashfake, so we don’t know for sure that they were the same Mac OS X FakeAv/Rogueware group.
Speculating that eastern euro-cybercrime is behind the botnet would be a pretty confident way to go right now.
There are known groups from the region that have succeeded at wringing ad revenues from traffic hijacking.
We don’t believe that other sensitive data has been targeted.
And the exploit distribution URLs that we are aware of have only targeted mac users.
These factors limit the operational and technical needs of a financially motivated cybercrime gang.
In a sense, it would appear that their activity was somewhat similar to the Koobface or Tdss gangs.
They haven’t commited large unique financial crimes to attract the attention of law enforcement, and their malware contains hooks and other code to perform more sophisticated banking crime than search traffic hijacking, but they most likely were looking to make a multitude of small financial gains.
On the other hand, thankfully, Apple hasn’t given these guys ample notice to make their run.
There can be plenty of money in that business – it is estimated that the Koobface guys ran off with millions after Facebook “outted” their operation under investigation.
But based on the domain registrations we have examined, the individuals are not quite so public and they are hiding their identities while they hijack search engine traffic.
The malware itself injects a number of hooks into running applications, much like the Zeus, SpyEye, and other spyware.
If these were used for financial crimes, the group operating this botnet would need to organize money mules and accomplices to launder their stolen money, which would grow the group and attract the attention of other authorities.
On the technology side, Java is a big part of the puzzle.
Although the Trojan is called Flashfake because users were being convinced to install the malware as an Adobe Flash update, more recent versions of the malware were being installed via client-side Java exploitation.
Three vulnerabilities were targeted with client-side exploits, none of them were 0day, which seem to have become much more difficult to come by.
Besides, this set worked just as well for these operators.
It is interesting to note the duration of time from the original Oracle Java security update to the Apple Java security update, and when in that timeframe the release offensive security research publicly appeared.
And, when were Metasploit open source exploit modules were released targeting the related Java vulnerabilities?
The windows of time may be alarming – these are not 0day exploits, but Apple simply hasn’t released patches, leaving their customers exposed to the equivalent of known 0day exploits.
CVE-2012-0507
2012-02-15 Oracle patchesAtomic Reference Array vulnerability
2012-03-10 First Itw exploits targeting the vuln
2012-03-30 Metasploit developers add Java atomicreferencearray exploit module
2012-04-03 Apple patches their code
CVE-2011-3544
2011-05-12 Reported to vendor
2011-11-18 Oracle patched their Java SE
2011-11-30 Metasploit developers add “Rhino exploit” module
2011-11-30 Krebs reports operational Blackhole site with the new Java exploit
2012-3-29 Patched by Apple
CVE-2008-5353
“Deserializing Calendar objects”
2008-08-01 Reported to Sun with first instance of the vulnerability
2008-12-03 Sun patches their code (Sun link down)
2009-05-15 Apple patches MacOSX code
2009-06-16 Metasploit developers add Java deserialization exploit
Also on this list is a lame exploit described as a signed applet social engineering trick.
I’d prefer to call it the “the terribly confused user presented with the Java ‘do you want to trust this applet?’ dialog and will run anything you present them” gamble.
It first became a part of the Metasploit exploit module list on 2010-01-27.
Basically, these guys present the user with a file that the user thinks is a JavaUpdate provided by Apple Inc themselves, which they grant trust to perform any action on their machine.
The downloader will then communicate with a couple of sites to register and download new Flashfake components.
These components in turn, collect the system UUID and timestamp, then auto-generate with a crypto algorithm a set of C2 domains, along with maintaining a list of hard coded domains.
A couple of the newer components inject into running processes on the system hooking software functionality and hijacking traffic, much like past TDS malware.
